This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
__tests__/
  App.test.tsx
android/
  app/
    src/
      debug/
        AndroidManifest.xml
      main/
        java/
          com/
            hubermanappfrontend/
              MainActivity.kt
              MainApplication.kt
        res/
          drawable/
            rn_edit_text_material.xml
          values/
            strings.xml
            styles.xml
        AndroidManifest.xml
    build.gradle
    proguard-rules.pro
  gradle/
    wrapper/
      gradle-wrapper.properties
  build.gradle
  gradle.properties
  gradlew
  gradlew.bat
  settings.gradle
app_documentation/
   complex_workflows.md
  api_design_documentation.md
  app_description.md
  architecture_pan.md
  backend_implementation_todo.md
  component_breakdown.md
  component_interfaces_interactions.md
  content_strategy_management.md
  database_migrations_plan.md
  database_plan.md
  detailed_plan.md
  frontend_implementation_todo.md
  infrastructure_devops_details.md
  openapi_backend.yaml
  route_refactor_todo.md
  security_plan.md
  technology_versions_libraries.md
  testing_strategy.md
  TODO.md
  ui_ux_handoff_integration.md
  user_stories_mvp.md
ios/
  hubermanAppFrontend/
    Images.xcassets/
      AppIcon.appiconset/
        Contents.json
      Contents.json
    AppDelegate.swift
    Info.plist
    LaunchScreen.storyboard
    PrivacyInfo.xcprivacy
  hubermanAppFrontend.xcodeproj/
    xcshareddata/
      xcschemes/
        hubermanAppFrontend.xcscheme
    project.pbxproj
  .xcode.env
  Podfile
src/
  components/
    Button/
      Button.tsx
  navigation/
    AppStack.d.ts
    AppStack.tsx
    AuthStack.d.ts
    AuthStack.tsx
    RootNavigator.tsx
  screens/
    Notes/
      NotesScreen.tsx
    Protocols/
      ProtocolDetailScreen.tsx
      ProtocolListScreen.tsx
    Reminders/
      CreateEditReminderScreen.tsx
      ReminderListScreen.tsx
    Settings/
      SettingsScreen.tsx
    ForgotPasswordScreen.tsx
    HomeScreen.tsx
    LoginScreen.tsx
    PremiumScreen.tsx
    RegisterScreen.tsx
    SignupScreen.tsx
  services/
    api/
      auth.ts
      billing.ts
      content.ts
      reminders.ts
      user.ts
  store/
    authStore.ts
    billingStore.ts
  theme/
    theme.ts
    ThemeProvider.tsx
  types/
    billing.ts
  App.tsx
  config.ts
.clinerules
.env.local
.env.production
.env.staging
.eslintrc.js
.gitignore
.prettierrc.js
.watchmanconfig
app.json
App.tsx
babel.config.js
Gemfile
index.js
jest.config.js
metro.config.js
package.json
README.md
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="__tests__/App.test.tsx">
/**
 * @format
 */

import React from 'react';
import ReactTestRenderer from 'react-test-renderer';
import App from '../App';

test('renders correctly', async () => {
  await ReactTestRenderer.act(() => {
    ReactTestRenderer.create(<App />);
  });
});
</file>

<file path="android/app/src/debug/AndroidManifest.xml">
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <application
        android:usesCleartextTraffic="true"
        tools:targetApi="28"
        tools:ignore="GoogleAppIndexingWarning"/>
</manifest>
</file>

<file path="android/app/src/main/java/com/hubermanappfrontend/MainActivity.kt">
package com.hubermanappfrontend

import com.facebook.react.ReactActivity
import com.facebook.react.ReactActivityDelegate
import com.facebook.react.defaults.DefaultNewArchitectureEntryPoint.fabricEnabled
import com.facebook.react.defaults.DefaultReactActivityDelegate

class MainActivity : ReactActivity() {

  /**
   * Returns the name of the main component registered from JavaScript. This is used to schedule
   * rendering of the component.
   */
  override fun getMainComponentName(): String = "hubermanAppFrontend"

  /**
   * Returns the instance of the [ReactActivityDelegate]. We use [DefaultReactActivityDelegate]
   * which allows you to enable New Architecture with a single boolean flags [fabricEnabled]
   */
  override fun createReactActivityDelegate(): ReactActivityDelegate =
      DefaultReactActivityDelegate(this, mainComponentName, fabricEnabled)
}
</file>

<file path="android/app/src/main/java/com/hubermanappfrontend/MainApplication.kt">
package com.hubermanappfrontend

import android.app.Application
import com.facebook.react.PackageList
import com.facebook.react.ReactApplication
import com.facebook.react.ReactHost
import com.facebook.react.ReactNativeHost
import com.facebook.react.ReactPackage
import com.facebook.react.defaults.DefaultNewArchitectureEntryPoint.load
import com.facebook.react.defaults.DefaultReactHost.getDefaultReactHost
import com.facebook.react.defaults.DefaultReactNativeHost
import com.facebook.react.soloader.OpenSourceMergedSoMapping
import com.facebook.soloader.SoLoader

class MainApplication : Application(), ReactApplication {

  override val reactNativeHost: ReactNativeHost =
      object : DefaultReactNativeHost(this) {
        override fun getPackages(): List<ReactPackage> =
            PackageList(this).packages.apply {
              // Packages that cannot be autolinked yet can be added manually here, for example:
              // add(MyReactNativePackage())
            }

        override fun getJSMainModuleName(): String = "index"

        override fun getUseDeveloperSupport(): Boolean = BuildConfig.DEBUG

        override val isNewArchEnabled: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED
        override val isHermesEnabled: Boolean = BuildConfig.IS_HERMES_ENABLED
      }

  override val reactHost: ReactHost
    get() = getDefaultReactHost(applicationContext, reactNativeHost)

  override fun onCreate() {
    super.onCreate()
    SoLoader.init(this, OpenSourceMergedSoMapping)
    if (BuildConfig.IS_NEW_ARCHITECTURE_ENABLED) {
      // If you opted-in for the New Architecture, we load the native entry point for this app.
      load()
    }
  }
}
</file>

<file path="android/app/src/main/res/drawable/rn_edit_text_material.xml">
<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (C) 2014 The Android Open Source Project

     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.
-->
<inset xmlns:android="http://schemas.android.com/apk/res/android"
       android:insetLeft="@dimen/abc_edit_text_inset_horizontal_material"
       android:insetRight="@dimen/abc_edit_text_inset_horizontal_material"
       android:insetTop="@dimen/abc_edit_text_inset_top_material"
       android:insetBottom="@dimen/abc_edit_text_inset_bottom_material"
       >

    <selector>
        <!--
          This file is a copy of abc_edit_text_material (https://bit.ly/3k8fX7I).
          The item below with state_pressed="false" and state_focused="false" causes a NullPointerException.
          NullPointerException:tempt to invoke virtual method 'android.graphics.drawable.Drawable android.graphics.drawable.Drawable$ConstantState.newDrawable(android.content.res.Resources)'

          <item android:state_pressed="false" android:state_focused="false" android:drawable="@drawable/abc_textfield_default_mtrl_alpha"/>

          For more info, see https://bit.ly/3CdLStv (react-native/pull/29452) and https://bit.ly/3nxOMoR.
        -->
        <item android:state_enabled="false" android:drawable="@drawable/abc_textfield_default_mtrl_alpha"/>
        <item android:drawable="@drawable/abc_textfield_activated_mtrl_alpha"/>
    </selector>

</inset>
</file>

<file path="android/app/src/main/res/values/strings.xml">
<resources>
    <string name="app_name">hubermanAppFrontend</string>
</resources>
</file>

<file path="android/app/src/main/res/values/styles.xml">
<resources>

    <!-- Base application theme. -->
    <style name="AppTheme" parent="Theme.AppCompat.DayNight.NoActionBar">
        <!-- Customize your theme here. -->
        <item name="android:editTextBackground">@drawable/rn_edit_text_material</item>
    </style>

</resources>
</file>

<file path="android/app/src/main/AndroidManifest.xml">
<manifest xmlns:android="http://schemas.android.com/apk/res/android">

    <uses-permission android:name="android.permission.INTERNET" />

    <application
      android:name=".MainApplication"
      android:label="@string/app_name"
      android:icon="@mipmap/ic_launcher"
      android:roundIcon="@mipmap/ic_launcher_round"
      android:allowBackup="false"
      android:theme="@style/AppTheme"
      android:supportsRtl="true">
      <activity
        android:name=".MainActivity"
        android:label="@string/app_name"
        android:configChanges="keyboard|keyboardHidden|orientation|screenLayout|screenSize|smallestScreenSize|uiMode"
        android:launchMode="singleTask"
        android:windowSoftInputMode="adjustResize"
        android:exported="true">
        <intent-filter>
            <action android:name="android.intent.action.MAIN" />
            <category android:name="android.intent.category.LAUNCHER" />
        </intent-filter>
      </activity>
    </application>
</manifest>
</file>

<file path="android/app/proguard-rules.pro">
# Add project specific ProGuard rules here.
# By default, the flags in this file are appended to flags specified
# in /usr/local/Cellar/android-sdk/24.3.3/tools/proguard/proguard-android.txt
# You can edit the include path and order by changing the proguardFiles
# directive in build.gradle.
#
# For more details, see
#   http://developer.android.com/guide/developing/tools/proguard.html

# Add any project specific keep options here:
</file>

<file path="android/gradle/wrapper/gradle-wrapper.properties">
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-8.13-bin.zip
networkTimeout=10000
validateDistributionUrl=true
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists
</file>

<file path="android/gradle.properties">
# Project-wide Gradle settings.

# IDE (e.g. Android Studio) users:
# Gradle settings configured through the IDE *will override*
# any settings specified in this file.

# For more details on how to configure your build environment visit
# http://www.gradle.org/docs/current/userguide/build_environment.html

# Specifies the JVM arguments used for the daemon process.
# The setting is particularly useful for tweaking memory settings.
# Default value: -Xmx512m -XX:MaxMetaspaceSize=256m
org.gradle.jvmargs=-Xmx2048m -XX:MaxMetaspaceSize=512m

# When configured, Gradle will run in incubating parallel mode.
# This option should only be used with decoupled projects. More details, visit
# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
# org.gradle.parallel=true

# AndroidX package structure to make it clearer which packages are bundled with the
# Android operating system, and which are packaged with your app's APK
# https://developer.android.com/topic/libraries/support-library/androidx-rn
android.useAndroidX=true

# Use this property to specify which architecture you want to build.
# You can also override it from the CLI using
# ./gradlew <task> -PreactNativeArchitectures=x86_64
reactNativeArchitectures=armeabi-v7a,arm64-v8a,x86,x86_64

# Use this property to enable support to the new architecture.
# This will allow you to use TurboModules and the Fabric render in
# your application. You should enable this flag either if you want
# to write custom TurboModules/Fabric components OR use libraries that
# are providing them.
newArchEnabled=true

# Use this property to enable or disable the Hermes JS engine.
# If set to false, you will be using JSC instead.
hermesEnabled=true
</file>

<file path="android/gradlew">
#!/bin/sh

#
# Copyright © 2015-2021 the original authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
#

##############################################################################
#
#   Gradle start up script for POSIX generated by Gradle.
#
#   Important for running:
#
#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is
#       noncompliant, but you have some other compliant shell such as ksh or
#       bash, then to run this script, type that shell name before the whole
#       command line, like:
#
#           ksh Gradle
#
#       Busybox and similar reduced shells will NOT work, because this script
#       requires all of these POSIX shell features:
#         * functions;
#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,
#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;
#         * compound commands having a testable exit status, especially «case»;
#         * various built-in commands including «command», «set», and «ulimit».
#
#   Important for patching:
#
#   (2) This script targets any POSIX shell, so it avoids extensions provided
#       by Bash, Ksh, etc; in particular arrays are avoided.
#
#       The "traditional" practice of packing multiple parameters into a
#       space-separated string is a well documented source of bugs and security
#       problems, so this is (mostly) avoided, by progressively accumulating
#       options in "$@", and eventually passing that to Java.
#
#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,
#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;
#       see the in-line comments for details.
#
#       There are tweaks for specific operating systems such as AIX, CygWin,
#       Darwin, MinGW, and NonStop.
#
#   (3) This script is generated from the Groovy template
#       https://github.com/gradle/gradle/blob/HEAD/platforms/jvm/plugins-application/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt
#       within the Gradle project.
#
#       You can find Gradle at https://github.com/gradle/gradle/.
#
##############################################################################

# Attempt to set APP_HOME

# Resolve links: $0 may be a link
app_path=$0

# Need this for daisy-chained symlinks.
while
    APP_HOME=${app_path%"${app_path##*/}"}  # leaves a trailing /; empty if no leading path
    [ -h "$app_path" ]
do
    ls=$( ls -ld "$app_path" )
    link=${ls#*' -> '}
    case $link in             #(
      /*)   app_path=$link ;; #(
      *)    app_path=$APP_HOME$link ;;
    esac
done

# This is normally unused
# shellcheck disable=SC2034
APP_BASE_NAME=${0##*/}
# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)
APP_HOME=$( cd -P "${APP_HOME:-./}" > /dev/null && printf '%s\n' "$PWD" ) || exit

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD=maximum

warn () {
    echo "$*"
} >&2

die () {
    echo
    echo "$*"
    echo
    exit 1
} >&2

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "$( uname )" in                #(
  CYGWIN* )         cygwin=true  ;; #(
  Darwin* )         darwin=true  ;; #(
  MSYS* | MINGW* )  msys=true    ;; #(
  NONSTOP* )        nonstop=true ;;
esac

CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar


# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD=$JAVA_HOME/jre/sh/java
    else
        JAVACMD=$JAVA_HOME/bin/java
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD=java
    if ! command -v java >/dev/null 2>&1
    then
        die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
fi

# Increase the maximum file descriptors if we can.
if ! "$cygwin" && ! "$darwin" && ! "$nonstop" ; then
    case $MAX_FD in #(
      max*)
        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC2039,SC3045
        MAX_FD=$( ulimit -H -n ) ||
            warn "Could not query maximum file descriptor limit"
    esac
    case $MAX_FD in  #(
      '' | soft) :;; #(
      *)
        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC2039,SC3045
        ulimit -n "$MAX_FD" ||
            warn "Could not set maximum file descriptor limit to $MAX_FD"
    esac
fi

# Collect all arguments for the java command, stacking in reverse order:
#   * args from the command line
#   * the main class name
#   * -classpath
#   * -D...appname settings
#   * --module-path (only if needed)
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.

# For Cygwin or MSYS, switch paths to Windows format before running java
if "$cygwin" || "$msys" ; then
    APP_HOME=$( cygpath --path --mixed "$APP_HOME" )
    CLASSPATH=$( cygpath --path --mixed "$CLASSPATH" )

    JAVACMD=$( cygpath --unix "$JAVACMD" )

    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    for arg do
        if
            case $arg in                                #(
              -*)   false ;;                            # don't mess with options #(
              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath
                    [ -e "$t" ] ;;                      #(
              *)    false ;;
            esac
        then
            arg=$( cygpath --path --ignore --mixed "$arg" )
        fi
        # Roll the args list around exactly as many times as the number of
        # args, so each arg winds up back in the position where it started, but
        # possibly modified.
        #
        # NB: a `for` loop captures its iteration list before it begins, so
        # changing the positional parameters here affects neither the number of
        # iterations, nor the values presented in `arg`.
        shift                   # remove old arg
        set -- "$@" "$arg"      # push replacement arg
    done
fi


# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'

# Collect all arguments for the java command:
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,
#     and any embedded shellness will be escaped.
#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be
#     treated as '${Hostname}' itself on the command line.

set -- \
        "-Dorg.gradle.appname=$APP_BASE_NAME" \
        -classpath "$CLASSPATH" \
        org.gradle.wrapper.GradleWrapperMain \
        "$@"

# Stop when "xargs" is not available.
if ! command -v xargs >/dev/null 2>&1
then
    die "xargs is not available"
fi

# Use "xargs" to parse quoted args.
#
# With -n1 it outputs one arg per line, with the quotes and backslashes removed.
#
# In Bash we could simply go:
#
#   readarray ARGS < <( xargs -n1 <<<"$var" ) &&
#   set -- "${ARGS[@]}" "$@"
#
# but POSIX shell has neither arrays nor command substitution, so instead we
# post-process each arg (as a line of input to sed) to backslash-escape any
# character that might be a shell metacharacter, then use eval to reverse
# that process (while maintaining the separation between arguments), and wrap
# the whole thing up as a single "set" statement.
#
# This will of course break if any of these variables contains a newline or
# an unmatched quote.
#

eval "set -- $(
        printf '%s\n' "$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS" |
        xargs -n1 |
        sed ' s~[^-[:alnum:]+,./:=@_]~\\&~g; ' |
        tr '\n' ' '
    )" '"$@"'

exec "$JAVACMD" "$@"
</file>

<file path="android/gradlew.bat">
@rem
@rem Copyright 2015 the original author or authors.
@rem
@rem Licensed under the Apache License, Version 2.0 (the "License");
@rem you may not use this file except in compliance with the License.
@rem You may obtain a copy of the License at
@rem
@rem      https://www.apache.org/licenses/LICENSE-2.0
@rem
@rem Unless required by applicable law or agreed to in writing, software
@rem distributed under the License is distributed on an "AS IS" BASIS,
@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@rem See the License for the specific language governing permissions and
@rem limitations under the License.
@rem
@rem SPDX-License-Identifier: Apache-2.0
@rem

@if "%DEBUG%"=="" @echo off
@rem ##########################################################################
@rem
@rem  Gradle startup script for Windows
@rem
@rem ##########################################################################

@rem Set local scope for the variables with windows NT shell
if "%OS%"=="Windows_NT" setlocal

set DIRNAME=%~dp0
if "%DIRNAME%"=="" set DIRNAME=.
@rem This is normally unused
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%

@rem Resolve any "." and ".." in APP_HOME to make it shorter.
for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi

@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"

@rem Find java.exe
if defined JAVA_HOME goto findJavaFromJavaHome

set JAVA_EXE=java.exe
%JAVA_EXE% -version >NUL 2>&1
if %ERRORLEVEL% equ 0 goto execute

echo. 1>&2
echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH. 1>&2
echo. 1>&2
echo Please set the JAVA_HOME variable in your environment to match the 1>&2
echo location of your Java installation. 1>&2

goto fail

:findJavaFromJavaHome
set JAVA_HOME=%JAVA_HOME:"=%
set JAVA_EXE=%JAVA_HOME%/bin/java.exe

if exist "%JAVA_EXE%" goto execute

echo. 1>&2
echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME% 1>&2
echo. 1>&2
echo Please set the JAVA_HOME variable in your environment to match the 1>&2
echo location of your Java installation. 1>&2

goto fail

:execute
@rem Setup the command line

set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar


@rem Execute Gradle
"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*

:end
@rem End local scope for the variables with windows NT shell
if %ERRORLEVEL% equ 0 goto mainEnd

:fail
rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
rem the _cmd.exe /c_ return code!
set EXIT_CODE=%ERRORLEVEL%
if %EXIT_CODE% equ 0 set EXIT_CODE=1
if not ""=="%GRADLE_EXIT_CONSOLE%" exit %EXIT_CODE%
exit /b %EXIT_CODE%

:mainEnd
if "%OS%"=="Windows_NT" endlocal

:omega
</file>

<file path="app_documentation/ complex_workflows.md">
**Huberman App: Complex Workflow & Algorithm Design**

**1. Introduction**

This document details the specific logic and design patterns for key complex workflows within the Huberman App backend. It elaborates on the processes outlined in `detailed_plan.md` and builds upon the modular structure defined in `component_breakdown.md` and `component_interfaces_interactions.md`. The goal is to provide clear implementation guidance for developers working on these critical features.

**2. Subscription Lifecycle Management**

*   **Goal:** To accurately track the state of a user's subscription across different providers (Stripe, Apple IAP, Google Play Billing) based on webhook events and scheduled checks.
*   **Key Components:**
    *   `SubscriptionBilling` Module: `SubscriptionService`, `WebhookController`, `Subscription` Model.
    *   `plans` table, `subscriptions` table (`status`, `ends_at`, `trial_ends_at` columns are crucial).
    *   Payment Providers: Stripe/Paddle/Apple/Google sending webhooks/notifications.
*   **Core Logic (State Machine):** The `subscriptions.status` field represents the current state. Transitions are triggered primarily by provider webhooks handled by the `WebhookController` which delegates processing to the `SubscriptionService`.

    *   **States:**
        *   `incomplete`: Initial state after checkout initiation but before successful payment (relevant for Stripe Checkout/Paddle).
        *   `trialing`: User is in a free trial period (requires `trial_ends_at` to be set).
        *   `active`: User has a paid, currently valid subscription. `ends_at` indicates the end of the current paid period.
        *   `past_due`: Payment failed, provider is retrying (Stripe/Paddle specific). Grace period might apply.
        *   `canceled`: User explicitly canceled *or* payment failed definitively. Subscription may remain active until `ends_at`. Feature access depends on whether `ends_at` is in the future.
        *   `expired`: The subscription period (`ends_at`) has passed, and it was not renewed (either due to cancellation or final payment failure). No access.

    *   **State Transitions (Conceptual - Provider events may vary):**
        *   **(Checkout) -> `incomplete`**: User initiates checkout (Stripe/Paddle).
        *   `incomplete` -> `active`/`trialing`: `checkout.session.completed` (Stripe), `subscription_created` (Paddle) webhook received with successful payment or trial setup. Update `status`, `ends_at`, `trial_ends_at`.
        *   `trialing` -> `active`: `invoice.payment_succeeded` (Stripe) or `subscription_payment_succeeded` (Paddle) after trial ends. Update `status`, `ends_at`. *OR* could happen via scheduled job checking `trial_ends_at`.
        *   `trialing` -> `expired`: Trial ends, no payment method, or user canceled during trial. `customer.subscription.updated` (Stripe), `subscription_canceled` (Paddle), `DID_FAIL_TO_RENEW` (Apple), `SUBSCRIPTION_EXPIRED` (Google). Update `status`.
        *   `active` -> `active`: Renewal successful. `invoice.payment_succeeded` (Stripe), `subscription_payment_succeeded` (Paddle), `DID_RENEW` (Apple), `SUBSCRIPTION_RENEWED` (Google). Update `ends_at` for the next period.
        *   `active` -> `past_due`: Renewal payment fails. `invoice.payment_failed` (Stripe - requires action), `subscription_payment_failed` (Paddle). Update `status`.
        *   `active` -> `canceled`: User cancels via provider portal/app. `customer.subscription.updated` (Stripe - `cancel_at_period_end=true`), `subscription_canceled` (Paddle), `DID_CHANGE_RENEWAL_STATUS` (Apple - off), `SUBSCRIPTION_CANCELED` (Google). Update `status`. Subscription *might* remain usable until `ends_at`.
        *   `past_due` -> `active`: Successful payment after retry. `invoice.payment_succeeded` (Stripe), `subscription_payment_succeeded` (Paddle). Update `status`, `ends_at`.
        *   `past_due` -> `canceled`: Final retry fails. `customer.subscription.updated` (Stripe - status `canceled`), `subscription_payment_failed` (Paddle - after retries). Update `status`. Set `ends_at` to now/past if not already.
        *   `canceled` -> `expired`: `ends_at` date is reached for a canceled subscription. Can be handled by a scheduled job checking `subscriptions` where `status = canceled` and `ends_at <= NOW()`. Update `status`.

    *   **Webhook Handling:** `WebhookController` receives POST request, verifies signature (critical!), determines provider and event type, and calls `SubscriptionService::handleWebhook()`. Service parses payload, finds relevant `User`/`Subscription`, updates DB state, and fires internal Laravel events (e.g., `SubscriptionRenewed`, `SubscriptionCanceled`) for other modules to react to.
    *   **Provider Differences:** Apple/Google require server-side receipt validation and parsing specific notification types (App Store Server Notifications V2 / Google Play Developer API RTDN). Logic needs to map their events to the internal state machine.

**3. Feature Gating Logic**

*   **Goal:** To restrict access to premium API routes and potentially limit usage of certain features (e.g., number of notes) based on the user's active subscription status.
*   **Key Components:**
    *   Laravel Middleware (e.g., `CheckPremiumAccess`).
    *   Laravel Policies (e.g., `NotePolicy`).
    *   `SubscriptionBilling` Module: `SubscriptionServiceInterface::userHasActivePremiumSubscription()`.
    *   `subscriptions` table.
    *   Redis Cache.
*   **Core Logic (Middleware Example - `CheckPremiumAccess`):**
    ```php
    // App/Http/Middleware/CheckPremiumAccess.php (Conceptual)
    namespace App\Http\Middleware;

    use Closure;
    use Illuminate\Http\Request;
    use Illuminate\Support\Facades\Auth;
    use Illuminate\Support\Facades\Cache;
    use App\Modules\SubscriptionBilling\Contracts\SubscriptionServiceInterface; // Use Interface

    class CheckPremiumAccess
    {
        protected $subscriptionService;

        public function __construct(SubscriptionServiceInterface $subscriptionService) {
            $this->subscriptionService = $subscriptionService;
        }

        public function handle(Request $request, Closure $next)
        {
            $user = Auth::user();

            if (!$user) {
                return response()->json(['message' => 'Unauthenticated.'], 401); // Should be handled by 'auth:sanctum' earlier
            }

            // 1. Check Cache First
            $cacheKey = "user:{$user->id}:is_premium";
            $isPremium = Cache::get($cacheKey);

            if ($isPremium === null) {
                // 2. Cache Miss: Ask the Subscription Service
                $isPremium = $this->subscriptionService->userHasActivePremiumSubscription($user);
                // 3. Update Cache (e.g., for 15 minutes)
                Cache::put($cacheKey, $isPremium, now()->addMinutes(15));
            }

            if (!$isPremium) {
                // 4. Deny Access if not Premium
                return response()->json(['message' => 'Premium subscription required.'], 403);
            }

            // 5. Allow Access
            return $next($request);
        }
    }
    ```
*   **Core Logic (`SubscriptionServiceInterface::userHasActivePremiumSubscription`):**
    *   Takes a `User` object as input.
    *   Queries the `subscriptions` table:
        *   `WHERE user_id = ?`
        *   `WHERE status IN ['active', 'trialing']` (Or just `active` if trials don't grant full access).
        *   *(Optional but recommended)* `WHERE (ends_at IS NULL OR ends_at > NOW())` - Handles cases where status might be `canceled` but still within the paid period.
        *   Needs join/check against `plans` table to ensure the active subscription is for a *premium* plan type.
    *   Returns `true` if such a subscription exists, `false` otherwise.
*   **Policy Integration:** Policies (e.g., `NotePolicy::create(User $user)`) can inject `SubscriptionServiceInterface` and call `userHasActivePremiumSubscription()` or check feature flags (e.g., note limits based on plan) as part of their authorization logic.
*   **Application:** Apply the `CheckPremiumAccess` middleware to API routes/groups in `routes/api.php` that correspond to premium features. Use Policies for model-specific authorization checks within controllers.

**4. Customizable Reminders (Premium)**

*   **Goal:** Allow premium users to set custom reminders for specific protocols, triggering a push notification at the user-defined time/frequency in their local timezone.
*   **Key Components:**
    *   `ProtocolEngine` Module: `ReminderController`, `ReminderService`, `UserReminder` Model (stores `user_id`, `protocol_id`, `reminder_time`, `frequency`, `timezone`, `last_sent_at`, `is_active`, `device_token` - *CRITICAL*).
    *   Laravel Task Scheduling (`app/Console/Kernel.php`).
    *   Laravel Queues & Workers.
    *   `SendProtocolReminderNotification` Job & Notification class.
    *   Push Notification Service (e.g., FCM, APNS via Laravel Notifications or specific SDKs).
    *   React Native App (responsible for getting and sending the device token to the backend).
*   **Core Logic:**

    1.  **Device Token Registration:** When the user logs in or enables notifications, the React Native app gets the unique device push token (FCM/APNS) and sends it to the backend API (e.g., `POST /api/user/device-token`). The backend stores this token, likely associated with the `User` model or a dedicated `devices` table. *Storing multiple tokens per user is necessary if they use multiple devices.*
    2.  **Reminder Creation (API):** User interacts with RN UI -> `POST /api/reminders` -> `ReminderController` -> `ReminderService::setReminder()`.
        *   Service validates input (requires premium check).
        *   Saves reminder details to `user_reminders` table, including user's selected time, frequency (daily, weekly, specific days), protocol, and user's current timezone (stored e.g., on `users` table or passed in request). *Crucially, it needs access to the user's valid device token(s) when the notification job runs.*
    3.  **Scheduled Task (`Kernel.php`):** A console command is scheduled to run frequently (e.g., every minute).
        ```php
        // app/Console/Kernel.php
        protected function schedule(Schedule $schedule)
        {
            $schedule->command('reminders:send-due')->everyMinute();
            // OR use $schedule->job(new ProcessDueReminders)->everyMinute();
        }
        ```
    4.  **Processing Due Reminders (`reminders:send-due` Command / `ProcessDueReminders` Job):**
        *   Get the current time (UTC).
        *   Query the `user_reminders` table for active reminders (`is_active = true`).
        *   **Crucially, for each reminder:**
            *   Convert the *current UTC time* to the *user's stored timezone*.
            *   Check if the user's local time matches the `reminder_time` stored for the reminder.
            *   Check if the frequency matches (e.g., is it the correct day of the week?).
            *   Check `last_sent_at` to avoid double-sending if the job runs slightly late.
        *   For each reminder determined to be *due now*:
            *   Dispatch a `SendProtocolReminderNotification` job to the queue, passing the `user_reminder_id` or necessary details.
            ```php
            // Conceptual Command/Job Logic
            $nowUtc = now();
            $dueReminders = UserReminder::where('is_active', true)->cursor(); // Use cursor for memory efficiency

            foreach ($dueReminders as $reminder) {
                $userTimezone = $reminder->user->timezone ?? 'UTC'; // Get user timezone
                $nowInUserTz = $nowUtc->copy()->setTimezone($userTimezone);
                $reminderTime = Carbon::parse($reminder->reminder_time, $userTimezone); // Time stored without date

                // Compare times (HH:MM) and check frequency/day constraints
                if ($nowInUserTz->format('H:i') == $reminderTime->format('H:i') && /* check frequency match */ && /* check not recently sent */) {
                   SendProtocolReminderNotification::dispatch($reminder);
                   // Optionally update last_sent_at here or in the job
                }
            }
            ```
    5.  **Sending Notification (`SendProtocolReminderNotification` Job):**
        *   Executed by a queue worker.
        *   Retrieves the `UserReminder` and associated `User` and `Protocol`.
        *   Fetches the target user's valid device token(s) (from `users` or `devices` table).
        *   Constructs the notification payload (title, body with protocol name).
        *   Uses Laravel's Notification system (e.g., `Notification::send($user, new ProtocolReminder($protocol))`) or a specific service (FCM/APNS) to send the push notification to the user's device token(s).
        *   Handles potential errors (e.g., invalid token). Updates `last_sent_at` on the `UserReminder`.

**5. Tracking & Visualization Logic (Premium)**

*   **Goal:** Allow premium users to log their adherence to protocols and view progress visualizations like streaks or completion rates.
*   **Key Components:**
    *   `ProtocolEngine` Module: `TrackingController`, `TrackingService`.
    *   `user_protocol_tracking` table (`id`, `user_id`, `protocol_id`, `tracked_at` (DATE), `notes`, `metadata`, `created_at`, `updated_at`).
*   **Data Storage:** Each time a user marks a protocol as completed for a specific day, a record is created in `user_protocol_tracking`. The `tracked_at` field (DATE type) is key. The unique constraint `(user_id, protocol_id, tracked_at)` prevents duplicates.
*   **Logging Adherence (API):** User taps "Mark Done" -> `POST /api/tracking/log` (with `protocol_id` and optional `date`) -> `TrackingController` -> `TrackingService::logAdherence()`.
    *   Service validates input (requires premium check).
    *   Inserts or updates record in `user_protocol_tracking`. Use `updateOrCreate` based on the unique constraint.
*   **Visualization - Streak Calculation (Example):**
    *   **API:** `GET /api/tracking/summary?protocol_id={id}&metric=streak` -> `TrackingController` -> `TrackingService::calculateStreak()`.
    *   **`TrackingService::calculateStreak(User $user, int $protocolId)` Logic (Conceptual Pseudo-code):**
        ```pseudo
        function calculateStreak(user, protocolId):
          streak = 0
          today = currentDate() // Or maybe the latest tracked date for this user/protocol? Decide requirement.

          // Get relevant tracking dates, ordered descending
          trackedDates = query database:
             SELECT tracked_at FROM user_protocol_tracking
             WHERE user_id = user.id AND protocol_id = protocolId
             ORDER BY tracked_at DESC

          if trackedDates is empty:
             return 0

          // Check if the most recent tracking is today or yesterday (allows continuation)
          latestTrackedDate = trackedDates[0]
          if latestTrackedDate is not today AND latestTrackedDate is not yesterday:
             return 0 // Streak broken if >1 day missed

          // Check consecutive days backward
          expectedDate = today
          if latestTrackedDate is yesterday:
             expectedDate = yesterday // Start checking from yesterday if today wasn't logged

          for date in trackedDates:
             if date == expectedDate:
                streak = streak + 1
                expectedDate = expectedDate.subtract(1 day) // Look for the previous day
             else if date < expectedDate:
                 // Gap detected, streak broken before this date
                 break
             // else if date > expectedDate: This shouldn't happen with ORDER BY DESC

          return streak
        ```
*   **Other Visualizations:**
    *   **Completion % (e.g., Monthly):** Query `user_protocol_tracking` for the user/protocol within the date range. Count distinct `tracked_at` days. Divide by the total number of days in the month.
    *   **Calendar Heatmap:** Query all `tracked_at` dates for the user/protocol within a visible range. Frontend uses this data to color calendar days.

**6. Conclusion**

These detailed workflow descriptions provide a blueprint for implementing the core complex features of the Huberman App. Adhering to these designs, leveraging appropriate Laravel features (Middleware, Policies, Queues, Scheduling, Events), and carefully handling state transitions and edge cases (especially with external providers) will be crucial for building a robust and reliable backend.
</file>

<file path="app_documentation/api_design_documentation.md">
Okay, let's create the plan document (`api_design_documentation.md`) outlining the process and standards for creating the OpenAPI specification, and then provide a conceptual structure for the `openapi.yaml` file itself.

--- START OF FILE api_design_documentation.md ---

**Huberman App: API Design & Documentation Plan (OpenAPI)**

**1. Introduction**

This document outlines the process and standards for creating and maintaining the RESTful API contract for the Huberman App backend using the OpenAPI Specification (formerly Swagger). The resulting `openapi.yaml` file will serve as the single source of truth for API endpoints, request/response schemas, authentication, authorization requirements, and error handling. This ensures clear communication and alignment between the backend (Laravel) and frontend (React Native) development teams, facilitating efficient integration and testing.

**2. Tooling and Format**

*   **Specification Version:** OpenAPI 3.x (latest stable version recommended).
*   **Format:** YAML (`openapi.yaml`) is preferred for its readability compared to JSON.
*   **Generation/Maintenance:**
    *   **Initial Creation:** Likely manual or semi-automated based on initial controller/route definitions.
    *   **Ongoing Maintenance:** Consider using code annotations (e.g., `zircote/swagger-php` for Laravel) to generate the spec from PHP attributes/docblocks. This keeps documentation closer to the code but requires disciplined annotation. Alternatively, manual updates are feasible if rigorously maintained alongside code changes. The chosen method must be consistently applied.
    *   **Validation:** Use OpenAPI validation tools (online validators, editor plugins, CLI tools) regularly, potentially integrated into CI/CD pipelines, to ensure the spec is syntactically correct and adheres to the standard.

**3. Core Specification Structure**

The `openapi.yaml` file will utilize the following key sections:

*   `openapi`: Specifies the OpenAPI version.
*   `info`: Contains metadata (title, version, description).
*   `servers`: Defines base URLs for different environments (local, staging, production).
*   `tags`: Groups related API endpoints, typically aligned with backend modules (e.g., `Authentication`, `UserManagement`, `ContentManagement`, `NotesService`, `SubscriptionBilling`, `ProtocolEngine`, `Webhooks`).
*   `paths`: Defines all available API endpoints, including:
    *   HTTP methods (GET, POST, PUT, DELETE, etc.).
    *   Parameters (path, query, header).
    *   `requestBody`: Describes the payload for POST/PUT requests.
    *   `responses`: Defines possible HTTP status codes and their corresponding response schemas (including success and error responses).
    *   `security`: Specifies the required authentication/authorization schemes for the endpoint.
    *   `summary`, `description`, `tags`: For organization and clarity.
*   `components`: Defines reusable elements:
    *   `schemas`: Data models for request bodies and response payloads (based on `database_plan.md` and API Resources).
    *   `securitySchemes`: Defines authentication methods (e.g., Bearer Token).
    *   `responses`: Reusable response definitions (e.g., standard error responses).
    *   `parameters`: Reusable parameter definitions.

**4. Authentication (Laravel Sanctum/Passport)**

*   **Method:** Bearer Token authentication via Laravel Sanctum (preferred for SPAs/mobile apps) or Passport.
*   **Documentation:**
    *   Define a `securityScheme` named `bearerAuth` (or similar) of type `http` and scheme `bearer` in `components/securitySchemes`.
    *   Endpoints requiring authentication will include a `security` section referencing this scheme: `security: [{ bearerAuth: [] }]`.
    *   Login (`/api/login`) and registration (`/api/register`) endpoints will describe how to obtain the token in their response descriptions.

**5. Authorization & Feature Gating (Premium Features)**

*   **Enforcement:** All authorization and feature gating logic (checking for active premium subscriptions) is implemented **on the backend** (via Middleware, Policies, Service checks based on `SubscriptionBilling` module). The API documentation *reflects* these requirements but does not enforce them.
*   **Documentation:**
    *   Endpoints or specific operations requiring a Premium subscription will be clearly marked.
    *   **Method 1 (Description):** Use the `summary` or `description` field to explicitly state "Requires active Premium subscription."
    *   **Method 2 (Custom Extension - Optional):** Use a custom extension like `x-premium-required: true` on the path item or operation object for machine-readable indication, if desired.
    *   A standard `403 Forbidden` response schema (`#/components/responses/ForbiddenError`) will be referenced for cases where a non-premium user attempts to access a premium feature.

**6. Endpoint Structure & Key Areas (Based on Modules)**

Endpoints will be grouped using tags matching the modules defined in `component_breakdown.md`.

*   **`Authentication` Tag:**
    *   `POST /api/register`
    *   `POST /api/login`
    *   `POST /api/logout` (Requires `bearerAuth`)
    *   Password Reset endpoints (e.g., `POST /api/forgot-password`, `POST /api/reset-password`)
*   **`UserManagement` Tag:**
    *   `GET /api/user/profile` (Requires `bearerAuth`)
    *   `PUT /api/user/profile` (Requires `bearerAuth`)
*   **`SubscriptionBilling` Tag:**
    *   `GET /api/plans` (Lists available subscription plans - Free/Premium)
    *   `GET /api/user/subscription` (Gets current user's subscription status - Requires `bearerAuth`)
    *   Potentially endpoints to initiate checkout (provider-dependent) or fetch portal links.
*   **`ContentManagement` Tag:**
    *   `GET /api/episodes` (List episodes)
    *   `GET /api/episodes/{id}` (Get episode details, potentially including summaries)
    *   `GET /api/protocols` (List protocols - response may differ for free/premium users, documented in description)
    *   `GET /api/protocols/{id}` (Get protocol details - response details may differ, e.g., full implementation guide only for premium, documented in description)
    *   `GET /api/summaries` (Potentially filtered by episode/protocol)
*   **`NotesService` Tag:**
    *   `GET /api/notes` (List user's notes, requires `bearerAuth`)
    *   `POST /api/notes` (Create note, requires `bearerAuth` - premium limits described)
    *   `GET /api/notes/{id}` (Get specific note, requires `bearerAuth` + ownership policy check)
    *   `PUT /api/notes/{id}` (Update note, requires `bearerAuth` + ownership policy check)
    *   `DELETE /api/notes/{id}` (Delete note, requires `bearerAuth` + ownership policy check)
    *   `GET /api/episodes/{id}/public-notes` (Fetch public notes for an episode - premium feature for *viewing* or tied to note creator being premium? Clarify requirement.)
*   **`ProtocolEngine` Tag (Primarily Premium):**
    *   `GET /api/reminders` (Requires `bearerAuth`, documented as Premium)
    *   `POST /api/reminders` (Requires `bearerAuth`, documented as Premium)
    *   `PUT /api/reminders/{id}` (Requires `bearerAuth`, documented as Premium)
    *   `DELETE /api/reminders/{id}` (Requires `bearerAuth`, documented as Premium)
    *   `POST /api/tracking/log` (Log adherence, requires `bearerAuth`, documented as Premium)
    *   `GET /api/tracking/summary` (Get tracking data/streaks, requires `bearerAuth`, documented as Premium)
*   **`Webhooks` Tag:**
    *   `POST /api/webhooks/stripe`
    *   `POST /api/webhooks/apple`
    *   `POST /api/webhooks/google`
    *   (These endpoints *do not* use `bearerAuth`. Security is via signature verification, which should be noted in the description. Request bodies will match provider specifications).

**7. Request/Response Schemas (`components/schemas`)**

*   Define reusable schemas for all major data entities (`User`, `Episode`, `Protocol`, `Summary`, `Note`, `Plan`, `Subscription`, `Reminder`, `TrackingLog`, etc.) based on `database_plan.md` and how data is structured for the API (using Laravel API Resources).
*   Define standard success response wrappers if needed (e.g., `{ "data": <Schema> }`).
*   Define standard error response schemas (see below).

**8. Error Handling**

*   **Standard Structure:** Define a consistent error response structure. Example:
    ```yaml
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: General error message.
        errors: # Optional: Only for validation errors (422)
          type: object
          additionalProperties:
            type: array
            items:
              type: string
          description: Field-specific validation errors.
    ```
*   **HTTP Status Codes:** Document standard usage:
    *   `200 OK`: Successful GET, PUT, DELETE.
    *   `201 Created`: Successful POST.
    *   `204 No Content`: Successful DELETE where no body is returned.
    *   `400 Bad Request`: Generic client error (e.g., malformed JSON, invalid parameters not caught by validation).
    *   `401 Unauthorized`: Missing or invalid authentication token.
    *   `403 Forbidden`: Authenticated user lacks permission (e.g., policy failure, non-premium user accessing premium feature).
    *   `404 Not Found`: Resource not found.
    *   `422 Unprocessable Entity`: Validation errors (use `errors` field in response).
    *   `500 Internal Server Error`: Unexpected server-side error.
*   **Reusable Responses:** Define common error responses in `components/responses` (e.g., `NotFound`, `Unauthorized`, `Forbidden`, `ValidationError`, `InternalServerError`) referencing the `ErrorResponse` schema.

**9. API Versioning**

*   Implement API versioning from the start, likely via a URL prefix (e.g., `/api/v1/...`). Include this prefix in the `servers` definition.

**10. Maintenance and Governance**

*   The `openapi.yaml` file MUST be checked into version control (Git).
*   Pull requests modifying API-related backend code SHOULD include corresponding updates to the `openapi.yaml` file.
*   Regular reviews and validation checks (manual or automated) are necessary to keep the documentation accurate and useful.

**11. Outcome**

The final deliverable is a comprehensive, version-controlled `openapi.yaml` file located in the project repository root or a designated `/docs` directory. This file serves as the definitive contract for the Huberman App's RESTful API.
</file>

<file path="app_documentation/app_description.md">
**1. App Name**

Huberman App (Suggested Name)

**2. Introduction/Executive Summary**

The Huberman App is designed as a dedicated companion tool for listeners of the Huberman Lab podcast. Its core purpose is to bridge the gap between listening to the podcast and effectively implementing its science-backed health and performance protocols into daily life. It achieves this by providing structured guidance, actionable reminders, learning resources, progress tracking, and community features, addressing the challenge of translating extensive podcast information into consistent practice.

**3. Target Audience**

The app is intended for listeners and followers ("acolytes") of the Huberman Lab podcast who are motivated to apply the scientific protocols discussed to improve their health, well-being, performance, and overall lifestyle.

**4. Key Features**

The app operates on a Freemium model, offering both free core functionalities and an expanded Premium tier via subscription:

**Free Tier Features:**

*   **Basic Protocol Reminders:** Access pre-set reminders for a limited selection of foundational daily protocols (e.g., Morning Sunlight Exposure).
*   **Limited Content Access:** View short summaries and brief explanations for the foundational protocols available in the free tier.
*   **Basic Personal Notes:** Take simple personal notes linked only to the free content/protocols.
*   **Introduction & Onboarding:** Guided introduction to the app's purpose and basic features.

**Premium Tier Features (Subscription Required):**

*   **Comprehensive Protocol Library & Reminders:**
    *   Access reminders and content for the *full range* of protocols covered in the podcast (Sleep, Focus, Fitness, Nutrition, Mental Health, etc.).
    *   Fully *customizable reminders* (timing, frequency, snooze, grouping).
*   **Full Content Access & Depth:**
    *   Access both *succinct summaries* and *detailed, long-form explanations* for all protocols.
    *   Step-by-step implementation guides and practical tips.
    *   Curated links to relevant resources or papers mentioned (where feasible).
    *   Distilled key takeaways ("epiphanic summaries") for episodes/protocols.
*   **Advanced Note-Taking & Community:**
    *   Unlimited personal note-taking across all content with advanced organization (tags, search).
    *   Ability to *publicly post notes/takeaways* linked to specific episodes (community sharing).
    *   Potential for structured community discussions around protocols (moderated).
*   **Tracking & Personalization:**
    *   Tools to *track adherence* and consistency with selected protocols.
    *   Visualizations of progress and streaks.
    *   Create *personalized routines* or "stacks" combining multiple protocols for specific goals.
*   **Offline Access:** Download content (summaries, guides, notes) for offline use.
*   **Early Access & Updates:** Receive new protocols, content, and features as they are released.
*   **Ad-Free Experience:** Guaranteed free from any advertising.

**5. Core Functionality/How it Works**

The app serves as a centralized hub for Huberman Lab protocol knowledge and implementation. It takes complex information from the podcast and transforms it into actionable steps through reminders and structured guides (basic access free, full access premium). It supports learning via layered content (summaries/detailed explanations) and facilitates habit formation through reminders and tracking tools (premium). Users can personalize their experience through notes (basic free, advanced/public premium) and tailor routines (premium).

**6. Unique Selling Proposition (USP)/Why This App?**

*   **Simplifies Implementation:** Makes applying scientifically-grounded protocols significantly easier and more consistent.
*   **Consolidated & Structured Resource:** Organizes vast amounts of podcast information into an accessible, actionable format.
*   **Facilitates Learning & Practice:** Allows users to learn the science while receiving practical guidance on implementation.
*   **Personalization & Tracking (Premium):** Enables users to tailor protocols to their goals and monitor their progress.
*   **Community Engagement (Premium):** Offers a platform for shared learning and insights among dedicated users.

**7. Monetization Strategy**

The app utilizes a **Freemium model**. Core functionality and limited content are available for free to ensure basic accessibility. Full access to all features, comprehensive content, advanced personalization, tracking, and community functions requires a **Premium Subscription** (offered on a monthly or annual basis). This model supports ongoing development, content updates, and app maintenance while providing significant value to dedicated users. Intrusive advertising or selling user data are explicitly avoided to maintain user trust and align with the app's wellness focus.

**8. Potential Future Features/Ideas (Based on Initial Notes)**

*   Incorporating relevant content and insights from experts associated with Andrew Huberman ("Band of Brothers and Sistas").
*   Continued distillation and addition of practices from related talks, interviews, and research papers.

**9. Technical Considerations (Based on Initial Notes)**

*   **Platform:** Primarily envisioned as a mobile application for iOS and Android platforms ("downloadable").

**10. User Considerations/Concerns Mentioned (Based on Initial Notes)**

*   **Habit Formation:** Awareness that over-reliance on reminders could potentially hinder conscious habit internalization (though the app aims to support, not replace, conscious effort).
*   **Accessibility:** The Freemium model aims to address financial accessibility concerns by providing core value for free, while the subscription funds the full, advanced feature set.
</file>

<file path="app_documentation/architecture_pan.md">
---

**Final Architectural Plan (v3): Optimize Guide: Huberman Companion App (with Detailed Monetization Features)**

**1. Executive Summary of Architectural Proposal**

This document outlines the finalized technical architecture for the "Optimize Guide: Huberman Companion" mobile application, designed to support a **Freemium model with tiered Subscriptions (Monthly/Annual)**. The architecture facilitates distinct **Free** (limited foundational protocols/summaries, basic notes) and **Premium** (comprehensive library, customizable reminders, detailed content, advanced notes/community, tracking, offline access) feature sets. It employs a **Modular Monolith** backend (**Laravel/PHP**), **PostgreSQL 17** database, **Redis** cache/queues, and a **React Native** frontend. Communication uses a **RESTful API**. Deployment leverages managed **Laravel hosting (Forge/Vapor)**, with **Docker** for local development. Key architectural components include robust user subscription management, secure feature gating via API middleware, and integration with mobile In-App Purchase (IAP) systems.

**2. Analysis of App Requirements & Architectural Drivers**

*(Requirements updated to reflect specific tiered features)*

- **Content Delivery & Management:** Efficient storage, management, and delivery of structured content. **Access control based on subscription tier is critical:**
    - *Free:* Limited protocol summaries/explanations.
    - *Premium:* Full library access (all protocols, detailed explanations, implementation guides, research links, key takeaways).
- **User Interaction & Data:** User authentication, creation of notes, potential public sharing. **Tiered feature access:**
    - *Free:* Basic notes linked to free content only.
    - *Premium:* Unlimited notes across all content, advanced organization, public notes/discussion features.
- **Actionable Guidance & Reminders:** Reliable push notification system. **Tiered functionality:**
    - *Free:* Pre-set, non-customizable reminders for a limited protocol set.
    - *Premium:* Comprehensive, customizable reminders (timing, frequency, grouping) for all protocols, potential location awareness.
- **Tracking & Personalization (Premium):** Tools for tracking adherence, progress visualization, and creating personalized protocol stacks.
- **Offline Access (Premium):** Ability to download content and notes.
- **Cross-Platform Mobile:** Target iOS and Android using React Native.
- **Scalability:** Potential for significant user growth requires scalable reads, writes, notifications, and **efficient subscription/entitlement checks**.
- **Maintainability & Evolvability:** Modular design to accommodate future content, features, and subscription changes.
- **Development Efficiency:** Leverage Laravel/React Native.
- **User Experience:** Responsive interface, clear distinction between free/premium, seamless upgrade process, **ad-free experience (Premium)**.
- **Monetization:** Implement the defined Freemium model with secure payment processing and access control.

*Non-Functional Drivers:* Performance, Security (incl. Payment Security), Reliability, Cost-Effectiveness, User Trust & Transparency.

**3. Proposed Architecture Pattern(s)**

- **Recommendation:** **Modular Monolith** for the backend.
- **Justification:** Remains suitable. Facilitates integrating subscription logic and **feature gating** within relevant modules (e.g., `Users`, `Billing`, domain-specific feature modules) while maintaining structure.

**4. Technology Stack Recommendation**

*(Highlighting feature gating aspects)*

- **Frontend (Mobile):**
    - **Technology:** **React Native**
    - **Justification:** Cross-platform. Requires **IAP libraries** (`react-native-iap`). UI must **conditionally render features/content/prompts** based on user subscription status received from the backend.
- **Backend:**
    - **Technology:** **Laravel (PHP 8.x+)**
    - **Justification:** Rapid development. Needs integration with **payment gateways (Stripe/Paddle via SDKs, potentially Laravel Cashier)** and **server-side IAP receipt validation**. **Crucially, must implement robust feature gating mechanisms (e.g., Policies, Middleware, dedicated service classes) to enforce access based on user's active subscription plan.**
- **Database:**
    - **Technology:** **PostgreSQL 17**
    - **Justification:** Robust storage. Schema includes `users`, `plans`, `subscriptions` tables to track user entitlements.
- **Cache / Queues:**
    - **Technology:** **Redis**
    - **Justification:** Caching (API responses, **user entitlement flags**), efficient queue driver (notifications, post-payment processing).
- **APIs & Communication:**
    - **Technology:** **RESTful API over HTTPS**
    - **Justification:** Standard communication. API endpoints serving premium features/data **must be protected by middleware** verifying active premium subscription status. Endpoints needed for fetching subscription offers, managing subscriptions (via provider portals or limited API), and **receiving payment webhooks**.
- **Payment Processing:**
    - **Recommendation:** **Stripe** or **Paddle**
    - **Justification:** Handle subscription logic, compliance, SDKs, IAP integration.

**5. Data Model Considerations**

- **Core Entities:** `User`, `Episode`, `Protocol`, `Summary`, `Note`, `Plan`, `Subscription`, `ContentSource`. (Schema details provided previously).
- **Feature Gating Logic:** Access checks will typically query the `subscriptions` table (joined with `users` and potentially `plans`) to verify if a user has an `active` subscription linked to a premium `Plan`. This logic resides primarily in the backend (API middleware/policies).
- **Challenges:** Keeping local subscription status synced accurately; handling complex subscription states; efficiently querying entitlements for API requests.

**6. Scalability and Performance Strategy**

- **Horizontal Backend Scaling:** As before (Forge/Vapor). Optimize subscription checks (e.g., cache user's plan ID and status in Redis for TTL).
- **Database Scaling:** As before.
- **Caching:** Aggressively cache user permission/subscription status; cache `Plan` details; cache non-personalized content.
- **Asynchronous Processing:** Use **Laravel Queues** for notifications, payment webhook processing, entitlement updates, subscription lifecycle emails.
- **CDN:** As before.

**7. Security Considerations**

- **Authentication:** As before (Sanctum/Passport).
- **Authorization:** **Critical.** Implement robust authorization (Laravel Middleware/Policies) verifying subscription status *before* granting access to premium API endpoints, features (e.g., creating > X notes, accessing detailed summaries), or data. Prevent client-side bypasses.
- **Payment Security:** As before (Rely on providers, secure keys, server-side IAP validation, webhook security).
- **Data Privacy:** As before.
- **Input Validation:** As before.
- **API Security:** As before.
- **Dependency Management:** As before.

**8. Deployment Strategy & Infrastructure**

- **Cloud Provider / Deployment Management / DB / Cache:** As before (Forge/Vapor, Managed PostgreSQL/Redis).
- **Local Development:** Docker setup remains the same.
- **CI/CD:** As before. **Include tests specifically verifying feature gating logic for different user subscription states.**
- **Webhooks:** As before (secure endpoints needed).
- **Storage:** As before (S3/GCS, especially for potential offline content downloads in premium).

**9. Potential Challenges & Trade-offs**

*(Refined based on feature detail)*

- **Complexity of Subscription Logic & Syncing:** Remains the primary complexity driver.
- **Robust Feature Gating Implementation:** Ensuring access control is correctly and consistently applied across all relevant features/endpoints requires careful implementation and testing. Mistakes here directly impact revenue and user trust.
- **IAP Integration:** Remains complex due to platform specifics.
- **Content Pipeline:** Remains an operational challenge.
- **Monolith Rigidity:** Risk still exists if modularity isn't maintained.
- **Cross-Platform Nuances (React Native):** As before.
- **Notification Reliability:** As before.
- **User Experience:** **Maintaining a compelling free tier while clearly showcasing premium value without being intrusive is a key design challenge.** Smooth upgrade flow is vital.

**10. Recommendations for Next Steps**

1. **Refine Feature Scope (Free vs. Premium):** *Considered complete based on provided input.*
2. **Detailed Domain Modeling:** *Schema provided previously.* Create migrations.
3. **API Contract Definition:** Define all endpoints, clearly marking which require premium access and how status is checked/returned.
4. **Setup Local Docker Environment:** As before.
5. **Choose & Configure Hosting/Payment:** As before. Set up plans matching the Free/Premium tiers in Stripe/Paddle and App Stores.
6. **Implement Core Backend Logic:** Build Auth, basic CRUD, **subscription management (Cashier recommended)**, and **implement core feature gating middleware/policies based on the defined tiers.**
7. **Frontend PoC (React Native):** Build core UI, **integrate IAP**, **implement conditional rendering based on subscription status**, basic purchase flow.
8. **Implement Webhook Handling:** As before.
9. **Content Strategy Definition:** As before.
10. **Establish CI/CD Pipeline:** Include **feature gating tests**.

---

This version provides a comprehensive architectural blueprint that directly addresses the specified Freemium model and its distinct feature tiers, ensuring the technical plan aligns with the business and product requirements.
</file>

<file path="app_documentation/backend_implementation_todo.md">
# Huberman App: Backend Implementation TODO Checklist (TDD Approach)

**Project Goal:** Implement the Laravel backend for the Huberman App, supporting a Freemium model, content delivery, user interactions, reminders, tracking, and subscription management, ready for production deployment.

**Development Approach:** Test-Driven Development (TDD) will be used. For each functional component, write tests *first* to define expected behavior, then implement the code to make the tests pass, and finally refactor.
**COMMAND EXECUTION** Every command should be executed with 'docker-compose exec app' prefix.

**Legend:**
*   `[ ]` - To Do
*   `[x]` - Done
*   `(TDD)` - Indicates steps where writing tests *before* implementation is paramount.

---

## Phase 1: Project Setup & Foundation (Milestone 1 & 2 Prep)

*   **Environment & Tooling:**
    *   `[x]` Initialize Git repository.
    *   `[x]` Install Laravel (`11.x`) using Composer (`composer create-project laravel/laravel huberman-app-backend`).
    *   `[x]` Configure basic `.env` file for local development (App Name, Key, Debug, Log level, DB connection defaults).
    *   `[x]` Create/Finalize Docker environment (`docker-compose.yml`) based on `infrastructure_devops_details.md` with services:
        *   `[x]` PHP (`8.2+`) container + Dockerfile.
        *   `[x]` Web Server (Nginx or Caddy) container + config.
        *   `[x]` PostgreSQL (`17.x` or latest supported) container.
        *   `[x]` Redis (`7.x`) container.
        *   `[ ]` Node.js (LTS) container (optional, for build tools).
    *   `[x]` Verify local Docker environment is running (`docker-compose up -d`) and accessible.
    *   `[x]` Configure PHPUnit (`phpunit.xml`) for testing environment (e.g., separate test PG database connection in `.env.testing`).
    *   `[x]` Establish coding standards (PSR-12 enforced, setup `laravel/pint`).
    *   `[x]` Install & Configure SAST tools:
        *   `[x]` Install `phpstan/phpstan`, `larastan/larastan`. Configure `phpstan.neon`.
        *   `[x]` (Optional) Install `vimeo/psalm`. Configure `psalm.xml`.
    *   `[x]` Run initial SAST checks to ensure baseline setup.

*   **Core Structure & Base Components:**
*   `[x]` Define base module structure: Create `app/Modules/` directory and subdirectories (`Authentication`, `UserManagement`, `SubscriptionBilling`, `ContentManagement`, `ProtocolEngine`, `NotesService`, `CoreApi` - adjust as needed).
    *   `[x]` Create base API test case (`tests/Feature/ApiTestCase.php`) setting common headers (Accept: application/json).
    *   `[x]` Implement base API controller (`app/Modules/CoreApi/Http/Controllers/Api/BaseApiController.php`) with common methods/traits if needed.
    *   `[x]` Implement standard API response structure/trait (e.g., `ApiResponseHelpers`) if deviating from simple resource responses.
    *   `[x]` Configure API routing (`routes/api.php`): Set up version prefix (`/v1`) and include route files from modules.

---

## Phase 2: Core User & Authentication (Milestone 2 - TDD Focus)

*   **User Model & Migration:**
    *   `[x]` (TDD) Write tests for `User` model creation, relationships (initially Subscription, Notes, Reminders, Tracking), attributes, fillable, hidden (`password`, `remember_token`), casts (`email_verified_at`), `$with` relations.
    *   `[x]` Implement `create_users_table` migration based on `database_migrations_plan.md`. Ensure soft deletes, timestamps.
    *   `[x]` Run migration (`php artisan migrate`).
    *   `[x]` Implement `User` model (`app/Modules/UserManagement/Models/User.php`) extending Authenticatable.
    *   `[x]` Ensure User model tests pass.

*   **Authentication (Sanctum):**
    *   `[x]` Install Laravel Sanctum (`composer require laravel/sanctum`). Publish migrations & config.
    *   `[x]` Run Sanctum migrations (`php artisan migrate`).
    *   `[x]` Add `HasApiTokens` trait to `User` model.
    *   `[x]` Configure Sanctum (token expiry, domains) in `config/sanctum.php` and `.env`.

*   **Registration:**
    *   `[x]` (TDD) Write API tests for `POST /api/v1/register`: Validation rules, success (DB check, 201, user+token response), email uniqueness.
    *   `[x]` Implement `RegisterRequest` Form Request (`app/Modules/Authentication/Http/Requests/`).
    *   `[x]` Implement `AuthController::register` method (`app/Modules/Authentication/Http/Controllers/`).
    *   `[x]` Define route in module's API routes file. Ensure tests pass.

*   **Login:**
    *   `[x]` (TDD) Write API tests for `POST /api/v1/login`: Validation rules, success (correct credentials -> 200, user+token), failure (incorrect credentials -> 401/422).
    *   `[x]` Implement `LoginRequest` Form Request.
    *   `[x]` Implement `AuthController::login` method.
    *   `[x]` Define route. Ensure tests pass.

*   **Logout:**
    *   `[x]` (TDD) Write API tests for `POST /api/v1/logout` (authenticated): Successful logout (token invalid, 204), unauthenticated access (401).
    *   `[x]` Implement `AuthController::logout` method (invalidate current token).
    *   `[x]` Define route, protected by `auth:sanctum`. Ensure tests pass.

*   **Authenticated User Endpoint:**
    *   `[x]` (TDD) Write API tests for `GET /api/v1/user/profile` (authenticated): Fetches user data, unauthenticated access (401).
    *   `[x]` Implement `UserController::profile` (`app/Modules/UserManagement/Http/Controllers/`).
    *   `[x]` Define route, protected by `auth:sanctum`. Ensure tests pass.

*   **Password Reset:**
    *   `[x]` Configure Mail driver for local testing (e.g., Mailtrap, Log driver in `.env`).
    *   `[x]` (TDD) Test Forgot Password (`POST /api/v1/forgot-password`): Validation (email exists), success response, mock `Notification::send`.
    *   `[x]` (TDD) Test Reset Password (`POST /api/v1/reset-password`): Validation (token, email, password, confirmation), successful reset, token consumed/invalidated.
    *   `[x]` Implement necessary Controllers (`ForgotPasswordController`, `NewPasswordController`), Requests, Notifications (`ResetPasswordNotification`).
    *   `[ ]` Define password reset routes. Ensure tests pass.

*   **Security Controls:**
    *   `[x]` (TDD) Write tests for rate limiting on auth endpoints (`login`, `register`, `forgot-password`).
    *   `[x]` Apply Laravel's default rate limiting middleware to auth routes in `RouteServiceProvider` or route definitions. Configure limits (e.g., in `.env`). Ensure tests pass.

---

## Phase 3: Subscription & Billing Foundation (Milestone 4 Prep - TDD Focus)

*   **Models & Migrations:**
    *   `[x]` Implement `create_plans_table` migration. Run migration.
    *   `[x]` Implement `create_subscriptions_table` migration (FKs, indexes, onDelete). Run migration.
    *   `[x]` (TDD) Test `Plan` model (attributes, factory, maybe `isActive` scope). Implement model (`app/Modules/SubscriptionBilling/Models/Plan.php`).
    *   `[x]` (TDD) Test `Subscription` model (attributes, relationships `User`/`Plan`, casts, scopes like `active()`, `trialing()`). Implement model (`app/Modules/SubscriptionBilling/Models/Subscription.php`).
    *   `[x]` Add `hasMany(Subscription::class)` relationship to `User` model.

*   **Cashier Integration (Stripe):**
    *   `[x]` Install Laravel Cashier Stripe (`composer require laravel/cashier`). Publish migrations & config.
    *   `[x]` Run Cashier migrations (`php artisan migrate`).
    *   `[x]` Configure Cashier (`config/cashier.php`, `services.stripe.key/secret/webhook_secret` in `.env`). Set User model.
    *   `[x]` Add `Billable` trait to `User` model.

*   **Core Service & API Stubs:**
    *   `[x]` Define `SubscriptionServiceInterface` contract (`app/Modules/SubscriptionBilling/Contracts/`) with key methods (`userHasActivePremiumSubscription`, `getUserPlan`, `handleWebhook`, `getSubscriptionStatus`, etc.).
    *   `[x]` Implement basic `SubscriptionService` class (`app/Modules/SubscriptionBilling/Services/`) implementing the interface (methods return defaults/throw `NotImplementedException`).
    *   `[x]` Bind interface to implementation in a service provider (`SubscriptionBillingServiceProvider`).
    *   `[ ]` **Plans API:**
        *   `[x]` Seed `Plans` table (Free, Premium Monthly, Premium Annual) using a `PlanSeeder`.
        *   `[x]` (TDD) API Test `GET /api/v1/plans`: Assert returns seeded plans (200 OK).
        *   `[x]` Implement `SubscriptionController::plans` endpoint to fetch and return `Plan` data. Use an API Resource (`PlanResource`). Define route.
    *   `[ ]` **User Subscription API:**
        *   `[x]` (TDD) API Test `GET /api/v1/user/subscription` (authenticated): Assert returns null/empty initially (200 OK).
        *   `[x]` Implement `SubscriptionController::userSubscription` using `SubscriptionService` stub. Use an API Resource (`SubscriptionResource`). Define route protected by `auth:sanctum`.

*   **Webhook Foundation (Stripe):**
    *   `[x]` Implement `VerifyStripeWebhookSignature` middleware (or use Cashier's built-in route protection).
    *   `[x]` (TDD) Write test for signature verification middleware/logic (mock Stripe request/header/secret). Assert pass/fail scenarios.
    *   `[x]` Implement `WebhookController` (`app/Modules/SubscriptionBilling/Http/Controllers/`) with `handleStripeWebhook` method.
    *   `[x]` Define `POST /api/webhooks/stripe` route (ensure CSRF protection is disabled for this route). Apply signature verification middleware.
    *   `[x]` Ensure verification tests pass.

---

## Phase 4: Basic Content Management (Milestone 3 & 5 Prep)

*   **Models & Migrations:**
    *   `[x]` Implement `create_episodes_table` migration. Run migration.
    *   `[x]` Implement `create_protocols_table` migration. Run migration.
    *   `[x]` Implement `create_summaries_table` migration. Run migration.
    *   `[x]` Implement `create_episode_protocol_table` (pivot) migration. Run migration.
    *   `[x]` (TDD) Test `Episode` model (attributes, relationships `Protocols`/`Summaries`/`Notes`). Implement model (`app/Modules/ContentManagement/Models/Episode.php`).
    *   `[x]` (TDD) Test `Protocol` model (attributes, relationships `Episodes`). Implement model (`app/Modules/ContentManagement/Models/Protocol.php`).
    *   `[x]` (TDD) Test `Summary` model (attributes, relationship `Episode`). Implement model (`app/Modules/ContentManagement/Models/Summary.php`).
    *   `[x]` Test `Episode<->Protocol` many-to-many relationship.

*   **Seeding:**
    *   `[x]` Create `EpisodeSeeder` (placeholder episodes).
    *   `[x]` Create `ProtocolSeeder` (foundational protocols based on `content_strategy_management.md`).
    *   `[x]` Create `SummarySeeder` (summaries for foundational protocols).
    *   `[x]` Create `EpisodeProtocolSeeder` (link placeholders).
    *   `[x]` Update `DatabaseSeeder` to call new seeders in correct order.
    *   `[ ]` Run seeders (`php artisan db:seed`).

*   **Core Service & API:**
    *   `[x]` Define `ContentServiceInterface` contract (`app/Modules/ContentManagement/Contracts/`) (e.g., `getProtocols`, `getProtocolDetails`, `getEpisodes`, `getEpisodeDetails`, `getSummariesForEpisode`).
    *   `[x]` Implement basic `ContentService` implementing the interface. Bind interface.
    *   `[x]` Implement API Resources (`EpisodeResource`, `ProtocolResource`, `SummaryResource`).
    *   `[x]` **Protocols API:**
        *   `[x]` (TDD) API Test `GET /api/v1/protocols`: List protocols (unauthenticated).
        *   `[x]` Implement `ProtocolController::index`. Define route.
        *   `[x]` (TDD) API Test `GET /api/v1/protocols/{id}`: Show protocol details (unauthenticated).
        *   `[x]` Implement `ProtocolController::show`. Define route.
    *   `[x]` **Episodes API:**
        *   `[x]` (TDD) API Test `GET /api/v1/episodes`: List episodes.
        *   `[x]` Implement `EpisodeController::index`. Define route.
        *   `[x]` (TDD) API Test `GET /api/v1/episodes/{id}`: Show episode details.
        *   `[x]` Implement `EpisodeController::show`. Define route.
    *   `[x]` *(Add similar for Summaries if needed as top-level endpoint)*
    *   `[x]` Ensure basic content API tests pass.

---

## Phase 5: Feature Gating Implementation (Milestone 4 & 5 - TDD Focus)

*   **Subscription Service Logic:**
    *   `[x]` (TDD - Unit) Test `SubscriptionService::userHasActivePremiumSubscription` covering scenarios: no sub, free plan, active premium, trialing premium, canceled (before/after `ends_at`), expired, past_due. Use factories.
    *   `[x]` Implement logic in `SubscriptionService` querying `subscriptions` table (via User relationship), joining `plans`, checking status (`active`, `trialing`), `ends_at`. Ensure 'premium' plan type check.
    *   `[x]` (TDD - Unit) Test caching: cache hit avoids DB query, miss populates cache, TTL works, cache clear invalidates.
    *   `[x]` Implement caching layer within `userHasActivePremiumSubscription` (e.g., `Cache::remember`). Use appropriate cache tags (e.g., `user:{id}`).

*   **Middleware:**
    *   `[x]` Implement `CheckPremiumAccess` middleware using `SubscriptionServiceInterface`. # Assuming done as file exists
    *   `[x]` (TDD - Feature) Write feature tests applying middleware to a test route: premium user passes (200), free user fails (403), unauthenticated fails (401 - handled by `auth:sanctum`).
    *   `[x]` Register middleware alias in `app/Http/Kernel.php`. (Updated in bootstrap/app.php for L11)
    *   `[ ]` Apply middleware to relevant premium API route groups (e.g., start with `/reminders`, `/tracking`). Ensure tests pass. (Pending creation of relevant routes)

*   **Gated Content API:**
    *   `[x]` Refine `ProtocolResource` to conditionally include `implementation_guide` based on `$request->user()->hasActivePremiumSubscription()` (or similar check).
    *   `[x]` (TDD - Feature) Test `GET /api/v1/protocols/{id}`: Authenticated free user gets protocol *without* `implementation_guide`. Authenticated premium user gets protocol *with* `implementation_guide`.
    *   `[x]` Refactor `ProtocolController` or `ContentService` if needed to support different data loading based on user status (API Resource often sufficient). Ensure tests pass.

---

## Phase 6: Full Subscription Lifecycle via Webhooks (Milestone 4 - TDD Focus)

*   **Webhook Processing Logic (Stripe via Cashier):**
        *   **Event: `checkout.session.completed`**
        *   `[x]` (TDD) Test: Simulates webhook, asserts `Subscription` created (`trialing`/`active`), `ends_at`/`trial_ends_at` set, `SubscriptionStarted` event dispatched, `User.stripe_id` updated.
        *   `[x]` Verify/Implement Cashier listener logic.
    *   **Event: `customer.subscription.updated` (Trial Ends -> Active - via `invoice.payment_succeeded`)**
        *   `[x]` (TDD) Test: Simulates `invoice.payment_succeeded` post-trial, asserts status -> `active`, `trial_ends_at` nullified, `ends_at` updated.
        *   `[x]` Verify Cashier listener.
    *   **Event: `invoice.payment_succeeded` (Renewal)**
        *   `[x]` (TDD) Test: Simulates webhook, asserts `Subscription.ends_at` updated, `SubscriptionRenewed` event dispatched.
        *   `[x]` Verify Cashier listener.
    *   **Event: `invoice.payment_failed`**
        *   `[x]` (TDD) Test: Simulates webhook, asserts `Subscription.status` -> `past_due` (if configured), `PaymentFailed` event dispatched.
        *   `[x]` Verify/Implement Cashier listener based on retry settings.
    *   **Event: `customer.subscription.updated` (Cancel at Period End)**
        *   `[x]` (TDD) Test: Simulates webhook (`cancel_at_period_end=true`), asserts `Subscription.status` updated (`canceled`?), `ends_at` reflects cancel date, `SubscriptionCanceled` event dispatched.
        *   `[x]` Verify Cashier listener (`onSubscriptionUpdated`).
    *   **Event: `customer.subscription.deleted` (Immediate Cancel / Final Failure)**
        *   `[x]` (TDD) Test: Simulates webhook, asserts status -> `canceled`/`expired`, `ends_at` set to past/now, `SubscriptionExpired`/`SubscriptionCanceled` event dispatched.
        *   `[x]` Verify Cashier listener.

*   **Webhook Processing Logic (Apple IAP - Server Notifications V2):**
    *   `[x]` Implement `WebhookController::handleAppleWebhook`.
    *   `[x]` Implement service/logic to decode & verify Apple JWS payload (use library if available).
    *   `[x]` Define `POST /api/webhooks/apple` route (disable CSRF).
    *   `[x]` Implement App Store Server API client (library?) for server-side validation (optional).
    *   `[x]` **Event: `SUBSCRIBED` / `DID_RENEW`:** Implement handler, (TDD) Test state -> `active`/`trialing`, update DB, dispatch events.
    *   `[x]` **Event: `DID_FAIL_TO_RENEW`:** Implement handler, (TDD) Test state -> `past_due`/`expired`, update DB, dispatch events.
    *   `[ ]` **Event: `EXPIRED`:** Implement handler, (TDD) Test state -> `expired`, update DB, dispatch event.
    *   `[ ]` *(Implement/Test other handlers: `GRACE_PERIOD_EXPIRED`, `REVOKED`)* TO CHECK

*   **Webhook Processing Logic (Google Play Billing - RTDN via Pub/Sub):**
    *   `[ ]` Set up Google Cloud Pub/Sub topic & push subscription.
    *   `[x]` Implement `WebhookController::handleGoogleWebhook` (Mock).
    *   `[x]` Implement service/logic to decode base64 Pub/Sub data.
    *   `[x]` (TDD) Test Pub/Sub message decoding & parsing.
    *   `[x]` Define `POST /api/webhooks/google` route (disable CSRF).
    *   `[x]` Implement Google Play Developer API client (library?) for purchase validation/acknowledgement (Mock).
    *   `[x]` **Type: `SUBSCRIPTION_PURCHASED` / `SUBSCRIPTION_RENEWED`:** Implement handler, (TDD) Test state -> `active`/`trialing`, update DB, dispatch events, acknowledge purchase (Mock).
    *   `[x]` **Type: `SUBSCRIPTION_IN_GRACE_PERIOD`:** Implement handler, (TDD) Test state -> `past_due`, update DB, dispatch event (Mock).
    *   `[x]` **Type: `SUBSCRIPTION_ON_HOLD`:** Implement handler, (TDD) Test state -> `past_due`/`on_hold`, update DB (Mock).
    *   `[x]` **Type: `SUBSCRIPTION_CANCELED`:** Implement handler, (TDD) Test state -> `canceled`, update DB, dispatch event (Mock).
    *   `[x]` **Type: `SUBSCRIPTION_EXPIRED`:** Implement handler, handler, (TDD) Test state -> `expired`, update DB, dispatch event (Mock).
    *   `[ ]` *(Implement/Test other handlers: `REVOKED`, `PAUSED`)* (Mock)

*   **Scheduled Job for Status Check:**
    *   `[ ]` Implement `CheckExpiredSubscriptions` job/command.
    *   `[ ]` (TDD) Test job finds past `canceled` subs and sets status to `expired`.
    *   `[x]` Schedule job in `Kernel.php` (e.g., `daily()`).

*   **Cache Invalidation:**
    *   `[x]` Create `ClearUserEntitlementCache` Listener.
    *   `[x]` Implement cache clearing logic (`Cache::tags("user:{$event->subscription->user_id}")->flush();` or similar).
    *   `[x]` (TDD) Test Listener clears the correct cache tag/key.
    *   `[x]` Register Listener for `SubscriptionStarted`, `SubscriptionRenewed`, `SubscriptionCanceled`, `SubscriptionExpired` events in `EventServiceProvider`.
    *   `[x]` (TDD) Verify webhook tests dispatch events correctly using `Event::fake()`.

---

## Phase 7: Implementing MVP Features (Milestone 5 & 6 Prep)

*   **Free Tier - Basic Reminders:**
    *   `[x]` Implement logic/scope in `Protocol` model to identify foundational protocols.
    *   `[x]` Implement `SendFoundationalReminders` command/job.
    *   `[x]` (TDD) Test command selects correct protocols & users (mock Notification).
    *   `[x]` Schedule command in `Kernel.php`.

*   **Premium Tier - Full Content Access:**
    *   `[x]` (TDD - Feature) Ensure `ProtocolResource` tests cover conditional loading of `implementation_guide`.
    *   `[x]` (TDD - Feature) Ensure `GET /protocols` tests cover premium user getting full list / rich data via Resource.

*   **Premium Tier - Custom Reminders (MVP Scope):**
    *   **Database:**
        *   `[x]` Implement `create_user_reminders_table` migration. Run migration.
        *   `[x]` (TDD) Test `UserReminder` model attributes & relationships.
        *   `[x]` Implement `UserReminder` model (`app/Modules/ProtocolEngine/Models/`).
    *   **API CRUD:**
        *   `[x]` Implement `ReminderPolicy`.
        *   `[x]` (TDD) Test `ReminderPolicy` (premium check, ownership).
        *   `[x]` **Create:** (TDD) API Test, `[x]` Implement `StoreReminderRequest`, `ReminderController::store`, `ReminderService::setReminder`, Define Route + Middleware/Policy.
        *   `[x]` **List:** (TDD) API Test, Implement `ReminderController::index`, `ReminderService::getUserReminders`, Define Route + Middleware.
        *   `[x]` **Update:** (TDD) API Test, Implement `UpdateReminderRequest`, `ReminderController::update`, `ReminderService::updateReminder`, Define Route + Middleware/Policy.
        *   `[x]` **Delete:** (TDD) API Test, Implement `ReminderController::destroy`, `ReminderService::deleteReminder`, Define Route + Middleware/Policy.
    *   **Scheduling Logic:**
        *   `[x]` Implement `reminders:send-due` command logic (query, timezone conversion, frequency check).
        *   `[x]` (TDD) Test `reminders:send-due` command finds due reminders (mock `now()`).
        *   `[x]` Ensure command dispatches `SendProtocolReminderNotification` job.
        *   `[x]` Schedule command in `Kernel.php` (`everyMinute()`).
    *   **Notification Sending:**
        *   `[x]` Implement `SendProtocolReminderNotification` Job.
        *   `[x]` Implement `ProtocolReminder` Notification class (`toFcm`, `toApns`).
        *   `[x]` (TDD) Test Job retrieves data, fetches token, constructs payload, mocks `Notification::send()`.
        *   `[x]` Implement token fetching logic in Job.
        *   `[x]` Implement `Notification::send()` call in Job.
        *   `[x]` Implement `last_sent_at` update in Job.
    *   **Device Token Management:**
    *   `[x]` Add `device_tokens` column to `users` table OR create `user_devices` table migration. Run migration.
    *   `[ ]` (TDD) Test storing/retrieving tokens for a user.
    *   `[x]` Implement `UpdateDeviceTokenRequest`.
    *   `[x]` Implement `UserController::updateDeviceToken`.
    *   `[x]` Define `POST /api/v1/user/device-token` route + `auth:sanctum`.

---

## Phase 8: Implementing Post-MVP Features (As Prioritized - TDD Focus)

*   **Notes Service (Example):**
    *   `[x]` **Models & Migrations:** Implement `create_notes_table`, (TDD) Test `Note` Model, Implement Model.
    *   `[x]` **Policies & Auth:** Implement `NotePolicy`, (TDD) Test Policy (free limits, public premium, ownership).
    *   `[x]` **Service Layer:** Define Interface, Implement `NoteService`, Bind Interface, (TDD - Unit) Test Service methods (CRUD, counts, public list).
    *   `[x]` **API Endpoints:** Without running migrations and test executions
        *   `[x]` **Create:** (TDD) API Test, `[x]` Implement Request, `[x]` Implement Controller, `[x]` Define Route.
        *   `[x]` **List User:** (TDD) API Test, Implement Controller, Define Route.
        *   `[x]` **Show:** (TDD) API Test, Implement Controller, Define Route.
    *   `[x]` **Update:** (TDD) API Test, Implement Request, Controller, Define Route.
    *   `[x]` **Delete:** (TDD) API Test, Implement Controller, Define Route.
    *   `[x]` **List Public:** (TDD) API Test, Implement Controller, Define Route.

- [x] **Tracking Service (Placeholder - Apply same pattern):**
    -   `[x]` **Models & Migrations:** (TDD) Test `TrackingLog` Model, Implement Model.
    -   `[x]` **Policies & Auth:** Implement Policy (Premium check), (TDD) Test Policy.
    -   `[x]` **Service Layer:** Define Interface, Implement Service (streak logic), Bind, (TDD - Unit) Test Service methods (CRUD, counts, public list).
    -   `[x]` **API Endpoints:**
        *   `[x]` **Log Adherence:** (TDD) API Test, Implement Request, Controller, Define Route.
        *   `[x]` **Get Summary/Streak:** (TDD) API Test, Implement Controller, Define Route.
    -   Migration file created: database/migrations/2025_05_01_100004_create_user_protocol_tracking_table.php

-   **Offline Access:**
    -   `[x]` **Models & Migrations:** (TDD) Test `OfflineData` Model, Implement Model.
    -   `[x]` **Policies & Auth:** Implement Policy (User access), (TDD) Test Policy.
    -   `[x]` **Service Layer:** Define Interface, Implement Service (sync logic), Bind, (TDD - Unit) Test Service methods (CRUD, sync).
    -   `[x]` **API Endpoints:**
        -   `[x]` **Fetch Data:** (TDD) API Test, Implement Request, Controller, Define Route.
        -   `[x]` **Sync Data:** (TDD) API Test, Implement Request, Controller, Define Route.

-   **Advanced Notes Org:**
    -   `[x]` **Models & Migrations:** (TDD) Test `NoteTag` Model, Implement Model.
    -   `[x]` **Models & Migrations:** (TDD) Test `NoteCategory` Model, Implement Model.
    -   `[x]` **Policies & Auth:** Implement Policy (User access), (TDD) Test Policy.
    -   `[x]` **Service Layer:** Define Interface, Implement Service (categorization, tagging logic), Bind, (TDD - Unit) Test Service methods.
    -   `[x]` **API Endpoints:**
        *   `[x]` **Categorize Note:** (TDD) API Test, Implement Request, Controller, Define Route.
        *   `[x]` **Tag Note:** (TDD) API Test, Implement Request, Controller, Define Route.
        *   `[x]` **Get Notes by Category/Tag:** (TDD) API Test, Implement Request, Controller, Define Route.

-   **Community:**
    -   `[x]` **Models & Migrations:** (TDD) Test `Post`, `Comment` Models, Implement Models.
    -   `[x]` **Policies & Auth:** Implement Policy (User access, moderation), (TDD) Test Policy.
    -   `[x]` **Service Layer:** Define Interface, Implement Service (posting, commenting, moderation logic), Bind, (TDD - Unit) Test Service methods.
    -   `[x]` **API Endpoints:**
        *   `[x]` **Create Post:** (TDD) API Test, Implement Request, Controller, Define Route.
        *   `[x]` **Create Comment:** (TDD) API Test, Implement Request, Controller, Define Route.
        *   `[x]` **Get Posts/Comments:** (TDD) API Test, Implement Controller, Define Route.
        *   `[x]` **Moderate Content:** (TDD) API Test, Implement Controller, Define Route.

-   **Routines:**
    -   `[x]` **Models & Migrations:** (TDD) Test `Routine`, `RoutineStep` Models, Implement Models.
    -   `[x]` **Policies & Auth:** Implement Policy (User access), (TDD) Test Policy.
    *   `[x]` **Service Layer:** Define Interface, Implement Service (routine execution, scheduling logic), Bind, (TDD - Unit) Test Service methods.
    *   `[x]` **API Endpoints:**
        *   `[x]` **Create Routine:** (TDD) API Test, Implement Request, Controller, Define Route.
        *   `[x]` **Execute Routine:** (TDD) API Test, Implement Request, Controller, Define Route.
        *   `[x]` **Get Routines:** (TDD) API Test, Implement Controller, Define Route.


*   *(Repeat pattern for other Post-MVP features like Offline Access, Advanced Notes Org, Community, Routines)*

---

## Phase 9: API Documentation & Refinement

*   **Setup:**
    *   `[ ]` Install & Configure `zircote/swagger-php` OR choose manual editing tool.
*   **Annotation/Manual Update:**
    *   `[ ]` Review `openapi.yaml` structure.
    *   `[ ]` Annotate/Document: `Authentication` module endpoints & schemas.
    *   `[ ]` Annotate/Document: `UserManagement` module endpoints & schemas.
    *   `[ ]` Annotate/Document: `SubscriptionBilling` module endpoints & schemas (incl. webhooks).
    *   `[ ]` Annotate/Document: `ContentManagement` module endpoints & schemas (note premium diffs).
    *   `[ ]` Annotate/Document: `NotesService` module endpoints & schemas (note premium diffs).
    *   `[ ]` Annotate/Document: `ProtocolEngine` module endpoints & schemas (premium).
    *   `[ ]` Define/Review: Reusable schemas in `components/schemas`.
    *   `[ ]` Define/Review: Reusable error responses in `components/responses`.
    *   `[ ]` Define/Review: Security schemes (`bearerAuth`) and apply.
*   **Generation & Validation:**
    *   `[ ]` Generate `openapi.yaml`.
    *   `[ ]` Validate `openapi.yaml` using validator tool. Fix errors.
*   **Commit:**
    *   `[ ]` Commit final, validated `openapi.yaml` to repository.

---

## Phase 10: Testing & Quality Assurance

*   **Test Coverage Review:**
    *   `[ ]` Generate PHPUnit code coverage report.
    *   `[ ]` Analyze report, identify gaps in critical modules.
    *   `[ ]` Write additional unit/integration tests to improve coverage.
*   **Integration Flow Testing:**
    *   `[ ]` (TDD - Feature) Test Flow: Registration -> Login.
    *   `[ ]` (TDD - Feature) Test Flow: Free User Access (Check premium endpoint access denied).
    *   `[ ]` (TDD - Feature) Test Flow: Subscription Upgrade (Simulated webhook -> Premium access granted).
    *   `[ ]` (TDD - Feature) Test Flow: Reminder Setting & Receiving (Simulated: Create reminder -> Time passes -> Job runs -> Mock Notification sent).
*   **Manual QA:**
    *   `[ ]` Develop manual test cases/checklist (Free & Premium flows).
    *   `[ ]` Execute manual tests on Staging.
    *   `[ ]
</file>

<file path="app_documentation/component_breakdown.md">
**Huberman App: Backend Component Breakdown (Modular Monolith)**

**1. Introduction**

This document details the proposed modular structure for the Huberman App's Laravel backend, following the Modular Monolith pattern outlined in the architecture and implementation plan (`architecture_pan.md`, `detailed_plan.md`). The goal is to organize the codebase into distinct, domain-focused modules (represented as namespaces/folders within the `app/` directory) to improve maintainability, scalability, and clarity of responsibilities. While running as a single application, these logical boundaries help manage complexity as the application grows.

Each module will encapsulate its specific domain logic, including Models, Controllers (for API endpoints related to the module), Services, Events, Listeners, Policies, Requests, etc.

**2. Proposed Backend Modules**

The initial set of proposed modules, located under `app/Modules/`, are:

*   **`app/Modules/Authentication`**
    *   **Responsibilities:** Handles user registration, login (authentication), password reset functionality, API token issuance and potentially revocation (e.g., integrating Laravel Sanctum or Passport).
    *   **Key Components:**
        *   `Http/Controllers/AuthController.php` (Handles API login, register, logout, etc.)
        *   `Http/Controllers/PasswordResetController.php` (Handles password reset flow)
        *   `Http/Requests/LoginRequest.php`, `RegisterRequest.php`
        *   Potentially `Services/AuthService.php` for complex logic.
        *   Related Routes definition.
        *   Authentication-related Middleware (e.g., `EnsureTokenIsValid`).

*   **`app/Modules/UserManagement`**
    *   **Responsibilities:** Manages user data beyond authentication, such as profile information (name, potentially picture), user settings, and serves as the owner of the core `User` model. It collaborates with `SubscriptionBilling` to understand a user's access level.
    *   **Key Components:**
        *   `Models/User.php` (The core Eloquent User model)
        *   `Http/Controllers/UserController.php` (API for fetching/updating user profile)
        *   `Http/Requests/UpdateProfileRequest.php`
        *   `Services/UserService.php`
        *   `Policies/UserPolicy.php` (Authorization for profile actions)
        *   Database migrations for the `users` table.

*   **`app/Modules/SubscriptionBilling`**
    *   **Responsibilities:** Manages subscription plans (`Plan` model), tracks user subscriptions (`Subscription` model), integrates with payment providers (Stripe/Paddle via Cashier), handles incoming webhooks for payment events (success, failure, cancellation), and provides the core logic for checking a user's subscription status and entitlements (feature gating).
    *   **Key Components:**
        *   `Models/Plan.php`
        *   `Models/Subscription.php`
        *   `Http/Controllers/SubscriptionController.php` (API for fetching plans, potentially initiating checkout flows)
        *   `Http/Controllers/WebhookController.php` (Handles Stripe/Paddle/Apple/Google webhooks)
        *   `Services/BillingService.php` or `SubscriptionService.php` (Core logic for status checks, webhook processing)
        *   `Policies/SubscriptionPolicy.php` or Middleware (e.g., `CheckPremiumAccess`) - *Crucial for Feature Gating*.
        *   Listeners for Cashier events (if applicable).
        *   Database migrations for `plans`, `subscriptions` tables.

*   **`app/Modules/ContentManagement`**
    *   **Responsibilities:** Manages the core application content: Podcast Episodes, Protocols, Summaries, Key Takeaways. Includes logic for creating, retrieving, updating, and deleting this content (potentially via admin interfaces or seeders) and exposing it through the API, respecting access levels determined by `SubscriptionBilling`.
    *   **Key Components:**
        *   `Models/Episode.php`, `Protocol.php`, `Summary.php`
        *   `Http/Controllers/EpisodeController.php` (API for episodes)
        *   `Http/Controllers/ProtocolController.php` (API for protocols)
        *   `Http/Controllers/SummaryController.php` (API for summaries)
        *   `Services/ContentService.php` (May handle complex queries or formatting)
        *   Database migrations for `episodes`, `protocols`, `summaries`, `episode_protocol` tables.
        *   Potentially Resource Collections for API responses.

*   **`app/Modules/ProtocolEngine`**
    *   **Responsibilities:** Handles the *application* of protocols, primarily focusing on the reminder and tracking features (Premium). Includes logic for setting/managing user-defined reminders, scheduling notifications, and recording user adherence to protocols.
    *   **Key Components:**
        *   `Http/Controllers/ReminderController.php` (API for CRUD operations on user reminders - Premium)
        *   `Http/Controllers/TrackingController.php` (API for logging protocol adherence - Premium)
        *   `Services/ReminderService.php` (Logic for scheduling/managing reminders)
        *   `Services/TrackingService.php` (Logic for recording/calculating adherence, streaks)
        *   Potentially `Models/UserReminder.php`, `Models/ProtocolTrack.php`
        *   Related `Jobs` (e.g., `SendProtocolReminderNotification`) pushed to the queue.
        *   Console Commands (e.g., for queue workers, potentially scheduling checks).
        *   Policies/Middleware to ensure only Premium users can access these features.

*   **`app/Modules/NotesService`**
    *   **Responsibilities:** Manages user-created notes linked to episodes. Handles CRUD operations, public/private status, and potentially organization features (tags, search - likely Premium).
    *   **Key Components:**
        *   `Models/Note.php`
        *   `Http/Controllers/NoteController.php` (API for note CRUD)
        *   `Services/NoteService.php`
        *   `Policies/NotePolicy.php` (Ensures users can only manage their own notes, checks Premium status for advanced features like unlimited notes or public sharing).
        *   Database migrations for the `notes` table.

*   **`app/Modules/CommunityFeatures`** (If implemented early)
    *   **Responsibilities:** Focuses on features involving multiple users interacting, such as viewing public notes associated with episodes or potential discussion forums. Relies heavily on `NotesService` (for public notes) and `SubscriptionBilling` (access control).
    *   **Key Components:**
        *   `Http/Controllers/PublicContentController.php` (API for fetching public notes, etc.)
        *   Services related to fetching/aggregating community content.
        *   Policies/Middleware enforcing Premium access if applicable.

*   **`app/Modules/CoreApi`** (Potentially minimal or evolves to `SharedKernel`)
    *   **Responsibilities:** This module might be less domain-specific. Initially, it could house base API controllers, shared API traits (e.g., for standardized responses), common API middleware registration, or core exception handling for the API. Alternatively, these elements might be placed directly in `app/Http` or `app/Providers`, and this module could evolve into a `SharedKernel` for truly cross-cutting domain logic (e.g., shared interfaces, base service classes) not tied to a specific module *or* the HTTP layer. API controllers for specific domains (`User`, `Content`, `Note`, etc.) reside within their respective modules (`UserManagement`, `ContentManagement`, `NotesService`).
    *   **Key Components (Potential):**
        *   `Http/Controllers/Api/BaseApiController.php`
        *   `Traits/ApiResponseHelpers.php`
        *   Centralized API middleware registration logic (if not in `app/Http/Kernel.php`).

**3. Interactions**

Modules will interact primarily through:
*   **Service Classes:** Injecting services from one module into another (e.g., `NotePolicy` using `SubscriptionService` to check status).
*   **Events and Listeners:** Decoupled communication (e.g., `SubscriptionBilling` firing `SubscriptionActivated` event, listened to by `UserManagement` or `ProtocolEngine`).
*   **Eloquent Relationships:** Defined on Models (e.g., `User` hasMany `Subscription`).

**4. Conclusion**

This modular breakdown provides a structured approach to developing the Laravel backend. It aims to create clear boundaries between different functional areas of the application, facilitating parallel development, easier testing, and long-term maintainability, while still benefiting from the simplicity of a single deployment unit (monolith).
</file>

<file path="app_documentation/component_interfaces_interactions.md">
**Huberman App: Backend Component Interfaces & Interactions**

**1. Introduction**

Following the definition of backend modules in `component_breakdown.md`, this document specifies the interfaces, contracts, and primary interaction patterns between these modules within the Laravel Modular Monolith. The goal is to ensure loose coupling where appropriate, define clear responsibilities, and illustrate how data and control flow, particularly for critical cross-cutting concerns like subscription-based feature gating.

**2. Primary Interaction Mechanisms**

Modules within the backend will primarily interact using standard Laravel patterns designed to promote maintainability and testability:

*   **Dependency Injection (DI) & Service Interfaces:** The preferred method for direct inter-module communication. Modules will define interfaces (contracts) for their core services. Other modules will type-hint these interfaces in their constructors or methods, allowing Laravel's service container to inject the concrete implementation. This decouples the modules.
*   **Events and Listeners:** Used for broadcasting significant state changes or actions without requiring the originating module to know about all interested parties. For example, when a subscription status changes, an event can be fired, and multiple listeners in different modules can react accordingly (e.g., clearing caches, enabling/disabling features).
*   **Middleware:** Used primarily for cross-cutting concerns applied at the HTTP request level, notably for authentication (handled by `Authentication` module's logic) and authorization/feature gating (checking subscription status via `SubscriptionBilling` module's logic before allowing access to specific API routes/controllers).
*   **Policies:** Used for fine-grained authorization logic, often related to specific Eloquent models. Policies within a module (e.g., `NotePolicy` in `NotesService`) can leverage services from other modules (like `SubscriptionBilling`) to make authorization decisions.
*   **Eloquent Relationships:** Models defined within modules will use standard Eloquent relationships (`hasMany`, `belongsTo`, etc.) to interact with models in other modules where direct data relationships exist (e.g., `User` model in `UserManagement` has many `Subscription` models in `SubscriptionBilling`).

**3. Key Module Interfaces & Service Contracts**

Here are *examples* of key interfaces or service methods that modules might expose or consume. Concrete implementations will reside within the respective modules.

*   **`Authentication` Module:**
    *   *Primarily Consumed:* Consumes `UserManagement` services/models for user lookup/creation.
    *   *Exposes:* Less direct service interfaces, more functionality via controllers and standard Laravel Auth mechanisms (e.g., `Auth::user()`).
    *   *Fires Events:* `UserRegistered`, `UserLoggedIn`, `PasswordResetRequested`.

*   **`UserManagement` Module:**
    *   *Exposes:*
        *   `App\Modules\UserManagement\Models\User` (The core User model, accessible throughout the application).
        *   Potentially `UserServiceInterface` for complex profile operations (if needed beyond simple CRUD).
    *   *Listens To Events:* Potentially `SubscriptionStatusChanged` (from `SubscriptionBilling`) to update cached user properties if necessary.

*   **`SubscriptionBilling` Module:**
    *   *Exposes (Crucial Interfaces):*
        *   `SubscriptionServiceInterface`:
            *   `userHasActivePremiumSubscription(User $user): bool` - *Core method for feature gating.*
            *   `getUserPlan(User $user): ?Plan`
            *   `getSubscriptionStatus(User $user): string`
            *   `handleWebhook(string $provider, array $payload): void` (Internal logic invoked by WebhookController).
            *   Methods to retrieve plan details for the frontend API.
        *   `Models\Plan`, `Models\Subscription`.
    *   *Consumes:* `UserManagement` (for `User` model).
    *   *Fires Events:* `SubscriptionStarted`, `SubscriptionRenewed`, `SubscriptionCanceled`, `SubscriptionExpired`, `PaymentFailed`, `TrialWillEndSoon`.

*   **`ContentManagement` Module:**
    *   *Exposes:*
        *   `ContentServiceInterface` (or specific interfaces like `EpisodeServiceInterface`, `ProtocolServiceInterface`):
            *   `getFreeTierProtocols(): Collection`
            *   `getAllProtocols(): Collection`
            *   `getProtocolDetails(int $protocolId): ?Protocol`
            *   `getEpisodeSummaries(int $episodeId): Collection`
            *   `getEpisodeDetails(int $episodeId): ?Episode`
        *   `Models\Episode`, `Models\Protocol`, `Models\Summary`.
    *   *Consumes:* May indirectly use `SubscriptionBilling` (via middleware/policies applied to its controllers) to restrict access to certain data retrieval methods/endpoints.

*   **`ProtocolEngine` Module:**
    *   *Exposes:*
        *   `ReminderServiceInterface`:
            *   `setReminder(User $user, int $protocolId, array $settings): UserReminder` (Requires premium check internally).
            *   `getUserReminders(User $user): Collection`
            *   `deleteReminder(User $user, int $reminderId): bool`
        *   `TrackingServiceInterface`:
            *   `logAdherence(User $user, int $protocolId, Carbon $date): ProtocolTrack` (Requires premium check internally).
            *   `getUserTrackingData(User $user, DateRange $range): array`
            *   `calculateStreaks(User $user, int $protocolId): int`
    *   *Consumes:*
        *   `SubscriptionServiceInterface` (to perform internal premium checks before executing actions).
        *   `UserManagement` (for `User` model).
        *   `ContentManagement` (for `Protocol` model details).
    *   *Listens To Events:* Potentially `SubscriptionExpired` (to disable active reminders if needed).

*   **`NotesService` Module:**
    *   *Exposes:*
        *   `NoteServiceInterface`:
            *   `createNote(User $user, int $episodeId, string $content, bool $isPublic = false): Note` (Checks limits/public permission).
            *   `updateNote(User $user, int $noteId, array $data): Note`
            *   `deleteNote(User $user, int $noteId): bool`
            *   `getUserNotes(User $user, ?int $episodeId = null): Collection`
            *   `getPublicNotesForEpisode(int $episodeId): Collection`
        *   `Models\Note`.
    *   *Consumes:*
        *   `SubscriptionServiceInterface` (within its policies/services to check free tier limits or premium permission for public notes/advanced features).
        *   `UserManagement` (for `User`).
        *   `ContentManagement` (for `Episode`).

*   **`CommunityFeatures` Module:**
    *   *Consumes:*
        *   `NoteServiceInterface` (to fetch public notes).
        *   `SubscriptionServiceInterface` (via middleware/policies to control access to community sections if they are premium).
        *   `UserManagement` (for user details).

**4. Key Interaction Flow Examples (Sequence Diagrams - Conceptual)**

*   **Flow 1: User Accesses Premium Protocol Details (API Request)**
    1.  `React Native App` -> `API Request (GET /api/protocols/{id})`
    2.  `Laravel Router` -> `CheckPremiumAccess Middleware`
    3.  `CheckPremiumAccess Middleware` -> `Auth` (Get Authenticated User)
    4.  `CheckPremiumAccess Middleware` -> `SubscriptionServiceInterface::userHasActivePremiumSubscription(User)`
    5.  `SubscriptionService` -> `Database/Cache` (Check `subscriptions` table for User) -> Returns `true`
    6.  `CheckPremiumAccess Middleware` -> `Allows Request`
    7.  `Laravel Router` -> `ProtocolController::show(protocolId)`
    8.  `ProtocolController` -> `ProtocolServiceInterface::getProtocolDetails(protocolId)`
    9.  `ProtocolService` -> `Database` (Fetch Protocol data)
    10. `ProtocolController` -> `Format Response` (e.g., using API Resource)
    11. `Laravel` -> `API Response (200 OK with Protocol Data)` -> `React Native App`

*   **Flow 2: User Sets a Custom Reminder (API Request - Premium Feature)**
    1.  `React Native App` -> `API Request (POST /api/reminders)` with protocol ID, time settings.
    2.  `Laravel Router` -> `CheckPremiumAccess Middleware`
    3.  `CheckPremiumAccess Middleware` -> ... (verifies premium as in Flow 1) -> `Allows Request`
    4.  `Laravel Router` -> `ReminderController::store(Request)`
    5.  `ReminderController` -> `SetReminderRequest` (Validation)
    6.  `ReminderController` -> `ReminderServiceInterface::setReminder(User, protocolId, settings)`
    7.  *(Defense-in-depth): `ReminderService` -> `SubscriptionServiceInterface::userHasActivePremiumSubscription(User)` -> Returns `true`*
    8.  `ReminderService` -> `Database` (Save `UserReminder` record)
    9.  `ReminderService` -> `Queue::dispatch(new ScheduleReminderJob(reminderId))` (Optional: If scheduling is complex)
    10. `ReminderController` -> `Format Response (201 Created)`
    11. `Laravel` -> `API Response` -> `React Native App`

*   **Flow 3: Payment Provider Webhook (Subscription Renewed)**
    1.  `Stripe/Paddle/App Store` -> `POST /api/webhooks/{provider}`
    2.  `Laravel Router` -> `WebhookController::handle(provider, Request)`
    3.  `WebhookController` -> `VerifyWebhookSignature Middleware/Logic`
    4.  `WebhookController` -> `SubscriptionServiceInterface::handleWebhook(provider, payload)`
    5.  `SubscriptionService` -> `Parse Payload` (Identify event type: e.g., `invoice.payment_succeeded`, `subscription.updated`)
    6.  `SubscriptionService` -> `Database` (Find corresponding `User` and `Subscription` record)
    7.  `SubscriptionService` -> `Database` (Update `Subscription` status, `ends_at` date)
    8.  `SubscriptionService` -> `Event::dispatch(new SubscriptionRenewed(Subscription))`
    9.  `SubscriptionRenewed Listener 1` (e.g., `ClearUserEntitlementCache`) -> `Cache::forget(...)`
    10. `SubscriptionRenewed Listener 2` (e.g., `SendRenewalConfirmationEmail`) -> `Queue::dispatch(...)` (Optional)
    11. `WebhookController` -> `Return Success Response (200 OK)` -> `Payment Provider`

**5. Frontend Interaction Summary**

The React Native frontend interacts with the backend *exclusively* through the defined RESTful API. It is unaware of the internal module structure, service interfaces, or events. The backend API is responsible for:
*   Authenticating the user.
*   Performing all necessary authorization and feature gating based on subscription status.
*   Returning data appropriate to the user's access level (e.g., filtering content, including flags like `is_premium_user: true` or `can_set_reminders: true`).
*   Accepting requests and triggering the relevant backend logic.

**6. Conclusion**

Defining clear interfaces (primarily through PHP Interfaces for Services) and interaction patterns (DI, Events, Middleware, Policies) allows for a decoupled yet cohesive Modular Monolith. This structure facilitates understanding responsibilities, enhances testability (by mocking dependencies), and enables more organized development and maintenance of the Huberman App backend. The key cross-cutting concern of subscription checking is handled systematically via middleware and service calls, ensuring consistent feature gating.
</file>

<file path="app_documentation/content_strategy_management.md">
**Huberman App: Initial Content Strategy & Management Plan**

**1. Introduction**

This document outlines the strategy for sourcing, preparing, and ingesting the initial content required for the Huberman App backend, particularly for the Minimum Viable Product (MVP). This includes foundational protocols, summaries, and other necessary data points defined in `app_description.md` and `user_stories_mvp.md`. The goal is to establish a clear process for populating the database using Laravel Seeders.

**2. Initial Content Scope (MVP Focus)**

Based on the MVP definition, the initial content required includes:

*   **Subscription Plans:** Definition of the "Free" tier and at least one "Premium" tier (e.g., Monthly/Annual) with their identifiers (e.g., `Premium_Monthly`). Provider-specific IDs (Stripe, Apple, Google) will be needed later but placeholders can be used initially in seeders.
*   **Foundational Protocols:** A selected subset of core protocols discussed frequently in the Huberman Lab podcast (e.g., Morning Sunlight Viewing, Cold Exposure, Foundational Fitness Protocols). For each:
    *   Unique Name
    *   Category (e.g., Sleep, Focus, Fitness)
    *   Brief Description (Accessible to Free users)
    *   *(Optional MVP)* Placeholder/basic Implementation Guide (Premium access)
*   **Summaries for Foundational Protocols:** Concise summaries linked to the foundational protocols above.
*   **Placeholder Episodes:** A few basic episode entries might be needed to link summaries and notes to, even if full episode data isn't part of the MVP content focus.

**3. Content Source & Curation**

*   **Source Material:** The primary source for protocol and summary content will be the public Huberman Lab podcast episodes and potentially official associated materials (e.g., summaries on the Huberman Lab website, newsletters).
*   **Curation Process:**
    *   **Responsibility:** A designated **"Content Curator"** role is required. This role is responsible for listening to/reviewing source material, extracting key information, writing descriptions and summaries, and ensuring scientific accuracy aligns with the source. *(This role needs to be assigned - could be a project manager, a subject matter expert, or the client)*.
    *   **Extraction:** The Curator will identify the foundational protocols for the MVP, extract their names, core principles (for description), and key takeaways (for summaries).
    *   **Writing:** The Curator will write the actual `description` and `summary` text, adhering to a consistent tone and style suitable for the app. Accuracy and clarity are paramount.

**4. Content Preparation & Formatting**

*   **Format:** Content curated should be prepared in **Markdown (`.md`)** format. This provides basic text formatting (headings, lists, bold/italic) while remaining easy for developers to parse and integrate into seeders.
*   **Structure:** Separate Markdown files should be created for each protocol and potentially each summary, or grouped logically (e.g., one file per protocol containing its description and summary). A consistent structure within the files is recommended.
    *   *Example `morning_sunlight.md` structure:*
        ```markdown
        # Protocol: Morning Sunlight Viewing

        **Category:** Sleep, Circadian Rhythm

        **Description:**
        Brief explanation of the importance of viewing sunlight shortly after waking...

        **Summary:**
        Key takeaway points about the protocol...

        **(Premium) Implementation Guide:**
        Step-by-step guide (can be basic/placeholder for MVP)...
        ```
*   **Review:** Before handing off to development, the curated and formatted Markdown content should be reviewed for accuracy, clarity, consistency, and typos (potentially by another team member or the client).

**5. Ingestion Format (for Seeders)**

*   **Method:** The prepared content will be directly embedded into PHP arrays within dedicated Laravel Seeder classes (e.g., `FoundationalProtocolsSeeder.php`, `SummariesSeeder.php`).
*   **Rationale:** For the initial, relatively small MVP dataset, embedding directly in PHP arrays is the simplest method. It avoids the need for parsing external files (like JSON or CSV) during the seeding process. If the initial dataset becomes very large, transitioning to reading from JSON files stored alongside the seeders can be considered.
*   **Data Structure in Seeders:** The seeders will translate the Markdown content into the structure required by the Eloquent models (`Protocol`, `Summary`, `Episode`). Markdown text can be stored directly in the appropriate database fields (`description`, `content`, `implementation_guide`).

**6. Ingestion Mechanism (Laravel Seeders)**

*   **Implementation:** Backend developers will create the necessary Seeder classes within the `database/seeders/` directory.
*   **Specific Seeders:**
    *   `PlanSeeder.php`: Creates the 'Free' and 'Premium' plan records. Should use `updateOrCreate` to avoid duplicates on re-seeding.
    *   `EpisodeSeeder.php`: Creates placeholder Episode records if needed for relationships.
    *   `FoundationalProtocolsSeeder.php`: Creates the initial `Protocol` records from the prepared Markdown content.
    *   `SummariesSeeder.php`: Creates the initial `Summary` records, linking them to the appropriate `Protocol` or `Episode` IDs created in previous seeders.
    *   `EpisodeProtocolSeeder.php`: Links Episodes and Protocols in the pivot table if necessary for MVP structure.
*   **Execution:** Seeders will be executed using `php artisan db:seed`. They will be called sequentially from the main `DatabaseSeeder.php` file to ensure relational integrity (e.g., create protocols before summaries that link to them).
*   **Environment:** Seeders should be designed to run safely in development environments. Running seeders in staging/production needs careful consideration (usually only done for initial setup or specific reference data like Plans).

**7. Responsibilities**

*   **Content Curator:** Identify source material, extract information, write/format descriptions & summaries in Markdown, review for accuracy.
*   **Backend Developer:** Create/update Seeder classes, integrate Markdown content into PHP arrays within seeders, ensure seeders run correctly and populate the database as expected, handle relationships.
*   **QA / PM / Client:** Review the content *as it appears in the running application* (after seeding) to ensure it displays correctly and matches requirements.

**8. Future Content Management**

*   **Limitation of Seeders:** Seeders are primarily for initial data setup and developer environments. They are **not** a suitable mechanism for ongoing content updates by non-developers in a production environment.
*   **Post-MVP:** A separate strategy and implementation plan will be required for ongoing content management. This will likely involve developing an Admin Panel or integrating a Headless CMS to allow the Content Curator or other authorized users to add, edit, and manage protocols, episodes, and summaries without requiring code changes and deployments.

**9. Conclusion**

This plan outlines a clear process for handling the initial content load for the Huberman App MVP. By defining the source, curation process, formatting (Markdown), and ingestion mechanism (Laravel Seeders directly using PHP arrays), we can ensure the necessary foundational content is reliably populated for development, testing, and the initial launch. The need for a more robust, long-term content management solution post-MVP is acknowledged.
</file>

<file path="app_documentation/database_migrations_plan.md">
**Huberman App: Database Migrations Plan**

**1. Introduction**

This document outlines the plan for translating the conceptual SQL schema defined in `database_plan.md` into executable Laravel migration files. These migrations will provide a version-controlled, repeatable, and database-agnostic way (within Laravel's supported databases) to define and evolve the application's database structure.

**2. Process Overview**

1.  **Review SQL Schema:** Thoroughly review the `database_plan.md` file to understand table structures, data types, constraints (NOT NULL, UNIQUE), foreign key relationships, `ON DELETE` behavior, and indexes.
2.  **Map SQL to Laravel Schema Builder:** Translate each `CREATE TABLE` and `CREATE INDEX` statement into the corresponding Laravel `Schema` facade methods (`Schema::create`, `$table->id()`, `$table->string()`, `$table->foreignId()`, `$table->constrained()`, `$table->unique()`, `$table->index()`, `$table->timestamps()`, `$table->softDeletes()`, etc.).
3.  **Determine Migration Order:** Create migrations in an order that respects foreign key constraints. Tables must exist before they can be referenced by a foreign key.
    *   Order: `users`, `plans`, `episodes`, `protocols` -> `subscriptions`, `episode_protocol`, `summaries`, `notes` -> `user_protocol_tracking` (if implemented). Standard Laravel tables (`password_resets`, `jobs`, `failed_jobs`) can usually be created anytime or might already exist.
4.  **Generate Migration Files:** Use the `php artisan make:migration create_table_name_table` command for each table.
5.  **Implement `up()` Method:** Populate the `up()` method in each migration file with the `Schema::create(...)` logic derived in step 2.
6.  **Implement `down()` Method:** Populate the `down()` method with the corresponding `Schema::dropIfExists('table_name')` to ensure migrations can be rolled back cleanly.
7.  **Refine Constraints and Indexes:** Double-check:
    *   **Data Types:** Use appropriate types (`string`, `text`, `integer`, `bigInteger`, `boolean`, `date`, `timestamp`, `jsonb` for Postgres).
    *   **Nullability:** Apply `->nullable()` where needed.
    *   **Uniqueness:** Use `->unique()`.
    *   **Defaults:** Use `->default(...)`.
    *   **Foreign Keys:** Use `->foreignId('column')->constrained('related_table')->onDelete('action')`. Choose `cascade`, `restrict`, `set null`, or `no action` carefully based on relationships (e.g., `cascade` for user-owned data like notes/subscriptions, `restrict` for plans linked to active subscriptions).
    *   **Indexes:** Add `->index()` for frequently queried columns (FKs often indexed automatically by `constrained()`, status fields, categories, dates). Use array syntax for composite indexes (`->index(['col1', 'col2'])`).
    *   **Timestamps/Soft Deletes:** Use `$table->timestamps()` and `$table->softDeletes()` where appropriate.
8.  **Testing:** Run `php artisan migrate` on a local development database to verify syntax and execution. Test rollbacks using `php artisan migrate:rollback`.
9.  **Version Control:** Commit the generated migration files to the Git repository.

**3. Migration File Structure (Conceptual)**

Below is the conceptual structure for each required migration file. Specific commands to generate them are included.

**(Note:** Assumes a fresh Laravel project structure. Some standard migrations like `users`, `password_resets`, `failed_jobs` might pre-exist and need modification instead of creation.)

---

**1. Create Users Table**

*   **Command:** `php artisan make:migration create_users_table`
*   **File:** `database/migrations/YYYY_MM_DD_HHMMSS_create_users_table.php`

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('users', function (Blueprint $table) {
            $table->id(); // Bigint, unsigned, auto-increment, primary key
            $table->string('name');
            $table->string('email')->unique();
            $table->timestamp('email_verified_at')->nullable();
            $table->string('password');
            $table->string('profile_picture_url', 2048)->nullable();
            $table->rememberToken();
            $table->timestamps(); // created_at, updated_at (nullable timestamps)
            $table->softDeletes(); // deleted_at (nullable timestamp)
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('users');
    }
};
```

---

**2. Create Plans Table**

*   **Command:** `php artisan make:migration create_plans_table`
*   **File:** `database/migrations/YYYY_MM_DD_HHMMSS_create_plans_table.php`

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('plans', function (Blueprint $table) {
            $table->id(); // Standard auto-incrementing primary key
            $table->string('name')->unique();
            $table->text('description')->nullable();
            $table->string('stripe_product_id')->nullable()->unique(); // Ensure unique if provider used
            $table->string('apple_product_id')->nullable()->unique();
            $table->string('google_product_id')->nullable()->unique();
            $table->jsonb('features')->nullable(); // Use jsonb for PostgreSQL efficiency
            $table->boolean('is_active')->default(true)->index();
            $table->timestamps();
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('plans');
    }
};
```

---

**3. Create Subscriptions Table**

*   **Command:** `php artisan make:migration create_subscriptions_table`
*   **File:** `database/migrations/YYYY_MM_DD_HHMMSS_create_subscriptions_table.php`

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('subscriptions', function (Blueprint $table) {
            $table->id(); // Bigint primary key
            $table->foreignId('user_id')->constrained('users')->onDelete('cascade'); // FK to users
            $table->foreignId('plan_id')->constrained('plans')->onDelete('restrict'); // FK to plans
            $table->string('status', 50)->index(); // e.g., active, canceled
            $table->string('provider', 50); // e.g., stripe, apple, google
            $table->string('provider_id'); // Subscription ID from provider
            $table->string('provider_plan_id')->nullable(); // Plan ID from provider
            $table->timestamp('trial_ends_at')->nullable();
            $table->timestamp('ends_at')->nullable()->index(); // Current period end or cancellation date
            $table->timestamps();
            $table->softDeletes(); // Keep record even if canceled by user action immediately

            // Composite index for efficient webhook lookups
            $table->index(['provider', 'provider_id']);
            // Optional: Unique constraint depending on provider ID handling
            // $table->unique(['user_id', 'provider', 'provider_id']); // Re-evaluate if needed
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('subscriptions');
    }
};
```

---

**4. Create Episodes Table**

*   **Command:** `php artisan make:migration create_episodes_table`
*   **File:** `database/migrations/YYYY_MM_DD_HHMMSS_create_episodes_table.php`

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('episodes', function (Blueprint $table) {
            $table->id();
            $table->string('title', 512);
            $table->string('podcast_source')->default('Huberman Lab');
            $table->integer('episode_number')->nullable();
            $table->date('published_at')->nullable()->index();
            $table->text('description')->nullable();
            $table->string('audio_url', 2048)->nullable();
            $table->string('source_url', 2048)->nullable();
            $table->integer('duration_seconds')->nullable();
            $table->timestamps();
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('episodes');
    }
};
```

---

**5. Create Protocols Table**

*   **Command:** `php artisan make:migration create_protocols_table`
*   **File:** `database/migrations/YYYY_MM_DD_HHMMSS_create_protocols_table.php`

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('protocols', function (Blueprint $table) {
            $table->id();
            $table->string('name')->unique();
            $table->text('description');
            $table->string('category', 100)->nullable()->index();
            $table->text('implementation_guide')->nullable();
            $table->jsonb('research_links')->nullable(); // Use jsonb for PostgreSQL
            $table->timestamps();
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('protocols');
    }
};
```

---

**6. Create Episode-Protocol Pivot Table**

*   **Command:** `php artisan make:migration create_episode_protocol_table`
*   **File:** `database/migrations/YYYY_MM_DD_HHMMSS_create_episode_protocol_table.php`

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('episode_protocol', function (Blueprint $table) {
            $table->foreignId('episode_id')->constrained('episodes')->onDelete('cascade');
            $table->foreignId('protocol_id')->constrained('protocols')->onDelete('cascade');

            // Define composite primary key
            $table->primary(['episode_id', 'protocol_id']);

            // No timestamps by default for basic pivot
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('episode_protocol');
    }
};
```

---

**7. Create Summaries Table**

*   **Command:** `php artisan make:migration create_summaries_table`
*   **File:** `database/migrations/YYYY_MM_DD_HHMMSS_create_summaries_table.php`

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('summaries', function (Blueprint $table) {
            $table->id();
            // Foreign key automatically indexed by constrained()
            $table->foreignId('episode_id')->constrained('episodes')->onDelete('cascade');
            // Optional: Protocol ID if summary is protocol-specific within episode
            // $table->foreignId('protocol_id')->nullable()->constrained('protocols')->onDelete('set null');
            $table->text('content');
            $table->string('type', 50)->default('summary')->index(); // Index type for filtering
            $table->timestamps();
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('summaries');
    }
};
```

---

**8. Create Notes Table**

*   **Command:** `php artisan make:migration create_notes_table`
*   **File:** `database/migrations/YYYY_MM_DD_HHMMSS_create_notes_table.php`

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('notes', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->constrained('users')->onDelete('cascade');
            $table->foreignId('episode_id')->constrained('episodes')->onDelete('cascade');
            $table->text('content');
            $table->boolean('is_public')->default(false);
            $table->timestamps();

            // Composite index for fetching user's notes for an episode
            $table->index(['user_id', 'episode_id']);
            // Index for finding public notes for an episode (community feature)
            $table->index(['episode_id', 'is_public']); // Basic index; partial index requires raw SQL if essential
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('notes');
    }
};
```

---

**9. (Optional) Create User Protocol Tracking Table**

*   **Command:** `php artisan make:migration create_user_protocol_tracking_table`
*   **File:** `database/migrations/YYYY_MM_DD_HHMMSS_create_user_protocol_tracking_table.php`

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;
use Illuminate\Support\Facades\DB; // Needed for default date

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('user_protocol_tracking', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->constrained('users')->onDelete('cascade');
            $table->foreignId('protocol_id')->constrained('protocols')->onDelete('cascade');
            // Use default date function appropriate for the database
            $table->date('tracked_at')->default(DB::raw('CURRENT_DATE'));
            $table->text('notes')->nullable();
            $table->jsonb('metadata')->nullable(); // Use jsonb for PostgreSQL
            $table->timestamps(); // Use standard created_at/updated_at

            // Prevent duplicate tracking entries for the same user, protocol, and day
            $table->unique(['user_id', 'protocol_id', 'tracked_at']);
            // Note: The unique constraint implicitly creates an index covering (user_id, protocol_id, tracked_at)
            // A separate index on (user_id, protocol_id) is usually redundant.
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('user_protocol_tracking');
    }
};
```

---

**10. Standard Laravel Tables (If needed)**

*   **Password Resets:** `php artisan make:migration create_password_resets_table` (Check if exists first)
*   **Jobs:** `php artisan queue:table` then `php artisan migrate`
*   **Failed Jobs:** `php artisan make:migration create_failed_jobs_table` (Check if exists first)

---

**4. Execution**

After creating and reviewing these files:

1.  Ensure your `.env` file is configured with the correct database connection details.
2.  Run `php artisan migrate` from your project root in the terminal.
3.  Laravel will execute the `up()` method of each pending migration in chronological order.

**5. Outcome**

The result will be a database schema matching the application's requirements, managed entirely through version-controlled Laravel migration files. This allows for consistent setup across development, staging, and production environments, and provides a clear history of schema changes.
</file>

<file path="app_documentation/database_plan.md">
CREATE TABLE users (
    id BIGSERIAL PRIMARY KEY,                     -- Unique identifier for the user
    name VARCHAR(255) NOT NULL,                  -- User's display name
    email VARCHAR(255) NOT NULL UNIQUE,          -- User's email address (used for login, must be unique)
    password VARCHAR(255) NOT NULL,              -- Hashed password
    email_verified_at TIMESTAMP NULL,            -- Timestamp when the user verified their email address
    profile_picture_url VARCHAR(2048) NULL,      -- URL to the user's profile picture (optional)
    remember_token VARCHAR(100) NULL,            -- For "remember me" functionality (Laravel standard)
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP NULL                    -- For soft deletes, if enabled
);

-- Index for faster email lookups (login)
CREATE INDEX idx_users_email ON users(email);

-- Plans Table: Defines the available subscription tiers (including Free).
CREATE TABLE plans (
    id SERIAL PRIMARY KEY,                       -- Unique identifier for the plan
    name VARCHAR(255) NOT NULL UNIQUE,           -- Human-readable name (e.g., 'Free', 'Premium Monthly', 'Premium Annual')
    description TEXT NULL,                       -- Optional description of the plan
    -- Provider-specific identifiers are crucial for mapping
    stripe_product_id VARCHAR(255) NULL UNIQUE,  -- Corresponding Product ID in Stripe (if using Stripe)
    apple_product_id VARCHAR(255) NULL UNIQUE,   -- Corresponding Product ID in App Store Connect (for IAP)
    google_product_id VARCHAR(255) NULL UNIQUE,  -- Corresponding Product ID in Google Play Console (for IAP)
    features JSONB NULL,                         -- Store list of features or entitlements as JSON (flexible)
    is_active BOOLEAN NOT NULL DEFAULT TRUE,     -- Flag to activate/deactivate plans without deleting
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
    -- Note: Price details are often better managed within Stripe/App Stores or a separate related table
    --       if multiple prices exist per plan (e.g., different regions, currencies).
    --       Alternatively, add stripe_price_id etc. here if simple 1 price per plan.
);

-- Index for quickly finding active plans
CREATE INDEX idx_plans_is_active ON plans(is_active);

-- Subscriptions Table: Tracks user subscriptions to specific plans.
CREATE TABLE subscriptions (
    id BIGSERIAL PRIMARY KEY,                     -- Unique identifier for the subscription record
    user_id BIGINT NOT NULL REFERENCES users(id) ON DELETE CASCADE, -- Link to the user
    plan_id INT NOT NULL REFERENCES plans(id) ON DELETE RESTRICT, -- Link to the subscribed plan (RESTRICT prevents deleting a plan with active subs)
    status VARCHAR(50) NOT NULL,                 -- Current status (e.g., 'active', 'trialing', 'past_due', 'canceled', 'expired', 'incomplete')
    provider VARCHAR(50) NOT NULL,               -- Source ('stripe', 'apple', 'google')
    provider_id VARCHAR(255) NOT NULL,           -- Subscription ID from the payment provider (e.g., Stripe sub_xxx, Apple original_transaction_id, Google purchaseToken)
    provider_plan_id VARCHAR(255) NULL,          -- Plan/Product ID from the provider (redundant but useful for verification)
    trial_ends_at TIMESTAMP NULL,                -- Timestamp when the trial period ends (if applicable)
    ends_at TIMESTAMP NULL,                      -- Timestamp when the current subscription period ends (renews or expires)
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP NULL                    -- For soft deletes (e.g., keep history even if user cancels immediately)

    -- Ensure a user + provider combo doesn't have duplicate active subscription IDs from the provider
    -- Note: Uniqueness might depend on how provider IDs are handled (e.g., Google Play tokens change)
    -- A composite unique index might be needed based on specific provider behavior.
    -- UNIQUE (user_id, provider, provider_id) -- Consider implications carefully
);

-- Indexes for common lookups
CREATE INDEX idx_subscriptions_user_id ON subscriptions(user_id);
CREATE INDEX idx_subscriptions_status ON subscriptions(status);
CREATE INDEX idx_subscriptions_ends_at ON subscriptions(ends_at);
CREATE INDEX idx_subscriptions_provider_id ON subscriptions(provider, provider_id); -- Useful for webhook lookups

-- Episodes Table: Stores information about podcast episodes.
CREATE TABLE episodes (
    id BIGSERIAL PRIMARY KEY,
    title VARCHAR(512) NOT NULL,                 -- Title of the episode
    podcast_source VARCHAR(255) NOT NULL DEFAULT 'Huberman Lab', -- Source podcast name
    episode_number INT NULL,                     -- Episode number, if applicable
    published_at DATE NULL,                      -- Original air date
    description TEXT NULL,                       -- Show notes or description
    audio_url VARCHAR(2048) NULL,                -- Link to the audio file (optional)
    source_url VARCHAR(2048) NULL,               -- Link to the original episode page/source
    duration_seconds INT NULL,                   -- Duration in seconds (optional)
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- Index for sorting/filtering by publication date
CREATE INDEX idx_episodes_published_at ON episodes(published_at);

-- Protocols Table: Defines the health/performance protocols discussed.
CREATE TABLE protocols (
    id BIGSERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL UNIQUE,           -- Name of the protocol (e.g., 'Morning Sunlight Viewing')
    description TEXT NOT NULL,                   -- Detailed explanation of the protocol
    category VARCHAR(100) NULL,                  -- Category (e.g., 'Sleep', 'Focus', 'Nutrition', 'Fitness')
    implementation_guide TEXT NULL,              -- Step-by-step guide or tips for implementation
    research_links JSONB NULL,                   -- Store relevant research paper links as JSON array/objects
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- Index for filtering by category
CREATE INDEX idx_protocols_category ON protocols(category);

-- Episode_Protocol Pivot Table: Many-to-many relationship between episodes and protocols.
CREATE TABLE episode_protocol (
    episode_id BIGINT NOT NULL REFERENCES episodes(id) ON DELETE CASCADE,
    protocol_id BIGINT NOT NULL REFERENCES protocols(id) ON DELETE CASCADE,
    -- Optional: Add fields like relevance_score, timestamps_mentioned (JSONB) if needed
    PRIMARY KEY (episode_id, protocol_id) -- Composite primary key ensures uniqueness and creates index
);

-- Summaries Table: Stores summaries, key takeaways, or soundbites related to episodes.
CREATE TABLE summaries (
    id BIGSERIAL PRIMARY KEY,
    episode_id BIGINT NOT NULL REFERENCES episodes(id) ON DELETE CASCADE, -- Link to the episode
    -- Optional: protocol_id BIGINT NULL REFERENCES protocols(id) ON DELETE SET NULL, -- If a summary is specific to a protocol within an episode
    content TEXT NOT NULL,                       -- The summary text itself
    type VARCHAR(50) NOT NULL DEFAULT 'summary', -- Type ('summary', 'key_takeaway', 'soundbite', 'quote')
    -- Optional: Add start/end timestamps if linking to specific audio points
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- Index for quickly finding summaries for an episode
CREATE INDEX idx_summaries_episode_id ON summaries(episode_id);

-- Notes Table: Stores user-generated notes, linked to episodes.
CREATE TABLE notes (
    id BIGSERIAL PRIMARY KEY,
    user_id BIGINT NOT NULL REFERENCES users(id) ON DELETE CASCADE, -- Link to the note author
    episode_id BIGINT NOT NULL REFERENCES episodes(id) ON DELETE CASCADE, -- Link to the related episode
    content TEXT NOT NULL,                       -- The content of the note
    is_public BOOLEAN NOT NULL DEFAULT FALSE,    -- Flag for public vs. private notes
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- Indexes for common note queries
CREATE INDEX idx_notes_user_id ON notes(user_id);
CREATE INDEX idx_notes_episode_id ON notes(episode_id);
-- Composite index might be useful for fetching user's notes for a specific episode
CREATE INDEX idx_notes_user_episode ON notes(user_id, episode_id);
-- Index for finding public notes for an episode (community feature)
CREATE INDEX idx_notes_public_episode ON notes(episode_id, is_public) WHERE is_public = TRUE;

-- (Optional) User Protocol Settings/Tracking Table: If advanced tracking is added.
-- CREATE TABLE user_protocol_tracking (
--     id BIGSERIAL PRIMARY KEY,
--     user_id BIGINT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
--     protocol_id BIGINT NOT NULL REFERENCES protocols(id) ON DELETE CASCADE,
--     tracked_at DATE NOT NULL DEFAULT CURRENT_DATE, -- Date the protocol was marked as done/tracked
--     notes TEXT NULL,                              -- Optional notes specific to this tracking instance
--     metadata JSONB NULL,                          -- For storing extra data (e.g., duration, intensity)
--     created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
--     UNIQUE (user_id, protocol_id, tracked_at) -- Prevent duplicate tracking per day
-- );
-- CREATE INDEX idx_user_protocol_tracking_user_protocol ON user_protocol_tracking(user_id, protocol_id);

-- Standard Laravel Tables (Optional but common):
-- These might be created automatically by Laravel migrations if used.

-- CREATE TABLE password_resets (
--     email VARCHAR(255) PRIMARY KEY,
--     token VARCHAR(255) NOT NULL,
--     created_at TIMESTAMP NULL
-- );

-- CREATE TABLE jobs (
--     id BIGSERIAL PRIMARY KEY,
--     queue VARCHAR(255) NOT NULL,
--     payload TEXT NOT NULL,
--     attempts SMALLINT NOT NULL,
--     reserved_at INT NULL,
--     available_at INT NOT NULL,
--     created_at INT NOT NULL
-- );
-- CREATE INDEX idx_jobs_queue_reserved_at ON jobs(queue, reserved_at);

-- CREATE TABLE failed_jobs (
--     id BIGSERIAL PRIMARY KEY,
--     connection TEXT NOT NULL,
--     queue TEXT NOT NULL,
--     payload TEXT NOT NULL,
--     exception TEXT NOT NULL,
--     failed_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
-- );

**Key Relationships Summary:**

- **User <-> Subscription:** One User has many Subscription records (potentially over time), each linking to one Plan.
- **User <-> Note:** One User has many Notes.
- **Episode <-> Note:** One Episode has many Notes.
- **Episode <-> Protocol:** Many Episodes can discuss many Protocols (via episode_protocol pivot table).
- **Episode <-> Summary:** One Episode has many Summaries.
- **Plan <-> Subscription:** One Plan can be associated with many Subscriptions.
</file>

<file path="app_documentation/detailed_plan.md">
**Huberman App (Optimize Guide): Implementation Preparation Plan**

**1. Transition Summary**

We have successfully completed the high-level application description and architectural blueprint phases for the Huberman App. The architecture outlines a Modular Monolith (Laravel/PHP backend), a React Native frontend, PostgreSQL database, Redis caching/queuing, and a RESTful API, all designed to support the defined Freemium subscription model. This document details the next crucial phase: transitioning from the architectural vision to actionable technical specifications, project setup, and environment preparation necessary to initiate development efficiently and effectively. The objective is to establish a solid foundation for the implementation lifecycle.

**2. Detailed Technical Design & Specifications**

This phase focuses on refining the high-level architecture into granular component designs and technical specifications.

*   **Component Breakdown (Modular Monolith):**
    *   **Process:** Decompose the Laravel backend into logical, domain-driven modules (Namespaces/Folders). Based on the architecture and features, initial modules will likely include: `Authentication`, `UserManagement`, `SubscriptionBilling` (integrating with chosen payment provider/Cashier), `ContentManagement` (Episodes, Protocols, Summaries), `ProtocolEngine` (Reminder logic, Tracking), `NotesService`, `CommunityFeatures` (if applicable early), and `CoreApi`.
    *   **Outcome:** Clearly defined code boundaries and responsibilities within the Laravel application structure.
*   **Component Interfaces & Interactions:**
    *   **Process:** Define the specific internal contracts (Service Classes, Interfaces, Events) for how these backend modules interact. Document the flow of data and control, especially for cross-cutting concerns like subscription status checks. For frontend-backend interaction, focus on the API.
    *   **Outcome:** Documented internal interaction patterns (e.g., Sequence Diagrams for key flows) and clear responsibilities for each module.
*   **API Design & Documentation:**
    *   **Process:** Formalize the RESTful API contract. Utilize OpenAPI (Swagger) specification to define all endpoints, request/response schemas, authentication methods (Laravel Sanctum/Passport), and authorization requirements. Explicitly tag endpoints requiring 'Premium' subscription status. Key areas include: Auth (login, register, password reset), User Profile, Plans/Subscriptions (fetching offers, potentially linking to provider portals), Content (fetching episodes, protocols, summaries - with filtering for free/premium), Notes (CRUD, public/private flags), Reminders (CRUD for premium), Tracking (logging adherence for premium). Define error handling standards (HTTP status codes, error response structure). Define webhook endpoints for payment providers (Stripe/Paddle, Apple App Store Server Notifications, Google Play Developer API).
    *   **Outcome:** A version-controlled `openapi.yaml` or `swagger.json` file serving as the definitive API contract for both frontend and backend teams.
*   **Database Schema Refinement:**
    *   **Process:** Review the provided `database_plan.md` SQL schema. Convert it into Laravel Migrations. Finalize data types, constraints (NOT NULL, UNIQUE), foreign key relationships (with appropriate ON DELETE behavior - e.g., CASCADE for notes on user delete, RESTRICT for plans on active subscriptions). Define necessary indexes based on anticipated query patterns (e.g., indexing `subscriptions.user_id`, `subscriptions.status`, `subscriptions.ends_at`, `notes.user_id`, `notes.episode_id`, `protocols.category`). Plan for potential future schema evolution using migrations.
    *   **Outcome:** A complete set of executable Laravel migration files checked into version control, representing the definitive database structure.
*   **Complex Workflow/Algorithm Design:**
    *   **Process:** Document the specific logic for complex features identified in the architecture:
        *   **Subscription Lifecycle Management:** Detail the state machine for subscriptions (`trialing`, `active`, `past_due`, `canceled`, `expired`) and how webhook events from Stripe/Paddle/Apple/Google trigger state transitions and update the `subscriptions` table.
        *   **Feature Gating Logic:** Specify the implementation details for Laravel Middleware/Policies that check the user's active subscription status (querying `subscriptions` table, potentially using cached flags from Redis) before granting access to premium API routes or features.
        *   **Customizable Reminders (Premium):** Design the scheduling mechanism (likely using Laravel's Task Scheduling + Queues) to trigger push notifications based on user-defined times/frequencies for specific protocols.
        *   **Tracking & Visualization Logic (Premium):** Define how adherence data is stored and how it will be aggregated for progress visualizations (e.g., streak calculation).
    *   **Outcome:** Sequence diagrams, state diagrams, or pseudo-code documenting the core logic for these critical flows.
*   **Technology Version & Library Finalization:**
    *   **Process:** Lock down specific versions: PHP (e.g., 8.2+), Laravel (e.g., 10.x/11.x), PostgreSQL (e.g., 17), Redis (e.g., 7.x), Node.js (LTS for React Native tooling), React Native (latest stable). Select and document key libraries: `laravel/cashier-stripe` or `laravel/cashier-paddle`, `react-native-iap`, Push Notification library (e.g., `react-native-push-notification` or cloud provider SDKs), state management for RN (e.g., Redux Toolkit, Zustand).
    *   **Outcome:** Updated `composer.json`, `package.json`, and potentially a project README or Architecture Decision Record (ADR) listing finalized versions and libraries.

**3. Project Planning & Development Readiness**

Translate the technical design into a manageable project plan and prepare the team.

*   **Requirements Refinement (User Stories):**
    *   **Process:** Break down the features from `app_description.md` (both Free and Premium tiers) into granular User Stories (e.g., "As a Free User, I want to see summaries for foundational protocols so that I can understand the basics," "As a Premium User, I want to set a custom daily reminder for 'Morning Sunlight Viewing' so that I don't forget," "As a Premium User, I want to mark a protocol as completed for the day so that I can track my adherence"). Use a tool like Jira or Trello. Prioritize stories for an MVP, focusing on core free functionality and the subscription mechanism first, followed by premium features.
    *   **Outcome:** A populated backlog of estimated User Stories in the chosen project management tool.
*   **Detailed Estimation:**
    *   **Process:** Estimate the effort for each User Story based on the detailed technical designs (e.g., using Story Points or time estimates). This should be done collaboratively by the development team.
    *   **Outcome:** Estimated backlog providing a basis for timeline creation.
*   **Granular Project Timeline & Milestones:**
    *   **Process:** Develop a sprint-based or Kanban-based timeline. Define key milestones:
        *   M1: Project Setup Complete (Repo, CI/CD Base, Local Env).
        *   M2: Core Backend Ready (Auth, User Mgmt, DB Migrations, Basic API Shell).
        *   M3: Basic Content Display (Free Tier Protocols/Summaries visible in RN App).
        *   M4: Subscription Flow PoC (IAP Integration, Backend Webhooks, Basic Feature Gate).
        *   M5: Free Tier Feature Complete (Basic Reminders, Notes).
        *   M6: Premium Feature Set 1 (e.g., Full Content Access, Custom Reminders).
        *   M7: Premium Feature Set 2 (e.g., Tracking, Offline Access).
        *   M8: Beta Release / Production Readiness.
    *   **Outcome:** A documented project plan with sprints/phases, milestones, and dependencies visualized.
*   **Resource Allocation:**
    *   **Process:** Assign development team members (Backend Devs, Frontend RN Devs, QA, potentially DevOps support) to specific modules, epics, or sprints based on skills and availability.
    *   **Outcome:** Clear ownership of tasks/modules within the team.
*   **Essential Tooling Setup:**
    *   **Process:** Configure and grant access to necessary tools:
        *   Project Management: Jira/Trello board setup.
        *   Version Control: GitHub/GitLab/Bitbucket repository creation, branch strategy definition (e.g., Gitflow).
        *   Communication: Slack/Teams channel setup.
        *   Documentation: Confluence/Notion space creation for technical docs, ADRs, meeting notes.
    *   **Outcome:** Operational project infrastructure ready for team use.
*   **Development Environment Configuration:**
    *   **Process:** Finalize and distribute the Docker configuration (`docker-compose.yml`) as specified in the architecture. Ensure it includes containers for PHP-FPM, Nginx/Caddy, PostgreSQL, Redis, and Node.js (for frontend tooling). Provide clear instructions for setup and usage. Standardize environment variable management (e.g., `.env` files with templates).
    *   **Outcome:** Developers can quickly and consistently set up identical local development environments.

**4. UI/UX Design Integration (If Applicable)**

If not already completed, this is a critical parallel activity, especially for the React Native frontend.

*   **Process:** Ensure finalized, high-fidelity mockups and prototypes are available and signed off. These must cover:
    *   All key user flows (onboarding, browsing content, setting reminders, taking notes, tracking progress).
    *   Clear visual differentiation between Free and Premium features/content.
    *   User-friendly prompts and flows for upgrading to Premium.
    *   Platform-specific design conventions (iOS/Android).
    *   Creation of a component library/design system for consistency.
*   **Outcome:** Signed-off UI/UX designs and a style guide/component library ready for frontend development.

**5. Infrastructure & Environment Setup**

Prepare the cloud/hosting environments required beyond local development.

*   **Infrastructure Planning:**
    *   **Process:** Based on the Laravel Forge/Vapor choice, plan the specific server sizes/configurations (if using Forge) or review Vapor's serverless scaling model. Estimate initial database (PostgreSQL) and cache (Redis) resource needs (using managed services). Plan for object storage (S3/GCS) for potential offline content or user uploads.
    *   **Outcome:** Documented infrastructure requirements and initial sizing estimates.
*   **Cloud Service Selection:**
    *   **Process:** Confirm choices: Forge/Vapor for hosting, AWS RDS/Managed Postgres provider, AWS ElastiCache/Managed Redis provider, S3/GCS for storage. Set up accounts if necessary.
    *   **Outcome:** Finalized list of cloud services and providers.
*   **Environment Provisioning:**
    *   **Process:** Use Forge/Vapor (or Terraform/Pulumi if more control is desired) to provision the initial Dev, Staging, and Production environments. This includes setting up servers/services, databases, caches, and configuring network access/security groups.
    *   **Outcome:** Functional cloud environments ready for deployment.
*   **Monitoring, Logging, Alerting Setup:**
    *   **Process:** Integrate monitoring tools (e.g., Datadog, Sentry, CloudWatch, Prometheus/Grafana) into the provisioned environments. Configure basic logging aggregation (e.g., Vapor logs, CloudWatch Logs, ELK stack). Set up initial alerts for critical events (e.g., high error rates, server down, high DB connections). Integrate Laravel Telescope for Dev/Staging.
    *   **Outcome:** Foundational observability infrastructure in place.
*   **Backup & Recovery Planning:**
    *   **Process:** Configure automated database backups (e.g., using RDS snapshots or provider tools) with defined retention policies. Document the recovery procedure (e.g., restoring from a snapshot).
    *   **Outcome:** Initial backup strategy implemented and documented.

**6. Security Deep Dive & Planning**

Integrate security rigorously from the start.

*   **Detailed Threat Modeling:**
    *   **Process:** Conduct a threat modeling session (e.g., using STRIDE) based on the detailed technical design, data flows, and features (especially authentication, subscription handling, user notes, potential community features). Identify potential threats and vulnerabilities.
    *   **Outcome:** A documented threat model identifying key risks and potential attack vectors.
*   **Define Specific Technical Security Controls:**
    *   **Process:** Based on the threat model and architecture, define concrete security controls:
        *   **Authentication:** Specify token expiry, refresh token strategy, password complexity rules, brute-force protection (rate limiting).
        *   **Authorization:** Detail the implementation of Laravel Policies/Middleware for checking `subscriptions.status` for premium features. Ensure no business logic relies solely on client-side checks.
        *   **Encryption:** Enforce TLS 1.2+ (HTTPS), confirm database encryption at rest, define secure storage for API keys/secrets (e.g., environment variables injected via Forge/Vapor, potentially a secrets manager).
        *   **Input Validation:** Define strategy (e.g., Laravel Form Requests) for validating all incoming API request data.
        *   **Payment Security:** Reiterate server-side validation of IAP receipts and secure webhook handling (signature verification).
        *   **Dependency Scanning:** Plan for tools like `composer audit`, `npm audit`.
    *   **Outcome:** A checklist or document detailing specific security controls to be implemented and verified.
*   **Security Testing Planning:**
    *   **Process:** Plan for integrating security testing into the development lifecycle:
        *   **SAST:** Configure static analysis tools (e.g., PHPStan, Psalm, ESLint security plugins) to run locally and/or in CI.
        *   **DAST:** Plan for using basic dynamic analysis tools against the Staging environment later in the cycle.
        *   **Penetration Testing:** Allocate budget/time for external penetration testing before major production launches.
    *   **Outcome:** Security testing activities integrated into the project plan and CI/CD strategy.

**7. CI/CD Pipeline Foundation**

Automate the build, test, and deployment process early.

*   **Process:** Set up the initial CI/CD pipeline (using GitHub Actions, GitLab CI, Bitbucket Pipelines, or Jenkins) connected to the version control repository. Configure initial stages:
    *   Trigger on push/merge to `develop` and `main` branches.
    *   Checkout code.
    *   Install dependencies (`composer install`, `npm install`).
    *   Run linters and static analysis (SAST tools).
    *   Run automated tests (Unit, Integration - e.g., `php artisan test`, `npm test`).
    *   Build frontend assets (`npm run build`).
    *   (Initial) Deploy script targeting the Dev/Staging environment using Forge CLI/API or Vapor CLI deployment commands.
*   **Outcome:** A basic, functional CI/CD pipeline that automates testing and deployment to lower environments, ready to be expanded as the project progresses.

**8. Initiation of Development**

With the detailed plans and setup complete, development can commence.

*   **Process:** The development team begins implementation based on the prioritized backlog (User Stories), detailed technical designs, API specifications, and established environment/tooling setup.
*   **Initial Focus:**
    *   Setting up the base Laravel and React Native project structures.
    *   Implementing core database migrations (Users, Plans, Subscriptions, initial Content tables).
    *   Building the Authentication flow (backend API and frontend screens).
    *   Establishing basic API communication between frontend and backend.
    *   Setting up the basic subscription scaffolding (e.g., integrating Laravel Cashier, defining Plan models).
*   **Outcome:** Development kickoff, focusing on foundational components and demonstrating core connectivity.
</file>

<file path="app_documentation/infrastructure_devops_details.md">
Okay, let's create the `infrastructure_devops_details.md` file to provide concrete starting points for Docker, CI/CD, Monitoring, Logging, and Backups.

--- START OF FILE infrastructure_devops_details.md ---

**Huberman App: Infrastructure & DevOps Specifics**

**1. Introduction**

This document provides more specific details and initial configurations for the infrastructure and DevOps components outlined in the project plan and backend TODO list. It includes a concrete example for `docker-compose.yml`, a basic CI/CD pipeline structure using GitHub Actions, and initial recommendations for monitoring, logging, and backup configurations. These are starting points and should be refined based on specific hosting choices (Forge/Vapor) and evolving project needs.

**2. Local Development Environment (`docker-compose.yml`)**

This configuration provides the necessary services for local backend development and testing. Place this file in the project root.

```yaml
# docker-compose.yml
version: '3.8'

services:
  # PHP Service (Application Server)
  app:
    build:
      context: .
      dockerfile: Dockerfile # Assumes a Dockerfile exists for PHP setup
      args:
        UID: "${UID:-1000}" # Pass host user ID for permissions
        GID: "${GID:-1000}" # Pass host group ID for permissions
    container_name: huberman_app_php
    restart: unless-stopped
    tty: true
    environment:
      SERVICE_NAME: app
      SERVICE_TAGS: dev
      # Pass environment variables from .env file
      PHP_IDE_CONFIG: "serverName=Docker" # Example for Xdebug integration
      XDEBUG_MODE: "${XDEBUG_MODE:-off}" # Control Xdebug mode via .env
      XDEBUG_CONFIG: "client_host=host.docker.internal" # Xdebug config for Docker Desktop
    working_dir: /var/www/html
    volumes:
      - ./:/var/www/html # Mount application code
      # Persist bash history (optional)
      # - ./docker-data/bashhistory:/root/.bash_history_docker
    networks:
      - huberman_app_network
    depends_on:
      - db
      - redis

  # Web Server (Nginx)
  webserver:
    image: nginx:alpine
    container_name: huberman_app_nginx
    restart: unless-stopped
    tty: true
    ports:
      - "${APP_PORT:-8000}:80" # Expose app port from .env or default 8000
    volumes:
      - ./:/var/www/html
      - ./docker/nginx/conf.d/:/etc/nginx/conf.d/ # Mount custom Nginx config
    networks:
      - huberman_app_network
    depends_on:
      - app

  # Database Server (PostgreSQL)
  db:
    image: postgres:16-alpine
    container_name: huberman_app_db
    restart: unless-stopped
    tty: true
    ports:
      - "${DB_PORT:-5432}:5432" # Expose DB port from .env or default 5432
    environment:
      POSTGRES_DB: "${DB_DATABASE:-huberman_db}"
      POSTGRES_USER: "${DB_USERNAME:-sail}" # Use Sail defaults or .env values
      POSTGRES_PASSWORD: "${DB_PASSWORD:-password}"
      POSTGRES_HOST_AUTH_METHOD: "trust" # For easy local connections, change if needed
    volumes:
      - huberman_db_data:/var/lib/postgresql/data # Persistent DB data
      # Optional: Mount init scripts
      # - ./docker/db/init:/docker-entrypoint-initdb.d
    networks:
      - huberman_app_network
    healthcheck: # Basic healthcheck
      test: ["CMD", "pg_isready", "-U", "${DB_USERNAME:-sail}", "-d", "${DB_DATABASE:-huberman_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Cache Server (Redis)
  redis:
    image: redis:7-alpine
    container_name: huberman_app_redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379" # Expose Redis port from .env or default 6379
    volumes:
      - huberman_redis_data:/data # Persistent Redis data
    networks:
      - huberman_app_network
    healthcheck: # Basic healthcheck
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

# Define Networks
networks:
  huberman_app_network:
    driver: bridge

# Define Volumes
volumes:
  huberman_db_data:
    driver: local
  huberman_redis_data:
    driver: local

```

**Notes on `docker-compose.yml`:**

*   **`Dockerfile`:** This setup assumes a `Dockerfile` in the root for the `app` service to handle PHP setup, installing extensions (like `pdo_pgsql`, `pgsql`, `redis`, `bcmath`, `pcntl`, `gd`), composer installation, and potentially setting user permissions correctly. You'll need to create this file.
*   **`.env` Integration:** It relies heavily on your project's `.env` file for configuration (ports, DB credentials, etc.). Ensure your `.env` file is present and correctly configured. Use `.env.example` as a template.
*   **UID/GID:** Passing host user/group IDs helps avoid permission issues with mounted volumes, especially file creation by PHP.
*   **Nginx Config:** Requires a custom Nginx configuration file (e.g., `docker/nginx/conf.d/app.conf`) to proxy requests to the `app` service (PHP-FPM on port 9000).
*   **Xdebug:** Includes basic Xdebug configuration for easier debugging. Control via `XDEBUG_MODE` in `.env`.
*   **Healthchecks:** Basic checks added to ensure services are responsive.

**3. CI/CD Pipeline Definition (GitHub Actions Example)**

This provides a basic pipeline structure for running tests and static analysis on pushes/PRs to `main` and `develop`. Place this in `.github/workflows/ci.yml`.

```yaml
# .github/workflows/ci.yml
name: Laravel CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    services: # Start dependent services for testing
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: huberman_test_db
          POSTGRES_USER: sail
          POSTGRES_PASSWORD: password
          POSTGRES_HOST_AUTH_METHOD: trust # Easiest for CI connection
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2' # Match project version
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, pgsql, pdo_pgsql, redis, bcmath, gd # Match required extensions
        tools: composer:v2
        coverage: none # Set to pcov or xdebug if generating coverage reports

    - name: Setup Node.js (Optional, if needed for frontend assets/tools)
      uses: actions/setup-node@v4
      with:
        node-version: '20.x' # Match project version
        cache: 'npm'

    - name: Get Composer Cache Directory
      id: composer-cache
      run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

    - name: Cache Composer Dependencies
      uses: actions/cache@v4
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-composer-

    - name: Install Composer Dependencies
      run: composer install --no-progress --prefer-dist --optimize-autoloader

    - name: Prepare Laravel Environment
      run: |
        cp .env.example .env
        sed -i 's/DB_HOST=127.0.0.1/DB_HOST=127.0.0.1/g' .env # Ensure localhost for service access
        sed -i 's/DB_PORT=5432/DB_PORT=5432/g' .env
        sed -i 's/DB_DATABASE=laravel/DB_DATABASE=huberman_test_db/g' .env
        sed -i 's/DB_USERNAME=root/DB_USERNAME=sail/g' .env
        sed -i 's/DB_PASSWORD=/DB_PASSWORD=password/g' .env
        sed -i 's/REDIS_HOST=127.0.0.1/REDIS_HOST=127.0.0.1/g' .env
        sed -i 's/REDIS_PORT=6379/REDIS_PORT=6379/g' .env
        php artisan key:generate

    - name: Wait for Services (Postgres)
      run: |
        echo "Waiting for PostgreSQL to start..."
        until pg_isready -h 127.0.0.1 -p 5432 -U sail; do
          sleep 1
        done
        echo "PostgreSQL started!"

    - name: Run Database Migrations
      run: php artisan migrate --force # Use --force to run without prompt in CI

    - name: Run Linters (Pint)
      run: ./vendor/bin/pint --test

    - name: Run Static Analysis (PHPStan)
      run: ./vendor/bin/phpstan analyse --memory-limit=2G

    - name: Run Tests (PHPUnit)
      run: php artisan test

    # Optional: NPM Steps if needed for backend assets
    # - name: Install NPM Dependencies
    #   run: npm ci
    # - name: Build Assets
    #   run: npm run build
```

**Notes on `ci.yml`:**

*   **Services:** Uses GitHub Actions `services` to run PostgreSQL and Redis alongside the main job container, making them accessible on `127.0.0.1`.
*   **Environment:** Copies `.env.example` and modifies it specifically for the CI environment database/redis services.
*   **Dependencies:** Caches Composer dependencies for faster runs.
*   **Tests:** Runs Pint, PHPStan, and PHPUnit. Add other checks as needed.
*   **Deployment:** Deployment steps (Forge, Vapor, etc.) are *not* included here but would typically be added as separate jobs triggered manually or on merges to `main`.

**4. Monitoring, Logging & Backup Specifics (Initial Recommendations)**

These are starting points, adjust based on provider capabilities (Forge/Vapor often provide defaults) and application sensitivity.

*   **Monitoring:**
    *   **Key Metrics:**
        *   System: CPU (<80%), Memory (<85%), Disk Space (<90% full).
        *   Application: 5xx Error Rate (<1%), Average API Response Time (<500ms), Requests Per Minute.
        *   Queue: `jobs` table count (< 100 pending for > 5 mins), `failed_jobs` count (> 0).
    *   **Tools:** Leverage Forge/Vapor built-in monitoring. Consider Sentry (or Flare for Laravel) for error tracking & basic performance monitoring. For more depth, look at Datadog or New Relic later.

*   **Logging:**
    *   **Level:** Production: `WARNING` or `ERROR`. Staging/Dev: `DEBUG`.
    *   **Channel (Laravel `config/logging.php`):**
        *   Use the `stack` channel.
        *   Include `daily` file logging (`path/to/storage/logs/laravel.log`).
        *   Integrate a log aggregation service (if using Forge/Vapor check their recommendations, otherwise Papertrail, Logtail, Datadog Logs). Configure a `syslog` or dedicated driver pointing to the service.
    *   **Format:** Configure the `stack` channel or aggregation channel to use a `Monolog\Formatter\JsonFormatter` for structured logging.
    *   **Key Events to Log (Contextual):** User registration/login failures, password resets, subscription webhook received (start/end/status), subscription state changes, job processing start/end/failure, critical errors caught in exception handler, manual logging for complex workflow steps. **AVOID LOGGING SENSITIVE DATA.**

*   **Alerting (Initial Critical Alerts):**
    *   Configure via monitoring tool (Forge/Vapor/Datadog/Sentry):
        *   5xx Error Rate > 2% over 5 minutes.
        *   Server/Instance Unreachable.
        *   CPU or Memory > 90% for 5 minutes.
        *   Disk Space > 95% full.
        *   Failed Jobs Count increases significantly or > X total.
        *   Queue length grows consistently without processing.
        *   Sentry/Flare reports a spike in new or existing errors.

*   **Backups (Database - PostgreSQL):**
    *   **Mechanism:** **Strongly recommend** using the managed database provider's automated snapshot feature (e.g., AWS RDS, Google Cloud SQL, DigitalOcean Managed DB).
    *   **Frequency:** Daily automated snapshots.
    *   **Retention:** Start with **7 days**. Evaluate if longer retention (e.g., 14-30 days) is needed based on recovery requirements.
    *   **Verification:** **Schedule and perform quarterly test restores** of a recent backup to a temporary database instance to confirm integrity and practice the recovery procedure. Document the process.
    *   **Location:** Ensure backups are stored geographically separate (usually handled by cloud providers).

**5. Conclusion**

These concrete configurations provide a solid starting point for the Huberman App's infrastructure and DevOps practices. They establish a consistent local development environment, automate basic testing and validation via CI, and outline initial strategies for observing and protecting the application in deployed environments. Remember to version control `docker-compose.yml`, `Dockerfile`, `nginx.conf`, and `.github/workflows/ci.yml`, and adapt these configurations as the project evolves and specific hosting choices are finalized.
</file>

<file path="app_documentation/openapi_backend.yaml">
openapi: 3.0.0
info:
  title: Huberman App API
  version: 1.0.0
  description: API documentation for the Huberman App backend.
servers:
  - url: http://localhost:8000/api/v1
    description: Local development server
tags:
  - name: Authentication
    description: User authentication and registration
  - name: UserManagement
    description: User profile management
  - name: SubscriptionBilling
    description: Subscription plans and user subscriptions
  - name: ContentManagement
    description: Episodes, protocols, and summaries
  - name: NotesService
    description: User notes
  - name: ProtocolEngine
    description: Protocol reminders and tracking
  - name: Webhooks
    description: Webhook endpoints for third-party services

paths:
  /register:
    post:
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthSuccessResponse'
        '422':
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ValidationError'
  /login:
    post:
      summary: Log in a user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthSuccessResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UnauthorizedError'
        '422':
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ValidationError'
  /logout:
    post:
      summary: Log out the authenticated user
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User logged out successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Logged out successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UnauthorizedError'

  /user/profile:
    get:
      summary: Get the authenticated user's profile
      tags:
        - UserManagement
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UnauthorizedError'
    put:
      summary: Update the authenticated user's profile
      tags:
        - UserManagement
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserProfileRequest'
      responses:
        '200':
          description: User profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UnauthorizedError'
        '422':
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /plans:
    get:
      summary: Get a list of available subscription plans
      tags:
        - SubscriptionBilling
      responses:
        '200':
          description: List of plans
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Plan'
  /user/subscription:
    get:
      summary: Get the authenticated user's subscription status
      tags:
        - SubscriptionBilling
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User subscription details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UnauthorizedError'

  /episodes:
    get:
      summary: Get a list of episodes
      tags:
        - ContentManagement
      responses:
        '200':
          description: List of episodes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Episode'
  /episodes/{id}:
    get:
      summary: Get episode details by ID
      tags:
        - ContentManagement
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the episode to retrieve
      responses:
        '200':
          description: Episode details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Episode'
        '404':
          description: Episode not found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/NotFound'
  /protocols:
    get:
      summary: Get a list of protocols
      tags:
        - ContentManagement
      responses:
        '200':
          description: List of protocols (content may vary based on subscription status)
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Protocol'
  /protocols/{id}:
    get:
      summary: Get protocol details by ID
      tags:
        - ContentManagement
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the protocol to retrieve
      responses:
        '200':
          description: Protocol details (content may vary based on subscription status)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Protocol'
        '404':
          description: Protocol not found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/NotFound'
  /summaries:
    get:
      summary: Get a list of summaries
      tags:
        - ContentManagement
      parameters:
        - name: episode_id
          in: query
          required: false
          schema:
            type: integer
          description: Filter summaries by episode ID
        - name: protocol_id
          in: query
          required: false
          schema:
            type: integer
          description: Filter summaries by protocol ID
      responses:
        '200':
          description: List of summaries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Summary'

  /notes:
    get:
      summary: Get a list of the authenticated user's notes
      tags:
        - NotesService
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of notes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Note'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UnauthorizedError'
    post:
      summary: Create a new note
      tags:
        - NotesService
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNoteRequest'
      responses:
        '201':
          description: Note created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Forbidden (e.g., premium limit reached)
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ForbiddenError'
        '422':
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ValidationError'
  /notes/{id}:
    get:
      summary: Get a specific note by ID
      tags:
        - NotesService
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the note to retrieve
      responses:
        '200':
          description: Note details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Forbidden (user does not own the note)
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ForbiddenError'
        '404':
          description: Note not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
    put:
      summary: Update a specific note by ID
      tags:
        - NotesService
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the note to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateNoteRequest'
      responses:
        '200':
          description: Note updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Forbidden (user does not own the note)
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ForbiddenError'
        '404':
          description: Note not found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/NotFound'
        '422':
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
    delete:
      summary: Delete a specific note by ID
      tags:
        - NotesService
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the note to delete
      responses:
        '204':
          description: Note deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Forbidden (user does not own the note)
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ForbiddenError'
        '404':
          description: Note not found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/NotFound'
  /episodes/{id}/public-notes:
    get:
      summary: Get public notes for a specific episode
      tags:
        - NotesService
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the episode to retrieve public notes for
      responses:
        '200':
          description: List of public notes for the episode
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Note'
        '404':
          description: Episode not found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/NotFound'

  /reminders:
    get:
      summary: Get a list of the authenticated user's reminders (Premium)
      tags:
        - ProtocolEngine
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of reminders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reminder'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Forbidden (requires Premium)
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ForbiddenError'
    post:
      summary: Create a new reminder (Premium)
      tags:
        - ProtocolEngine
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreReminderRequest'
      responses:
        '201':
          description: Reminder created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reminder'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Forbidden (requires Premium)
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ForbiddenError'
        '422':
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ValidationError'
  /reminders/{id}:
    get:
      summary: Get a specific reminder by ID (Premium)
      tags:
        - ProtocolEngine
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the reminder to retrieve
      responses:
        '200':
          description: Reminder details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reminder'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Forbidden (requires Premium or user does not own reminder)
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ForbiddenError'
        '404':
          description: Reminder not found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/NotFound'
    put:
      summary: Update a specific reminder by ID (Premium)
      tags:
        - ProtocolEngine
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the reminder to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateReminderRequest'
      responses:
        '200':
          description: Reminder updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reminder'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Forbidden (requires Premium or user does not own reminder)
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ForbiddenError'
        '404':
          description: Reminder not found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/NotFound'
        '422':
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
    delete:
      summary: Delete a specific reminder by ID (Premium)
      tags:
        - ProtocolEngine
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the reminder to delete
      responses:
        '204':
          description: Reminder deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Forbidden (requires Premium or user does not own reminder)
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ForbiddenError'
        '404':
          description: Reminder not found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/NotFound'
  /tracking/log:
    post:
      summary: Log adherence to a protocol step (Premium)
      tags:
        - ProtocolEngine
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreTrackingLogRequest'
      responses:
        '201':
          description: Tracking log created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackingLog'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Forbidden (requires Premium)
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ForbiddenError'
        '422':
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ValidationError'
  /tracking/summary:
    get:
      summary: Get the authenticated user's protocol tracking summary (Premium)
      tags:
        - ProtocolEngine
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Protocol tracking summary
          content:
            application/json:
              schema:
                type: object # Define a specific schema for tracking summary if needed
                properties:
                  # Example properties - adjust based on actual implementation
                  total_logs:
                    type: integer
                    example: 100
                  streak:
                    type: integer
                    example: 7
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Forbidden (requires Premium)
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ForbiddenError'

  /webhooks/stripe:
    post:
      summary: Stripe webhook endpoint
      tags:
        - Webhooks
      description: Receives webhook events from Stripe. Security is via signature verification.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object # Stripe webhook payload structure
      responses:
        '200':
          description: Webhook received successfully
        '400':
          description: Invalid request or signature
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /webhooks/apple:
    post:
      summary: Apple App Store server notifications webhook endpoint
      tags:
        - Webhooks
      description: Receives server notifications from Apple App Store. Security is via signature verification.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object # Apple server notification payload structure
      responses:
        '200':
          description: Webhook received successfully
        '400':
          description: Invalid request or signature
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /webhooks/google:
    post:
      summary: Google Play Store real-time developer notifications webhook endpoint
      tags:
        - Webhooks
      description: Receives real-time developer notifications from Google Play Store. Security is via signature verification.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object # Google Play Store notification payload structure
      responses:
        '200':
          description: Webhook received successfully
        '400':
          description: Invalid request or signature
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    RegisterRequest:
      type: object
      properties:
        name:
          type: string
          description: User's name
          example: John Doe
        email:
          type: string
          format: email
          description: User's email address
          example: john.doe@example.com
        password:
          type: string
          format: password
          description: User's password
          example: password123
        password_confirmation:
          type: string
          format: password
          description: Password confirmation
          example: password123
      required:
        - name
        - email
        - password
        - password_confirmation
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          description: User's email address
          example: john.doe@example.com
        password:
          type: string
          format: password
          description: User's password
          example: password123
      required:
        - email
        - password
    AuthSuccessResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        token:
          type: string
          description: Authentication token
          example: 1|abcdefghijklmnopqrstuvwxyz1234567890
    User:
      type: object
      properties:
        id:
          type: integer
          description: User ID
          example: 1
        name:
          type: string
          description: User's name
          example: John Doe
        email:
          type: string
          format: email
          description: User's email address
          example: john.doe@example.com
        created_at:
          type: string
          format: date-time
          description: User creation timestamp
        updated_at:
          type: string
          format: date-time
          description: User update timestamp
    UpdateUserProfileRequest:
      type: object
      properties:
        name:
          type: string
          description: User's name
          example: Jane Doe
        email:
          type: string
          format: email
          description: User's email address
          example: jane.doe@example.com
    Plan:
      type: object
      properties:
        id:
          type: integer
          description: Plan ID
          example: 1
        name:
          type: string
          description: Plan name
          example: Premium
        stripe_price_id:
          type: string
          description: Stripe price ID
          example: price_12345
        apple_product_id:
          type: string
          description: Apple App Store product ID
          example: com.example.premium
        google_product_id:
          type: string
          description: Google Play Store product ID
          example: premium_monthly
        created_at:
          type: string
          format: date-time
          description: Plan creation timestamp
        updated_at:
          type: string
          format: date-time
          description: Plan update timestamp
    Subscription:
      type: object
      properties:
        id:
          type: integer
          description: Subscription ID
          example: 1
        user_id:
          type: integer
          description: User ID
          example: 1
        plan_id:
          type: integer
          description: Plan ID
          example: 1
        stripe_subscription_id:
          type: string
          nullable: true
          description: Stripe subscription ID
          example: sub_12345
        apple_subscription_id:
          type: string
          nullable: true
          description: Apple App Store subscription ID
          example: 1234567890
        google_subscription_id:
          type: string
          nullable: true
          description: Google Play Store subscription ID
          example: abcdefg
        active:
          type: boolean
          description: Whether the subscription is active
          example: true
        renews_at:
          type: string
          format: date-time
          nullable: true
          description: Timestamp when the subscription renews
        ends_at:
          type: string
          format: date-time
          nullable: true
          description: Timestamp when the subscription ends
        created_at:
          type: string
          format: date-time
          description: Subscription creation timestamp
        updated_at:
          type: string
          format: date-time
          description: Subscription update timestamp
    Episode:
      type: object
      properties:
        id:
          type: integer
          description: Episode ID
          example: 1
        title:
          type: string
          description: Episode title
          example: The Science of Sleep
        description:
          type: string
          description: Episode description
          example: Dr. Andrew Huberman discusses the science of sleep...
        video_url:
          type: string
          format: url
          description: URL to the episode video
          example: https://www.youtube.com/watch?v=nm1TxQ9IsPQ
        published_date:
          type: string
          format: date
          description: Date the episode was published
          example: 2023-01-15
        created_at:
          type: string
          format: date-time
          description: Episode creation timestamp
        updated_at:
          type: string
          format: date-time
          description: Episode update timestamp
    Protocol:
      type: object
      properties:
        id:
          type: integer
          description: Protocol ID
          example: 1
        title:
          type: string
          description: Protocol title
          example: Morning Sunlight Exposure
        description:
          type: string
          description: Description of the protocol
          example: Expose your eyes to sunlight within 30 minutes of waking...
        is_free:
          type: boolean
          description: Indicates if the protocol is free or requires premium
          example: true
        created_at:
          type: string
          format: date-time
          description: Protocol creation timestamp
        updated_at:
          type: string
          format: date-time
          description: Protocol update timestamp
    Summary:
      type: object
      properties:
        id:
          type: integer
          description: Summary ID
          example: 1
        episode_id:
          type: integer
          nullable: true
          description: Associated episode ID
          example: 1
        protocol_id:
          type: integer
          nullable: true
          description: Associated protocol ID
          example: 1
        content:
          type: string
          description: Summary content
          example: Key takeaways from the episode/protocol...
        created_at:
          type: string
          format: date-time
          description: Summary creation timestamp
        updated_at:
          type: string
          format: date-time
          description: Summary update timestamp
    Note:
      type: object
      properties:
        id:
          type: integer
          description: Note ID
          example: 1
        user_id:
          type: integer
          description: User ID
          example: 1
        episode_id:
          type: integer
          nullable: true
          description: Associated episode ID
          example: 1
        protocol_id:
          type: integer
          nullable: true
          description: Associated protocol ID
          example: 1
        content:
          type: string
          description: Note content
          example: My thoughts on this topic...
        is_public:
          type: boolean
          description: Indicates if the note is public
          example: false
        created_at:
          type: string
          format: date-time
          description: Note creation timestamp
        updated_at:
          type: string
          format: date-time
          description: Note update timestamp
    CreateNoteRequest:
      type: object
      properties:
        episode_id:
          type: integer
          nullable: true
          description: Associated episode ID
          example: 1
        protocol_id:
          type: integer
          nullable: true
          description: Associated protocol ID
          example: 1
        content:
          type: string
          description: Note content
          example: My thoughts on this topic...
        is_public:
          type: boolean
          description: Indicates if the note is public
          example: false
      required:
        - content
    UpdateNoteRequest:
      type: object
      properties:
        content:
          type: string
          description: Note content
          example: Updated thoughts on this topic...
        is_public:
          type: boolean
          description: Indicates if the note is public
          example: true
      required:
        - content
    Reminder:
      type: object
      properties:
        id:
          type: integer
          description: Reminder ID
          example: 1
        user_id:
          type: integer
          description: User ID
          example: 1
        protocol_id:
          type: integer
          description: Associated protocol ID
          example: 1
        reminder_time:
          type: string
          format: date-time
          description: Timestamp for the reminder
        created_at:
          type: string
          format: date-time
          description: Reminder creation timestamp
        updated_at:
          type: string
          format: date-time
          description: Reminder update timestamp
    TrackingLog:
      type: object
      properties:
        id:
          type: integer
          description: Tracking log ID
          example: 1
        user_id:
          type: integer
          description: User ID
          example: 1
        protocol_id:
          type: integer
          description: Associated protocol ID
          example: 1
        logged_at:
          type: string
          format: date-time
          description: Timestamp when adherence was logged
        created_at:
          type: string
          format: date-time
          description: Tracking log creation timestamp
        updated_at:
          type: string
          format: date-time
          description: Tracking log update timestamp
    StoreReminderRequest:
      type: object
      properties:
        protocol_id:
          type: integer
          description: Associated protocol ID
          example: 1
        reminder_time:
          type: string
          format: date-time
          description: Timestamp for the reminder
      required:
        - protocol_id
        - reminder_time
    UpdateReminderRequest:
      type: object
      properties:
        reminder_time:
          type: string
          format: date-time
          description: Timestamp for the reminder
      required:
        - reminder_time
    StoreTrackingLogRequest:
      type: object
      properties:
        protocol_id:
          type: integer
          description: Associated protocol ID
          example: 1
        logged_at:
          type: string
          format: date-time
          description: Timestamp when adherence was logged
      required:
        - protocol_id
        - logged_at
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: Sanctum
  responses:
    UnauthorizedError:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    ValidationError:
      description: Validation errors
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationErrorResponse'
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: General error message.
          example: An error occurred.
    ValidationErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: General error message for validation failures.
          example: The given data was invalid.
        errors:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
          description: Field-specific validation errors.
          example:
            email:
              - The email field is required.
            password:
              - The password field is required.
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    ForbiddenError:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

</final_file_content>

IMPORTANT: For any future changes to this file, use the final_file_content shown above as your reference. This content reflects the current state of the file, including any auto-formatting (e.g., if you used single quotes but the formatter converted them to double quotes). Always base your SEARCH/REPLACE operations on this final version to ensure accuracy.

<environment_details>
# VSCode Visible Files
app_documentation/openapi.yaml

# VSCode Open Tabs
../../Library/Application Support/Code/User/settings.json
docker-compose.yml
config/sanctum.php
.gitignore
app/Modules/Authentication/Providers/RouteServiceProvider.php
app/Modules/UserManagement/Providers/RouteServiceProvider.php
app/Modules/NotesService/Providers/RouteServiceProvider.php
app/Modules/ProtocolEngine/Providers/RouteServiceProvider.php
app_documentation/route_refactor_todo.md
database/migrations/2025_04_24_205454_create_plans_table.php
database/migrations/2025_04_24_205510_create_subscriptions_table.php
tests/Unit/PlanTest.php
app/Modules/SubscriptionBilling/Models/Plan.php
config/cashier.php
app/Modules/SubscriptionBilling/Contracts/SubscriptionServiceInterface.php
app/Modules/SubscriptionBilling/Providers/RouteServiceProvider.php
database/seeders/PlanSeeder.php
app/Modules/SubscriptionBilling/Http/Resources/PlanResource.php
tests/Feature/SubscriptionBilling/PlanTest.php
app/Modules/SubscriptionBilling/Http/Resources/SubscriptionResource.php
app/Modules/SubscriptionBilling/Http/Controllers/SubscriptionController.php
tests/Feature/SubscriptionBilling/UserSubscriptionTest.php
app/Http/Middleware/VerifyStripeWebhookSignature.php
tests/Feature/SubscriptionBilling/WebhookSignatureTest.php
database/migrations/2025_04_24_211846_create_episodes_table.php
database/migrations/2025_04_24_211928_create_protocols_table.php
database/migrations/2025_04_24_212127_create_summaries_table.php
database/migrations/2025_04_24_212153_create_episode_protocol_table.php
app/Modules/ContentManagement/Models/Summary.php
app/Modules/ContentManagement/Models/Episode.php
tests/Unit/ProtocolTest.php
tests/Unit/SummaryTest.php
tests/Unit/EpisodeTest.php
database/seeders/EpisodeSeeder.php
database/seeders/SummarySeeder.php
database/seeders/EpisodeProtocolSeeder.php
app/Modules/ContentManagement/Providers/RouteServiceProvider.php
app/Modules/ContentManagement/Http/Resources/EpisodeResource.php
app/Modules/ContentManagement/Http/Resources/SummaryResource.php
tests/Feature/ContentManagement/EpisodeTest.php
app/Modules/ContentManagement/Http/Controllers/SummaryController.php
tests/Feature/ContentManagement/SummaryTest.php
tests/Unit/SubscriptionServiceTest.php
app/Http/Middleware/CheckPremiumAccess.php
tests/Feature/Middleware/CheckPremiumAccessTest.php
tests/Feature/SubscriptionBilling/WebhookCheckoutSessionCompletedTest.php
database/migrations/2025_04_24_195725_add_is_free_to_protocols_table.php
database/factories/ProtocolFactory.php
database/seeders/ProtocolSeeder.php
database/seeders/DatabaseSeeder.php
app/Modules/ContentManagement/Http/Resources/ProtocolResource.php
app/Modules/ContentManagement/Http/Controllers/ProtocolController.php
app/Modules/ContentManagement/Contracts/ContentServiceInterface.php
app/Modules/ContentManagement/Services/ContentService.php
app/Notifications/ResetPasswordNotification.php
app/Modules/Authentication/Http/Requests/ForgotPasswordRequest.php
app/Modules/Authentication/Http/Requests/ResetPasswordRequest.php
app/Modules/Authentication/Http/Controllers/ForgotPasswordController.php
app/Modules/Authentication/Http/Controllers/NewPasswordController.php
tests/Feature/Authentication/RateLimitTest.php
bootstrap/app.php
bootstrap/providers.php
app/Modules/SubscriptionBilling/routes/api.php
app_documentation/api_design_documentation.md
app_documentation/openapi.yaml
app/Modules/SubscriptionBilling/Contracts/AppStoreServerApiClientInterface.php
app/Modules/SubscriptionBilling/Services/AppStoreServerApiClient.php
app/Modules/SubscriptionBilling/Providers/SubscriptionBillingServiceProvider.php
app/Listeners/SubscriptionRenewalFailedListener.php
app/Listeners/SubscriptionExpiredListener.php
tests/Unit/SubscriptionBilling/SubscriptionRenewalFailedTest.php
tests/Unit/SubscriptionBilling/SubscriptionExpiredTest.php
tests/Unit/SubscriptionBilling/GooglePubSubTest.php
app/Listeners/ClearUserEntitlementCache.php
tests/Unit/ClearUserEntitlementCacheTest.php
app_documentation/app_description.md
app/Modules/ContentManagement/Models/Protocol.php
app/Console/Commands/SendFoundationalReminders.php
tests/Feature/SendFoundationalRemindersTest.php
tests/Feature/ContentManagement/ProtocolTest.php
database/factories/UserReminderFactory.php
tests/Feature/Policies/ReminderPolicyTest.php
app/Modules/ProtocolEngine/Http/Requests/StoreReminderRequest.php
app/Modules/ProtocolEngine/Contracts/ReminderServiceInterface.php
app/Modules/ProtocolEngine/Http/Resources/ReminderResource.php
app/Modules/ProtocolEngine/Policies/ReminderPolicy.php
app/Modules/ProtocolEngine/routes/api.php
app/Modules/ProtocolEngine/Http/Requests/UpdateReminderRequest.php
tests/Feature/ProtocolEngine/ReminderApiTest.php
app/Modules/ProtocolEngine/Http/Controllers/ReminderController.php
app/Modules/ProtocolEngine/Services/ReminderService.php
tests/Unit/Console/Commands/SendDueRemindersTest.php
app/Console/Kernel.php
app/Console/Commands/SendDueReminders.php
app/Notifications/ProtocolReminder.php
tests/Unit/Jobs/SendProtocolReminderNotificationTest.php
app/Jobs/SendProtocolReminderNotification.php
database/migrations/2025_04_30_104700_create_user_devices_table.php
tests/Unit/UserDeviceTest.php
app/Modules/UserManagement/Models/User.php
app/Modules/UserManagement/Models/UserDevice.php
app/Modules/UserManagement/Http/Requests/UpdateDeviceTokenRequest.php
app/Modules/UserManagement/Http/Controllers/UserController.php
app/Modules/UserManagement/routes/api.php
database/migrations/2025_04_30_074905_create_notes_table.php
tests/Unit/NoteTest.php
tests/Unit/NotePolicyTest.php
app/Modules/NotesService/Contracts/NoteServiceInterface.php
app/Modules/NotesService/Providers/NotesServiceProvider.php
tests/Unit/NoteServiceTest.php
app/Modules/Authentication/routes/api.php
app/Modules/Authentication/Http/Requests/CreateUserRequest.php
app/Modules/Authentication/Http/Controllers/AuthController.php
app/Modules/NotesService/Http/Requests/CreateNoteRequest.php
app/Modules/NotesService/Http/Requests/UpdateNoteRequest.php
app/Modules/ContentManagement/Http/Controllers/EpisodeController.php
app/Modules/ContentManagement/routes/api.php
tests/Feature/NotesApiTest.php
app/Modules/NotesService/Http/Controllers/NoteController.php
app/Modules/NotesService/routes/api.php
app/Modules/TrackingService/Models/TrackingLog.php
tests/Unit/TrackingService/TrackingLogTest.php
app/Modules/TrackingService/Providers/TrackingServiceProvider.php
app/Modules/TrackingService/Providers/RouteServiceProvider.php
config/app.php
app/Modules/TrackingService/routes/api.php
app/Modules/TrackingService/Policies/TrackingLogPolicy.php
tests/Feature/Policies/TrackingLogPolicyTest.php
app/Modules/TrackingService/Contracts/TrackingServiceInterface.php
app/Modules/TrackingService/Services/TrackingService.php
tests/Unit/TrackingService/TrackingServiceTest.php
tests/Feature/TrackingService/TrackingLogAdherenceTest.php
app/Modules/TrackingService/Http/Requests/StoreTrackingLogRequest.php
app/Modules/TrackingService/Http/Controllers/TrackingController.php
app/OfflineData.php
database/migrations/2025_05_01_092540_create_offline_data_table.php
database/factories/OfflineDataFactory.php
tests/Unit/OfflineDataTest.php
app/Modules/NotesService/Models/NoteCategory.php
app/Modules/NotesService/Models/NoteTag.php
database/migrations/2025_05_01_100000_create_note_categories_table.php
database/migrations/2025_05_01_100001_create_note_tags_table.php
database/migrations/2025_05_01_100002_create_note_category_pivot_table.php
database/migrations/2023_05_01_100003_create_note_tag_pivot_table.php
database/migrations/2025_05_01_100003_create_note_tag_pivot_table.php
app/Models/NoteTag.php
app/Http/Controllers/NoteTagController.php
tests/Feature/NoteTagTest.php
database/factories/NoteTagFactory.php
app/Http/Controllers/NoteCategoryController.php
tests/Feature/NoteCategoryTest.php
app/Http/Controllers/NoteController.php
app/Services/RoutineServiceInterface.php
app/Services/RoutineService.php
app/Http/Controllers/RoutineController.php
app/Services/NoteServiceInterface.php
database/migrations/2025_05_01_100004_create_user_protocol_tracking_table.php
app_documentation/backend_implementation_todo.md
app/Policies/OfflineDataPolicy.php
tests/Unit/OfflineDataPolicyTest.php
app/Services/OfflineDataServiceInterface.php
app/Services/OfflineDataService.php
app/Providers/AppServiceProvider.php
tests/Unit/OfflineDataServiceTest.php
app/Http/Requests/SyncOfflineDataRequest.php
app/Http/Controllers/OfflineDataController.php
routes/api.php
tests/Feature/OfflineDataApiTest.php
app/Policies/NoteCategoryPolicy.php
app/Policies/NoteTagPolicy.php
tests/Unit/NoteCategoryPolicyTest.php
tests/Unit/NoteCategoryTest.php
tests/Unit/NoteTagPolicyTest.php
app_documentation/frontend_implementation_todo.md
app/Services/NoteService.php
database/migrations/2025_05_01_000000_create_routines_table.php
app/Policies/RoutinePolicy.php
app/Models/Routine.php
app/Models/RoutineStep.php
database/migrations/2025_05_01_000001_create_routine_steps_table.php
database/factories/RoutineStepFactory.php
tests/Unit/RoutineTest.php
tests/Unit/RoutinePolicyTest.php
tests/Unit/RoutineStepTest.php
database/factories/RoutineFactory.php
tests/Feature/RoutineApiTest.php
app/Http/Requests/StoreRoutineRequest.php
app/Http/Requests/UpdateRoutineRequest.php
app/Providers/AuthServiceProvider.php
database/migrations/2025_05_01_100004_create_posts_table.php
database/migrations/2025_05_01_100005_create_comments_table.php
app/Policies/PostPolicy.php
app/Models/Post.php
app/Models/Comment.php
app/Services/PostService.php
app/Http/Requests/StorePostRequest.php
app/Http/Controllers/PostController.php
app/Http/Requests/StoreCommentRequest.php
tests/Feature/Authentication/RegistrationTest.php
app/Modules/Authentication/Http/Requests/RegisterRequest.php
composer.json
app/Providers/EventServiceProvider.php
app/Providers/RouteServiceProvider.php
app/Policies/NotePolicy.php
database/migrations/2025_04_30_110629_add_is_public_to_notes_table.php
app/Modules/NotesService/Models/Note.php
app/Modules/NotesService/Services/NoteService.php
database/migrations/2025_04_30_071413_create_user_reminders_table.php
tests/Unit/UserReminderTest.php
app/Modules/ProtocolEngine/Models/UserReminder.php
tests/Feature/CheckExpiredSubscriptionsTest.php
repomix.config.json
app/Console/Commands/CheckExpiredSubscriptions.php
tests/Unit/CheckExpiredSubscriptionsTest.php
app/Modules/SubscriptionBilling/Http/Controllers/WebhookController.php
config/services.php
.env
tests/Feature/SubscriptionBilling/WebhookTest.php
app/Modules/SubscriptionBilling/Services/AppleSubscriptionService.php
tests/Unit/SubscriptionBilling/AppleSubscriptionServiceTest.php
phpunit.xml
app/Events/SubscriptionExpired.php
app/Modules/SubscriptionBilling/Models/Subscription.php
tests/Unit/SubscriptionTest.php
app/Modules/SubscriptionBilling/Services/SubscriptionService.php
app/Events/SubscriptionSubscribed.php
app/Events/SubscriptionRenewed.php
tests/Feature/SubscriptionBilling/WebhookAppleTest.php
tests/Unit/UserTest.php
tests/Feature/Authentication/LoginTest.php
tests/Feature/UserManagement/UserProfileTest.php
app/Modules/Authentication/Http/Requests/LoginRequest.php
tests/Feature/Authentication/PasswordResetTest.php
tests/Feature/ApiTestCase.php

# Current Time
5/5/2025, 8:59:02 AM (Europe/Minsk, UTC+3:00)

# Context Window Usage
108,876 / 1,048.576K tokens used (10%)

# Current Mode
ACT MODE
</environment_details>
</file>

<file path="app_documentation/route_refactor_todo.md">
*Phase 2: Implement Route Loading in Module Providers**

*   `[x]` **Implement (Authentication Module):**
    *   `[x]` Edit `Authentication/Providers/RouteServiceProvider.php`.
    *   `[x]` Implement the `boot()` method.
    *   `[x]` Inside `boot()`, use `Route::middleware('api')->prefix('v1/auth')->group(base_path('app/Modules/Authentication/routes/api.php'));` (Adjust prefix `v1/auth` if a different convention is desired, e.g., just `v1`).
*   `[x]` **Implement (UserManagement Module):**
    *   `[x]` Edit `UserManagement/Providers/RouteServiceProvider.php`.
    *   `[x]` Implement `boot()`.
    *   `[x]` Inside `boot()`, use `Route::middleware('api')->prefix('v1/user')->group(base_path('app/Modules/UserManagement/routes/api.php'));` (Adjust prefix).
*   `[x]` **Implement (SubscriptionBilling Module):**
    *   `[x]` Edit `SubscriptionBilling/Providers/RouteServiceProvider.php`.
    *   `[x]` Implement `boot()`.
    *   `[x]` Inside `boot()`, use `Route::middleware('api')->prefix('v1/billing')->group(base_path('app/Modules/SubscriptionBilling/routes/api.php'));` (Adjust prefix, consider separate prefixes for `/plans`, `/user/subscription`, `/webhooks`). *Note: Webhook routes might need CSRF exemption applied here or in the route file.*
*   `[x]` **Implement (ContentManagement Module):**
    *   `[x]` Edit `ContentManagement/Providers/RouteServiceProvider.php`.
    *   `[x]` Implement `boot()`.
    *   `[x]` Inside `boot()`, use `Route::middleware('api')->prefix('v1')->group(base_path('app/Modules/ContentManagement/routes/api.php'));` (Using just `/v1` as routes likely are `/protocols`, `/episodes`).
*   `[x]` **Implement (NotesService Module):**
    *   `[x]` Edit `NotesService/Providers/RouteServiceProvider.php`.
    *   `[x]` Implement `boot()`.
    *   `[x]` Inside `boot()`, use `Route::middleware('api')->prefix('v1/notes')->group(base_path('app/Modules/NotesService/routes/api.php'));` (Adjust prefix).
*   `[x]` **Implement (ProtocolEngine Module):**
    *   `[x]` Edit `ProtocolEngine/Providers/RouteServiceProvider.php`.
    *   `[x]` Implement `boot()`.
    *   `[x]` Inside `boot()`, use `Route::middleware('api')->prefix('v1/engine')->group(base_path('app/Modules/ProtocolEngine/routes/api.php'));` (Adjust prefix, e.g., `/reminders`, `/tracking`).

Okay, here is a detailed TODO checklist for refactoring the route registration to use Service Providers, based on the steps provided:

**Refactor Route Registration to Use Service Providers**

**Goal:** Replace dynamic route loading in `routes/api.php` with Module Service Providers for improved structure and compatibility with Laravel route caching.

---
**Phase 3: Register Module Service Providers**

*   `[x]` Edit the main application providers file: `bootstrap/providers.php`.
*   `[x]` Add the fully qualified class name for each created module RouteServiceProvider to the `return [...]` array. Example:
    ```php
    return [
        App\Providers\AppServiceProvider::class,
        App\Modules\Authentication\Providers\RouteServiceProvider::class,
        App\Modules\UserManagement\Providers\RouteServiceProvider::class,
        App\Modules\SubscriptionBilling\Providers\RouteServiceProvider::class,
        App\Modules\ContentManagement\Providers\RouteServiceProvider::class,
        App\Modules\NotesService\Providers\RouteServiceProvider::class,
        App\Modules\ProtocolEngine\Providers\RouteServiceProvider::class,
        // ... add other module providers here
    ];
    ```

---

**Phase 4: Clean Up Main Route File**

*   `[x]` Edit the main API routes file: `routes/api.php`.
*   `[x]` Delete the `glob(...)` loop and the `require $routeFilePath;` line within it.
*   `[x]` Remove the `Route::prefix('v1')->group(...)` wrapper *unless* you decided module providers should *not* handle the `v1` prefix themselves. (Based on Phase 2, the wrapper can likely be removed).
*   `[x]` Keep the default `Route::middleware('auth:sanctum')->get('/user', ...);` route if still needed at the top level.

---

**Phase 5: Verification**

*   `[ ]` **Clear Caches:** Run `php artisan route:clear` and `php artisan config:clear`.
*   `[ ]` **List Routes:** Run `php artisan route:list`. Verify that all routes from the modules (e.g., `POST v1/auth/register`, `GET v1/user/profile`, `GET v1/protocols`, etc.) are listed correctly with the expected prefixes and middleware (`api`).
*   `[ ]` **Test Caching:**
    *   `[ ]` Run `php artisan route:cache`. Ensure it completes without errors.
    *   `[ ]` Run `php artisan route:list` again. Verify the routes are still listed correctly from the cache.
    *   `[ ]` Run `php artisan route:clear` again to leave the cache clear for development/testing.
*   `[ ]` **Run Tests:** Execute the full test suite (`composer test` or `php artisan test`). Pay close attention to the `RegistrationTest` and any other API feature tests. They should now pass (assuming no other underlying issues).

---
</file>

<file path="app_documentation/security_plan.md">
**Huberman App: Security Plan**

**1. Introduction**

Security is a critical aspect of the Huberman App, especially considering user data, authentication, and subscription payments. This document outlines the plan for integrating security practices throughout the development lifecycle, including threat modeling, defining specific technical controls, and planning for security testing. The goal is to build a secure and trustworthy application by proactively identifying and mitigating potential vulnerabilities.

**2. Detailed Threat Modeling**

*   **Process:**
    *   A dedicated threat modeling session will be conducted early in the implementation phase, involving backend developers, potentially frontend developers, and project leads.
    *   The **STRIDE methodology** (Spoofing, Tampering, Repudiation, Information Disclosure, Denial of Service, Elevation of Privilege) will be used as a framework.
    *   The analysis will focus on key data flows and components based on the detailed technical design (`component_interfaces_interactions.md`, `complex_workflows.md`) and API contract (`api_design_documentation.md`), specifically targeting:
        *   Authentication flow (Registration, Login, Password Reset, Token Handling)
        *   Subscription lifecycle management (IAP, Webhooks, Status Updates)
        *   Feature Gating logic (Free vs. Premium access)
        *   User-generated content (Notes - storage, access control, potential public sharing)
        *   API endpoints (Input validation, Authorization checks)
        *   Data storage (Database, Cache)
        *   Third-party integrations (Payment providers, Push notification services)
    *   For each component/flow, potential threats based on STRIDE categories will be identified, documented, and ranked based on potential impact and likelihood.
*   **Outcome:**
    *   A documented Threat Model (e.g., in a separate document linked here, or appended).
    *   This model will list identified threats, potential attack vectors, existing planned mitigations (from this document), and any additional required security controls or areas needing further investigation.
    *   This document will serve as a living reference, revisited if major architectural changes occur.

**3. Specific Technical Security Controls**

Based on the architecture, known best practices, and anticipated threats, the following technical security controls will be implemented and verified:

**3.1. Authentication & Session Management**

*   **Mechanism:** Laravel Sanctum for API token authentication.
*   **Token Strategy:**
    *   Issue API tokens upon successful login/registration.
    *   Tokens will have a configured expiration time (e.g., configurable, potentially hours or days for mobile usability, balancing security and UX). *Decision: Initially target [e.g., 7 days] expiry, review based on UX/security needs.*
    *   Refresh tokens are *not* part of Sanctum's default API token flow; re-authentication will be required after token expiry. Consider Sanctum's SPA authentication if persistent sessions are strongly desired and feasible with React Native setup, but API tokens are simpler initially.
*   **Password Policy:** Enforce minimum password complexity (e.g., length, character types) during registration and password reset using Laravel validation rules.
*   **Brute-Force Protection:** Implement rate limiting on authentication endpoints (`/login`, `/register`, `/forgot-password`, `/reset-password`) using Laravel's built-in rate limiter or dedicated packages.
*   **Secure Storage:** Passwords stored securely using Laravel's default hashing mechanism (Bcrypt).

**3.2. Authorization**

*   **Backend Enforcement:** All authorization decisions MUST be made on the backend (Laravel). No reliance on client-side (React Native) checks for controlling access to data or features.
*   **Subscription Checks:** Use dedicated Middleware (e.g., `CheckPremiumAccess`) applied to API routes/groups requiring premium status. This middleware will leverage the `SubscriptionServiceInterface` to check for an active, valid premium subscription (status `active` or `trialing`, within `ends_at` date).
*   **Ownership & Policies:** Use Laravel Policies (e.g., `NotePolicy`, `ReminderPolicy`) to ensure users can only access and modify their own resources (preventing Insecure Direct Object References - IDOR). Policies check `user_id` matches the authenticated user.
*   **Principle of Least Privilege:** Ensure API endpoints only return data necessary for the specific function.

**3.3. Encryption**

*   **In Transit:** Enforce HTTPS (TLS 1.2+) for all communication between the React Native app and the Laravel API. Configure web server (via Forge/Vapor) for HTTPS only, potentially with HSTS headers.
*   **At Rest:** Leverage database encryption-at-rest features provided by the managed PostgreSQL provider (e.g., AWS RDS, Google Cloud SQL). Confirm this is enabled during infrastructure setup.
*   **Secrets Management:**
    *   API keys, database credentials, payment provider secrets, and other sensitive configuration MUST NOT be hardcoded in the repository.
    *   Use environment variables (`.env` file locally, secure environment variable injection via Forge/Vapor in deployed environments).
    *   Consider using a dedicated secrets manager (like AWS Secrets Manager, Google Secret Manager, or HashiCorp Vault) for production keys if complexity warrants it later.

**3.4. Input Validation & Sanitization**

*   **Validation:** Use Laravel Form Requests for validating all incoming data from API requests (query parameters, request bodies). Define strict validation rules for data types, formats, lengths, presence, etc.
*   **Output Encoding:** Use Blade's default encoding (`{{ }}`) if rendering any user content in web views (less likely for API). For API responses, ensure proper JSON encoding handles special characters. Avoid rendering user-provided content directly as HTML in the frontend without appropriate sanitization/encoding (React Native generally handles this well).
*   **Sanitization:** While strict validation is key, sanitize input specifically intended for database queries where complex filtering might occur, although Eloquent/Query Builder typically provides protection against SQL injection.

**3.5. Payment Security**

*   **IAP Receipt Validation:** All Apple App Store and Google Play In-App Purchase receipts MUST be validated server-side by sending them from the Laravel backend to the respective provider's validation endpoints. Do not trust client-side validation results.
*   **Webhook Security:** Securely handle incoming webhooks from payment providers (Stripe/Paddle/Apple/Google) by:
    *   Verifying the request signature using the provider's secret key (configured via environment variables). Reject any requests with invalid signatures.
    *   Processing events idempotently where possible (e.g., check if the subscription status is already updated before applying the change again).

**3.6. Dependency Management**

*   **Scanning:** Regularly scan for known vulnerabilities in dependencies:
    *   Backend: Run `composer audit` locally and/or in the CI pipeline.
    *   Frontend: Run `npm audit` locally and/or in the CI pipeline.
*   **Updates:** Keep dependencies reasonably up-to-date, prioritizing security patches. Use tools like GitHub Dependabot to automate update pull requests.

**3.7. General Security**

*   **Security Headers:** Configure appropriate HTTP security headers (e.g., `Strict-Transport-Security`, `X-Content-Type-Options`, `X-Frame-Options`, potentially `Content-Security-Policy` if serving any web content) via web server or middleware.
*   **Error Handling:** Configure Laravel error reporting to avoid exposing sensitive information (stack traces, database details) in production API responses. Return generic error messages for 5xx errors.
*   **Logging:** Implement sufficient logging to track key security events (e.g., login attempts, password resets, subscription changes, significant errors), but avoid logging sensitive data like passwords or full payment details. Centralize logs for monitoring.

**4. Security Testing Planning**

Security testing will be integrated throughout the development lifecycle:

*   **Static Application Security Testing (SAST):**
    *   **Tools:** Configure static analysis tools like PHPStan/Psalm with security-focused extensions (e.g., `psalm/plugin-security-analysis`) for the backend. Use ESLint with security plugins (e.g., `eslint-plugin-security`) for React Native frontend code.
    *   **Integration:** Run SAST tools locally via Git hooks (optional) and mandatorily within the CI/CD pipeline on every commit/pull request to catch potential issues early.
*   **Dynamic Application Security Testing (DAST):**
    *   **Timing:** Periodically run DAST scans against the deployed application in the Staging environment.
    *   **Tools:** Initially, consider using OWASP ZAP (Zed Attack Proxy) for basic automated scanning of common web vulnerabilities (e.g., XSS, SQLi - though less likely with framework defaults, still worth checking). Explore more advanced tools or services if budget allows later.
*   **Manual Code Review:** Encourage security-focused code reviews as part of the standard pull request process, especially for critical areas like authentication, authorization, and payment handling.
*   **Penetration Testing:**
    *   **Timing:** Schedule external penetration testing by a reputable third-party vendor before the first major production launch and potentially before subsequent major feature releases or annually.
    *   **Scope:** Define the scope to cover key application functionality, including authentication, subscription flows, premium feature access, notes handling, API endpoints, and infrastructure configuration.
    *   **Budget:** Allocate budget and time for engaging penetration testing services and remediating identified findings.

**5. Incident Response (Basic Considerations)**

*   While a full incident response plan is beyond this scope, basic readiness includes:
    *   Having access to centralized logs.
    *   Defining communication channels for reporting and handling security incidents.
    *   Understanding how to quickly revoke compromised credentials or disable features if necessary.

**6. Conclusion**

This security plan provides a framework for building security into the Huberman App from the ground up. By implementing the defined technical controls, performing regular testing, and fostering a security-aware development culture, we aim to significantly reduce the risk of security vulnerabilities and protect user data and trust. This plan should be treated as a living document and updated as the application evolves.
</file>

<file path="app_documentation/technology_versions_libraries.md">
**Huberman App: Finalized Technology Versions & Key Libraries**

**1. Introduction**

This document specifies the finalized versions for the core technologies and selected key third-party libraries to be used in the Huberman App project. These choices aim to provide a stable, secure, and maintainable foundation for development, based on the architectural decisions (`architecture_pan.md`) and implementation plan (`detailed_plan.md`). This information will directly inform the `composer.json` (backend) and `package.json` (frontend) files and serve as a reference point for developers.

**2. Core Technology Versions**

*   **PHP:**
    *   **Version:** `8.2+`
    *   **Justification:** Provides modern language features and performance improvements. Required by Laravel 11.x. Aim for the latest stable 8.2.x or 8.3.x patch release available at project start.
*   **Laravel Framework:**
    *   **Version:** `11.x`
    *   **Justification:** Latest major stable release (as of Q1/Q2 2024), offering the longest support window and latest features. Ensures access to up-to-date ecosystem packages.
*   **Database:**
    *   **Version:** `PostgreSQL 17.x`
    *   **Justification:** Latest stable major release offering advanced features and performance. *Note: Verify compatibility and availability with the chosen managed database provider (e.g., AWS RDS, Google Cloud SQL) before final provisioning.* If the latest isn't available, fall back to the latest supported major version (e.g., 15.x).
*   **Cache / Queue Broker:**
    *   **Version:** `Redis 7.x`
    *   **Justification:** Current, high-performance, stable version widely supported for caching and queuing.
*   **Frontend Runtime:**
    *   **Version:** `Node.js 20.x (LTS)`
    *   **Justification:** Use the current Long-Term Support (LTS) version for stability and extended support, required for React Native tooling (Metro, CLI).
*   **Frontend Framework:**
    *   **Version:** `React Native (Latest Stable)`
    *   **Justification:** Use the latest stable release available at project kickoff to leverage the newest features, performance improvements, and security patches. Version number to be confirmed at initialization (e.g., `0.73.x` or newer).

**3. Key Libraries Selection**

**3.1. Backend (Laravel - `composer.json`)**

*   **Payment Processing:**
    *   **Library:** `laravel/cashier-stripe`
    *   **Version:** `^15.0` (or version compatible with Laravel 11.x)
    *   **Justification:** Official Laravel package providing a fluent interface for Stripe's subscription billing services, simplifying integration. *Chosen over Paddle for this document, assuming Stripe preference/fit.*
*   **API Authentication:**
    *   **Library:** `laravel/sanctum`
    *   **Version:** Bundled with Laravel 11.x (or latest compatible)
    *   **Justification:** Official lightweight system for API token authentication, suitable for mobile apps and SPAs. Preferred over Passport for this use case unless OAuth server features are explicitly needed.

**3.2. Frontend (React Native - `package.json`)**

*   **In-App Purchases:**
    *   **Library:** `react-native-iap`
    *   **Version:** `Latest Stable`
    *   **Justification:** De facto standard community library for handling In-App Purchases across both iOS and Android platforms. Requires careful platform-specific setup.
*   **Push Notifications:**
    *   **Library:** `@react-native-firebase/app` & `@react-native-firebase/messaging`
    *   **Version:** `Latest Stable`
    *   **Justification:** Official Firebase modules for React Native. Provides a robust, cross-platform solution for handling push notifications via Firebase Cloud Messaging (FCM), which handles delivery to both APNS (iOS) and Android. Assumes Firebase project setup.
*   **State Management:**
    *   **Library:** `zustand`
    *   **Version:** `Latest Stable`
    *   **Justification:** A small, fast, and scalable state-management solution using simplified flux principles. Chosen for its simplicity and minimal boilerplate compared to Redux, potentially suitable for the app's expected state complexity.
*   **Navigation:**
    *   **Library:** `react-navigation` (`@react-navigation/native`, `@react-navigation/native-stack`, etc.)
    *   **Version:** `Latest Stable`
    *   **Justification:** The standard and most widely used library for handling navigation and screen transitions in React Native applications.

**4. Documentation and Updates**

*   The exact versions used will be locked in the respective `composer.lock` and `package-lock.json` files.
*   The primary `composer.json` and `package.json` files will reflect the target version constraints (e.g., `^11.0` for Laravel).
*   This document (`technology_versions_libraries.md`) serves as the initial decision record. It can be formalized into an Architecture Decision Record (ADR) if desired.
*   The project's main `README.md` should ideally include a summary of the core technology stack and versions for quick reference.
*   Dependency versions should be periodically reviewed and updated (e.g., using `composer update`, `npm update`, `Dependabot`) following appropriate testing procedures to incorporate security patches and improvements.

**5. Conclusion**

These technology and library choices provide a modern, robust, and well-supported stack for the Huberman App. Finalizing these versions allows the development team to proceed with project setup and initial implementation with clarity and consistency.
</file>

<file path="app_documentation/testing_strategy.md">
**Huberman App: Holistic Testing Strategy**

**1. Introduction**

This document outlines the comprehensive testing strategy for the Huberman App project, encompassing both the backend (Laravel) and frontend (React Native) components. The primary goal is to ensure the delivery of a high-quality, reliable, secure, and user-friendly application that meets all functional and non-functional requirements. This strategy adopts a multi-layered approach, integrating various testing types throughout the development lifecycle.

**2. Testing Objectives**

*   **Verify Requirements:** Ensure the application functions according to the defined user stories and acceptance criteria (`user_stories_mvp.md`).
*   **Prevent Regressions:** Detect defects introduced by new code changes or refactoring early in the cycle.
*   **Build Confidence:** Provide confidence to the team, stakeholders, and users in the application's stability and correctness before release.
*   **Early Defect Detection:** Identify and fix bugs as early as possible in the development process, reducing the cost and effort of remediation.
*   **Ensure Quality Attributes:** Validate non-functional requirements, including performance, security, and usability.

**3. Testing Levels & Scope**

We will employ a balanced mix of automated and manual testing across different levels:

*   **Level 1: Unit Tests**
    *   **Scope:** Focus on testing the smallest isolated parts of the codebase (individual functions, methods, classes, components, hooks, utils). Dependencies are typically mocked or stubbed.
    *   **Backend (Laravel):** Test model logic, service class methods, form request validation rules, utility functions. Follows TDD principles outlined in `backend_implementation_todo.md`.
    *   **Frontend (React Native):** Test individual UI components' rendering and basic interactions, utility functions, state management logic (store actions/reducers/selectors), custom hooks.
    *   **Goal:** Verify the correctness of individual code units, fast feedback for developers.
    *   **Execution:** Run locally by developers during development, automatically in the CI pipeline on every commit/PR.

*   **Level 2: Integration Tests (Backend)**
    *   **Scope:** Verify the interaction and communication between multiple backend modules or components (e.g., Controller -> Service -> Repository/Model, Event -> Listener). May involve interaction with a test database and cache.
    *   **Goal:** Ensure different parts of the backend work together as expected.
    *   **Execution:** Run locally by developers, automatically in the CI pipeline.

*   **Level 3: Component Tests (Frontend)**
    *   **Scope:** Test React Native components with more complex interactions, including state changes, prop handling, and basic rendering within a simulated environment, but without full navigation or backend APIs.
    *   **Goal:** Verify component behavior and integration with state management or child components.
    *   **Execution:** Run locally by developers, automatically in the CI pipeline.

*   **Level 4: API / Contract Tests (Backend)**
    *   **Scope:** Test the backend API endpoints directly, verifying adherence to the defined contract (`openapi.yaml`). Check request validation, authentication/authorization logic, response structure, status codes, and basic business logic execution.
    *   **Goal:** Ensure the API behaves as expected from an external consumer's perspective (the frontend) and prevent breaking changes.
    *   **Execution:** Run locally by developers (Laravel Feature Tests), automatically in the CI pipeline.

*   **Level 5: End-to-End (E2E) Tests**
    *   **Scope:** Simulate real user scenarios by interacting with the complete, deployed application (React Native app interacting with the backend API in a dedicated test/staging environment).
    *   **Goal:** Validate complete user flows from start to finish across the entire stack.
    *   **Execution:** Run primarily in Staging environment. Due to complexity, initial focus might be on automating critical paths (e.g., login, core free feature, subscription purchase, core premium feature access). May run nightly or on-demand rather than every commit. Can be supplemented heavily by manual testing initially.

*   **Level 6: Manual Exploratory & Acceptance Testing**
    *   **Scope:** Human-driven testing involving unscripted exploration of the application to uncover usability issues, edge cases, and unexpected behavior. Also includes scripted testing based on user story acceptance criteria.
    *   **Goal:** Catch issues missed by automated tests, validate the user experience, confirm requirements are met from a user perspective. Includes Design QA (comparing implementation to Figma designs).
    *   **Execution:** Performed primarily on Staging builds by QA, Product Owners, and Designers.

*   **Level 7: Security Testing**
    *   **Scope:** As defined in `security_plan.md`. Includes SAST, DAST, and planned external Penetration Testing.
    *   **Goal:** Identify and mitigate security vulnerabilities.
    *   **Execution:** SAST in CI pipeline. DAST periodically on Staging. Penetration testing before major releases.

*   **Level 8: Performance Testing**
    *   **Scope:** Assess backend API response times under simulated load, frontend app startup time, screen transition performance, memory usage.
    *   **Goal:** Ensure the application meets performance expectations and scales appropriately.
    *   **Execution:** Primarily post-MVP or before major releases on a Staging environment resembling production. Initial checks via developer tools during development.

*   **Level 9: Usability Testing**
    *   **Scope:** Observing representative users interacting with the application to perform specific tasks.
    *   **Goal:** Identify usability friction points and gather qualitative feedback on the user experience.
    *   **Execution:** Planned sessions coordinated by UX designers/researchers, likely conducted periodically during development and before major launches.

**4. Tools & Technologies**

*   **Backend Unit/Integration/API:** PHPUnit
*   **Frontend Unit/Component:** Jest, React Native Testing Library (RNTL)
*   **Frontend E2E:** Detox / Appium / Maestro (Selection TBD based on team expertise/needs)
*   **SAST:** PHPStan/Psalm (Backend), ESLint + Security Plugins (Frontend)
*   **DAST:** OWASP ZAP (Initial), potentially commercial scanners later.
*   **Performance:** k6/JMeter (Backend Load), React Native Perf Monitor/Flipper (Frontend Profiling)
*   **Manual Testing/Management:** Jira/Trello (Test Cases/Bug Tracking), potentially TestRail/Zephyr
*   **Device Testing:** BrowserStack / Sauce Labs (or physical device pool)

**5. Roles & Responsibilities**

*   **Developers (Backend & Frontend):**
    *   Write and maintain Unit, Integration, and Component tests for their code.
    *   Write API/Contract tests (Backend).
    *   Run tests locally before committing code.
    *   Fix bugs identified during testing.
    *   Participate in code reviews focusing on testability and coverage.
    *   Integrate and run SAST tools.
    *   Contribute to E2E test automation (optional/based on skill).
    *   Conduct initial performance profiling.
*   **QA Engineers / SDETs (if applicable):**
    *   Develop and execute manual test plans and exploratory testing.
    *   Develop and maintain automated E2E tests.
    *   Perform regression testing.
    *   Manage bug tracking process.
    *   Execute DAST scans.
    *   Coordinate acceptance testing.
*   **Designers:**
    *   Perform Design QA against implemented features.
    *   Conduct usability testing.
*   **Product Owners / Managers:**
    *   Define acceptance criteria for user stories.
    *   Participate in acceptance testing.
    *   Prioritize bug fixes.
*   **DevOps / Infrastructure:**
    *   Maintain testing environments.
    *   Integrate tests into CI/CD pipeline.
    *   Configure monitoring for performance and errors.

**6. Testing Environments**

*   **Local:** Developers run Unit, Integration, Component, API tests during coding.
*   **CI (Continuous Integration):** Automated execution of Unit, Integration, Component, API tests, and SAST checks upon code commits/PRs. Build failures block merges.
*   **Staging:** Deployed environment closely resembling production. Used for Manual QA, Acceptance Testing, E2E automation runs, DAST scans, Performance testing.
*   **Production:** Live environment. Testing is limited to essential post-deployment smoke tests and ongoing monitoring.

**7. Integration with Development Process**

*   **CI/CD Pipeline:** Automated tests (Levels 1-4) are mandatory gates in the CI pipeline. A failing build prevents code merging. E2E tests may run separately (e.g., nightly).
*   **Definition of Done (DoD):** A user story or task is considered "Done" only when:
    *   Code is implemented according to requirements.
    *   Relevant unit, integration, component, and API tests are written and passing.
    *   Code passes CI checks (including SAST).
    *   Code is peer-reviewed.
    *   Functionality is successfully tested by QA (manual/automated E2E) in Staging.
    *   Design QA is completed (if applicable).
    *   Acceptance criteria are met (verified by PO).
    *   Documentation (code comments, relevant diagrams, READMEs) is updated.

**8. Bug Tracking & Reporting**

*   **Tool:** Jira/Trello will be used for tracking bugs identified during any testing phase.
*   **Process:** Bugs will be reported with clear steps to reproduce, expected vs. actual results, severity/priority, environment details, and relevant screenshots/logs. Bugs will be assigned, prioritized, fixed, and then verified by QA in the Staging environment before closure.

**9. Conclusion**

This holistic testing strategy provides a framework for ensuring the quality and reliability of the Huberman App. By combining automated tests at various levels with thorough manual testing, security checks, and performance considerations, integrated tightly with the CI/CD pipeline and Definition of Done, we aim to deliver a robust and user-trusted application. This strategy will be reviewed and adapted as the project progresses.
</file>

<file path="app_documentation/TODO.md">
Okay, let's translate the high-level vision for the "Huberman App" (Optimize Guide) into a detailed technical plan and setup outline for the implementation phase.

---

**Huberman App (Optimize Guide): Implementation Preparation Plan**

**1. Transition Summary**

We have successfully completed the high-level application description and architectural blueprint phases for the Huberman App. The architecture outlines a Modular Monolith (Laravel/PHP backend), a React Native frontend, PostgreSQL database, Redis caching/queuing, and a RESTful API, all designed to support the defined Freemium subscription model. This document details the next crucial phase: transitioning from the architectural vision to actionable technical specifications, project setup, and environment preparation necessary to initiate development efficiently and effectively. The objective is to establish a solid foundation for the implementation lifecycle.

**2. Detailed Technical Design & Specifications**

This phase focuses on refining the high-level architecture into granular component designs and technical specifications.

*   **Component Breakdown (Modular Monolith):**
    *   **Process:** Decompose the Laravel backend into logical, domain-driven modules (Namespaces/Folders). Based on the architecture and features, initial modules will likely include: `Authentication`, `UserManagement`, `SubscriptionBilling` (integrating with chosen payment provider/Cashier), `ContentManagement` (Episodes, Protocols, Summaries), `ProtocolEngine` (Reminder logic, Tracking), `NotesService`, `CommunityFeatures` (if applicable early), and `CoreApi`.
    *   **Outcome:** Clearly defined code boundaries and responsibilities within the Laravel application structure.
*   **Component Interfaces & Interactions:**
    *   **Process:** Define the specific internal contracts (Service Classes, Interfaces, Events) for how these backend modules interact. Document the flow of data and control, especially for cross-cutting concerns like subscription status checks. For frontend-backend interaction, focus on the API.
    *   **Outcome:** Documented internal interaction patterns (e.g., Sequence Diagrams for key flows) and clear responsibilities for each module.
*   **API Design & Documentation:**
    *   **Process:** Formalize the RESTful API contract. Utilize OpenAPI (Swagger) specification to define all endpoints, request/response schemas, authentication methods (Laravel Sanctum/Passport), and authorization requirements. Explicitly tag endpoints requiring 'Premium' subscription status. Key areas include: Auth (login, register, password reset), User Profile, Plans/Subscriptions (fetching offers, potentially linking to provider portals), Content (fetching episodes, protocols, summaries - with filtering for free/premium), Notes (CRUD, public/private flags), Reminders (CRUD for premium), Tracking (logging adherence for premium). Define error handling standards (HTTP status codes, error response structure). Define webhook endpoints for payment providers (Stripe/Paddle, Apple App Store Server Notifications, Google Play Developer API).
    *   **Outcome:** A version-controlled `openapi.yaml` or `swagger.json` file serving as the definitive API contract for both frontend and backend teams.
*   **Database Schema Refinement:**
    *   **Process:** Review the provided `database_plan.md` SQL schema. Convert it into Laravel Migrations. Finalize data types, constraints (NOT NULL, UNIQUE), foreign key relationships (with appropriate ON DELETE behavior - e.g., CASCADE for notes on user delete, RESTRICT for plans on active subscriptions). Define necessary indexes based on anticipated query patterns (e.g., indexing `subscriptions.user_id`, `subscriptions.status`, `subscriptions.ends_at`, `notes.user_id`, `notes.episode_id`, `protocols.category`). Plan for potential future schema evolution using migrations.
    *   **Outcome:** A complete set of executable Laravel migration files checked into version control, representing the definitive database structure.
*   **Complex Workflow/Algorithm Design:**
    *   **Process:** Document the specific logic for complex features identified in the architecture:
        *   **Subscription Lifecycle Management:** Detail the state machine for subscriptions (`trialing`, `active`, `past_due`, `canceled`, `expired`) and how webhook events from Stripe/Paddle/Apple/Google trigger state transitions and update the `subscriptions` table.
        *   **Feature Gating Logic:** Specify the implementation details for Laravel Middleware/Policies that check the user's active subscription status (querying `subscriptions` table, potentially using cached flags from Redis) before granting access to premium API routes or features.
        *   **Customizable Reminders (Premium):** Design the scheduling mechanism (likely using Laravel's Task Scheduling + Queues) to trigger push notifications based on user-defined times/frequencies for specific protocols.
        *   **Tracking & Visualization Logic (Premium):** Define how adherence data is stored and how it will be aggregated for progress visualizations (e.g., streak calculation).
    *   **Outcome:** Sequence diagrams, state diagrams, or pseudo-code documenting the core logic for these critical flows.
*   **Technology Version & Library Finalization:**
    *   **Process:** Lock down specific versions: PHP (e.g., 8.2+), Laravel (e.g., 10.x/11.x), PostgreSQL (e.g., 17), Redis (e.g., 7.x), Node.js (LTS for React Native tooling), React Native (latest stable). Select and document key libraries: `laravel/cashier-stripe` or `laravel/cashier-paddle`, `react-native-iap`, Push Notification library (e.g., `react-native-push-notification` or cloud provider SDKs), state management for RN (e.g., Redux Toolkit, Zustand).
    *   **Outcome:** Updated `composer.json`, `package.json`, and potentially a project README or Architecture Decision Record (ADR) listing finalized versions and libraries.

**3. Project Planning & Development Readiness**

Translate the technical design into a manageable project plan and prepare the team.

*   **Requirements Refinement (User Stories):**
    *   **Process:** Break down the features from `app_description.md` (both Free and Premium tiers) into granular User Stories (e.g., "As a Free User, I want to see summaries for foundational protocols so that I can understand the basics," "As a Premium User, I want to set a custom daily reminder for 'Morning Sunlight Viewing' so that I don't forget," "As a Premium User, I want to mark a protocol as completed for the day so that I can track my adherence"). Use a tool like Jira or Trello. Prioritize stories for an MVP, focusing on core free functionality and the subscription mechanism first, followed by premium features.
    *   **Outcome:** A populated backlog of estimated User Stories in the chosen project management tool.
*   **Detailed Estimation:**
    *   **Process:** Estimate the effort for each User Story based on the detailed technical designs (e.g., using Story Points or time estimates). This should be done collaboratively by the development team.
    *   **Outcome:** Estimated backlog providing a basis for timeline creation.
*   **Granular Project Timeline & Milestones:**
    *   **Process:** Develop a sprint-based or Kanban-based timeline. Define key milestones:
        *   M1: Project Setup Complete (Repo, CI/CD Base, Local Env).
        *   M2: Core Backend Ready (Auth, User Mgmt, DB Migrations, Basic API Shell).
        *   M3: Basic Content Display (Free Tier Protocols/Summaries visible in RN App).
        *   M4: Subscription Flow PoC (IAP Integration, Backend Webhooks, Basic Feature Gate).
        *   M5: Free Tier Feature Complete (Basic Reminders, Notes).
        *   M6: Premium Feature Set 1 (e.g., Full Content Access, Custom Reminders).
        *   M7: Premium Feature Set 2 (e.g., Tracking, Offline Access).
        *   M8: Beta Release / Production Readiness.
    *   **Outcome:** A documented project plan with sprints/phases, milestones, and dependencies visualized.
*   **Resource Allocation:**
    *   **Process:** Assign development team members (Backend Devs, Frontend RN Devs, QA, potentially DevOps support) to specific modules, epics, or sprints based on skills and availability.
    *   **Outcome:** Clear ownership of tasks/modules within the team.
*   **Essential Tooling Setup:**
    *   **Process:** Configure and grant access to necessary tools:
        *   Project Management: Jira/Trello board setup.
        *   Version Control: GitHub/GitLab/Bitbucket repository creation, branch strategy definition (e.g., Gitflow).
        *   Communication: Slack/Teams channel setup.
        *   Documentation: Confluence/Notion space creation for technical docs, ADRs, meeting notes.
    *   **Outcome:** Operational project infrastructure ready for team use.
*   **Development Environment Configuration:**
    *   **Process:** Finalize and distribute the Docker configuration (`docker-compose.yml`) as specified in the architecture. Ensure it includes containers for PHP-FPM, Nginx/Caddy, PostgreSQL, Redis, and Node.js (for frontend tooling). Provide clear instructions for setup and usage. Standardize environment variable management (e.g., `.env` files with templates).
    *   **Outcome:** Developers can quickly and consistently set up identical local development environments.

**4. UI/UX Design Integration (If Applicable)**

If not already completed, this is a critical parallel activity, especially for the React Native frontend.

*   **Process:** Ensure finalized, high-fidelity mockups and prototypes are available and signed off. These must cover:
    *   All key user flows (onboarding, browsing content, setting reminders, taking notes, tracking progress).
    *   Clear visual differentiation between Free and Premium features/content.
    *   User-friendly prompts and flows for upgrading to Premium.
    *   Platform-specific design conventions (iOS/Android).
    *   Creation of a component library/design system for consistency.
*   **Outcome:** Signed-off UI/UX designs and a style guide/component library ready for frontend development.

**5. Infrastructure & Environment Setup**

Prepare the cloud/hosting environments required beyond local development.

*   **Infrastructure Planning:**
    *   **Process:** Based on the Laravel Forge/Vapor choice, plan the specific server sizes/configurations (if using Forge) or review Vapor's serverless scaling model. Estimate initial database (PostgreSQL) and cache (Redis) resource needs (using managed services). Plan for object storage (S3/GCS) for potential offline content or user uploads.
    *   **Outcome:** Documented infrastructure requirements and initial sizing estimates.
*   **Cloud Service Selection:**
    *   **Process:** Confirm choices: Forge/Vapor for hosting, AWS RDS/Managed Postgres provider, AWS ElastiCache/Managed Redis provider, S3/GCS for storage. Set up accounts if necessary.
    *   **Outcome:** Finalized list of cloud services and providers.
*   **Environment Provisioning:**
    *   **Process:** Use Forge/Vapor (or Terraform/Pulumi if more control is desired) to provision the initial Dev, Staging, and Production environments. This includes setting up servers/services, databases, caches, and configuring network access/security groups.
    *   **Outcome:** Functional cloud environments ready for deployment.
*   **Monitoring, Logging, Alerting Setup:**
    *   **Process:** Integrate monitoring tools (e.g., Datadog, Sentry, CloudWatch, Prometheus/Grafana) into the provisioned environments. Configure basic logging aggregation (e.g., Vapor logs, CloudWatch Logs, ELK stack). Set up initial alerts for critical events (e.g., high error rates, server down, high DB connections). Integrate Laravel Telescope for Dev/Staging.
    *   **Outcome:** Foundational observability infrastructure in place.
*   **Backup & Recovery Planning:**
    *   **Process:** Configure automated database backups (e.g., using RDS snapshots or provider tools) with defined retention policies. Document the recovery procedure (e.g., restoring from a snapshot).
    *   **Outcome:** Initial backup strategy implemented and documented.

**6. Security Deep Dive & Planning**

Integrate security rigorously from the start.

*   **Detailed Threat Modeling:**
    *   **Process:** Conduct a threat modeling session (e.g., using STRIDE) based on the detailed technical design, data flows, and features (especially authentication, subscription handling, user notes, potential community features). Identify potential threats and vulnerabilities.
    *   **Outcome:** A documented threat model identifying key risks and potential attack vectors.
*   **Define Specific Technical Security Controls:**
    *   **Process:** Based on the threat model and architecture, define concrete security controls:
        *   **Authentication:** Specify token expiry, refresh token strategy, password complexity rules, brute-force protection (rate limiting).
        *   **Authorization:** Detail the implementation of Laravel Policies/Middleware for checking `subscriptions.status` for premium features. Ensure no business logic relies solely on client-side checks.
        *   **Encryption:** Enforce TLS 1.2+ (HTTPS), confirm database encryption at rest, define secure storage for API keys/secrets (e.g., environment variables injected via Forge/Vapor, potentially a secrets manager).
        *   **Input Validation:** Define strategy (e.g., Laravel Form Requests) for validating all incoming API request data.
        *   **Payment Security:** Reiterate server-side validation of IAP receipts and secure webhook handling (signature verification).
        *   **Dependency Scanning:** Plan for tools like `composer audit`, `npm audit`.
    *   **Outcome:** A checklist or document detailing specific security controls to be implemented and verified.
*   **Security Testing Planning:**
    *   **Process:** Plan for integrating security testing into the development lifecycle:
        *   **SAST:** Configure static analysis tools (e.g., PHPStan, Psalm, ESLint security plugins) to run locally and/or in CI.
        *   **DAST:** Plan for using basic dynamic analysis tools against the Staging environment later in the cycle.
        *   **Penetration Testing:** Allocate budget/time for external penetration testing before major production launches.
    *   **Outcome:** Security testing activities integrated into the project plan and CI/CD strategy.

**7. CI/CD Pipeline Foundation**

Automate the build, test, and deployment process early.

*   **Process:** Set up the initial CI/CD pipeline (using GitHub Actions, GitLab CI, Bitbucket Pipelines, or Jenkins) connected to the version control repository. Configure initial stages:
    *   Trigger on push/merge to `develop` and `main` branches.
    *   Checkout code.
    *   Install dependencies (`composer install`, `npm install`).
    *   Run linters and static analysis (SAST tools).
    *   Run automated tests (Unit, Integration - e.g., `php artisan test`, `npm test`).
    *   Build frontend assets (`npm run build`).
    *   (Initial) Deploy script targeting the Dev/Staging environment using Forge CLI/API or Vapor CLI deployment commands.
*   **Outcome:** A basic, functional CI/CD pipeline that automates testing and deployment to lower environments, ready to be expanded as the project progresses.

**8. Initiation of Development**

With the detailed plans and setup complete, development can commence.

*   **Process:** The development team begins implementation based on the prioritized backlog (User Stories), detailed technical designs, API specifications, and established environment/tooling setup.
*   **Initial Focus:**
    *   Setting up the base Laravel and React Native project structures.
    *   Implementing core database migrations (Users, Plans, Subscriptions, initial Content tables).
    *   Building the Authentication flow (backend API and frontend screens).
    *   Establishing basic API communication between frontend and backend.
    *   Setting up the basic subscription scaffolding (e.g., integrating Laravel Cashier, defining Plan models).
*   **Outcome:** Development kickoff, focusing on foundational components and demonstrating core connectivity.

---

This comprehensive plan provides the necessary detail and structure to effectively transition the Huberman App project from architecture into the implementation phase, ensuring all critical technical, planning, infrastructure, and security aspects are addressed upfront.
</file>

<file path="app_documentation/ui_ux_handoff_integration.md">
**Huberman App: UI/UX Design Handoff & Integration Plan**

**1. Introduction**

This document outlines the standardized process for handing off finalized User Interface (UI) and User Experience (UX) designs from the design team to the frontend (React Native) development team for the Huberman App. The goal is to ensure a smooth, efficient, and accurate translation of the design vision into a functional application, maintaining fidelity with the intended **Microsoft Fluent UI** aesthetic.

**2. Guiding Principles**

*   **Collaboration:** Open communication between design and development is essential throughout the process.
*   **Clarity:** Handoff materials must be clear, unambiguous, and provide all necessary details for implementation.
*   **Consistency:** Designs should adhere to a consistent design system and component library approach.
*   **Efficiency:** Utilize standard tools and processes to minimize friction and rework.

**3. Target Aesthetic: Microsoft Fluent UI**

The application aims for a look and feel inspired by Microsoft's Fluent Design System. This influences the handoff in several ways:

*   **Design References:** Designers should utilize official Fluent Design System documentation (web guidelines, potentially WinUI/MAUI examples for principles) as a primary reference, adapting concepts appropriately for a mobile React Native context.
*   **Component Library Strategy (Key Decision Needed):**
    *   **Option A (Recommended if mature):** Leverage an existing Fluent UI library for React Native (e.g., `fluentui-react-native` provided by Microsoft). Designers should align their components with those available in the chosen library where possible. The handoff must clearly indicate which standard library components are used and specify any required customizations (theming, styling overrides).
    *   **Option B (Custom Build):** If a suitable library isn't available or doesn't meet needs, developers will build custom components based strictly on Fluent guidelines and the provided Figma specifications. This requires more development effort and very precise specifications from the designer.
    *   **Decision:** The specific library (or decision to build custom) needs to be finalized collaboratively between design and frontend development leads early on. This document assumes a library *might* be used, requiring designers to reference it.
*   **Figma Toolkit:** Designers are encouraged to use a Fluent UI Design Kit for Figma (if available and suitable) to maintain consistency and speed up the design process.

**4. Key Tools**

*   **Design & Prototyping:** **Figma** will be the primary tool for creating designs, prototypes, specifications, and exporting assets.
*   **Component Documentation (Developer Built):** **Storybook** will be used by frontend developers to build and document the reusable React Native components interactively, based on Figma specs. Designers will reference Storybook during Design QA.
*   **Communication:** **Slack/Teams** (specify channel) for asynchronous communication and quick questions. Regular sync meetings as needed.
*   **Project Management:** **Jira/Trello** (specify board/project) for tracking UI implementation user stories/tasks derived from the designs.

**5. Handoff Process**

1.  **Design Finalization & Review:**
    *   Designer completes user flows, screen designs, and component definitions in Figma for a specific feature or set of features.
    *   Internal design review is conducted.
    *   Designs are reviewed with Product Management/Stakeholders for functional sign-off.

2.  **Preparation in Figma:**
    *   **Organization:** Figma file is well-organized with clear page structures (e.g., by flow, by feature) and layer naming conventions.
    *   **Components:** Reusable elements (buttons, inputs, cards, list items, navigation bars etc.) are created as Figma Components with variants defined (e.g., states like disabled, different sizes) aligned with Fluent principles and the chosen library strategy (see Sec 3).
    *   **Styles:** Colors, typography (font families - specify font files if custom, sizes, weights), spacing values, and grids/layouts are defined as Figma Styles.
    *   **Specs:** Auto-layout and constraints are used effectively to ensure responsive behavior and clear spacing/padding intent. Measurements, colors, and typography details should be easily inspectable using Figma's built-in "Inspect" panel.
    *   **Assets:** All icons, illustrations, or images needed are prepared as exportable assets within Figma (preferably SVG for icons, PNG @1x, @2x, @3x resolutions for raster images). Naming conventions for assets should be established.
    *   **Prototyping:** Key user flows are linked using Figma's prototyping features to demonstrate navigation and interactions.

3.  **Handoff Meeting:**
    *   The Designer schedules a walkthrough session with the assigned Frontend Developer(s) and relevant QA/PM roles.
    *   **Agenda:**
        *   Present the overall user flow(s).
        *   Walk through key screens, highlighting interactions, transitions, and edge cases.
        *   Review reusable components and their variants/states.
        *   Point out specific Fluent UI patterns or library components being used/customized.
        *   Explain the structure of the Figma file (Styles, Components, Assets).
        *   Answer developer questions.

4.  **Providing Access:**
    *   Frontend developers are given "View" or "Edit" (if needed for inspection plugins) access to the finalized Figma file/page.

5.  **Implementation & Clarification:**
    *   Frontend developers translate the Figma designs and specifications into React Native code, utilizing the agreed-upon component library strategy.
    *   Developers use the Figma Inspect panel to get exact values for styles and spacing.
    *   Developers export required assets directly from Figma.
    *   Developers use the designated communication channel (Slack/Teams) to ask clarifying questions as they arise during implementation. Designers should be responsive.

6.  **Design QA:**
    *   Once a feature/component is implemented (preferably on a device or simulator build shared via a Staging/Dev environment), the Designer performs a Design QA review.
    *   Compare the implementation against the Figma designs for visual fidelity, pixel perfection (within reason), interaction accuracy, and adherence to Fluent UI principles.
    *   Provide feedback via the project management tool (Jira/Trello comments/bugs) or a dedicated feedback tool, referencing specific screens/components.

**6. Key Deliverables from Design**

*   **Link to the finalized Figma file**, properly organized and prepared as described above.
*   Clear specification of **required font files** if using custom fonts not available by default.
*   Defined **asset export settings** and naming conventions.
*   Documentation (within Figma or linked) clarifying the **component library strategy** (use of `fluentui-react-native` vs. custom build) and specific customizations needed.

**7. Frontend Developer Responsibilities**

*   Attend the handoff meeting and ask clarifying questions.
*   Use the Figma file and Inspect panel as the source of truth for UI specifications.
*   Implement components and screens adhering to the provided specs and Fluent UI guidelines.
*   Build/update the Storybook documentation for reusable components.
*   Export assets correctly.
*   Communicate proactively if ambiguities or technical limitations arise.
*   Facilitate Design QA by providing access to implemented builds.
*   Address Design QA feedback.

**8. Conclusion**

This handoff process, centered around Figma and clear communication, aims to streamline the integration of finalized Fluent UI-inspired designs into the Huberman App's React Native frontend. By following these steps, we can ensure consistency, accuracy, and efficient collaboration between the design and development teams.
</file>

<file path="app_documentation/user_stories_mvp.md">
**Huberman App: User Stories & MVP Definition**

**1. Introduction**

This document translates the features outlined in `app_description.md` into specific User Stories using the standard "As a..., I want..., so that..." format. These stories form the basis for the product backlog. It also proposes a Minimum Viable Product (MVP) scope, focusing on delivering core value and validating the fundamental Freemium model.

These stories should be imported into a project management tool (e.g., Jira, Trello) for estimation, tracking, and prioritization.

**2. User Story Backlog**

*(Note: These stories represent functional requirements. Technical tasks like "Set up CI/CD" or "Configure database backups" are also necessary but are typically tracked separately or as sub-tasks.)*

**2.1. Core & Foundation (Applies to All Users)**

*   **Story (Onboarding):** As a New User, I want to experience a simple onboarding flow that explains the app's core purpose and how to navigate basic features (like finding protocols and summaries) so that I can quickly understand how to use the app.
*   **Story (Authentication):** As a User, I want to register for a new account using my email and a password so that I can securely access the app's features.
*   **Story (Authentication):** As a registered User, I want to log in using my email and password so that I can access my personalized data and subscription status.
*   **Story (Authentication):** As a logged-in User, I want to be able to log out of the app so that I can secure my session.
*   **Story (Authentication):** As a User who forgot their password, I want to request a password reset via email so that I can regain access to my account.
*   **Story (Navigation):** As a User, I want clear and intuitive navigation (e.g., bottom tabs, menus) so that I can easily find different sections like protocols, notes, and settings.

**2.2. Free Tier Features**

*   **Story (Content Access):** As a Free User, I want to view short summaries and brief explanations for a pre-defined set of foundational protocols so that I can understand the core concepts without a subscription.
*   **Story (Reminders):** As a Free User, I want to receive pre-set (non-customizable) push notification reminders for foundational daily protocols (e.g., Morning Sunlight) so that I can start building basic habits.
*   **Story (Notes):** As a Free User, I want to create and view a limited number of simple text notes linked to foundational protocols/episodes so that I can record my personal reflections within basic limits.
*   **Story (Premium Prompt):** As a Free User, I want to see clear indicators for premium-only content/features and prompts/information on how to upgrade so that I understand the value proposition of the Premium tier.

**2.3. Premium Tier Features**

*   **Story (Subscription Purchase):** As a User, I want to easily view the Premium subscription offers (monthly/annual pricing) and initiate the purchase process through the native App Store/Google Play interface so that I can upgrade my account.
*   **Story (Subscription Status):** As a User, I want to see my current subscription status (Free/Premium, renewal/expiry date) within the app settings so that I know my access level.
*   **Story (Content Access - Premium):** As a Premium User, I want to access the *full library* of protocols (beyond foundational ones) so that I can explore and apply the complete range of Huberman Lab recommendations.
*   **Story (Content Access - Premium):** As a Premium User, I want to access detailed explanations, step-by-step implementation guides, and curated resource links (where available) for *all* protocols so that I can fully understand the science and apply the protocols effectively.
*   **Story (Content Access - Premium):** As a Premium User, I want to read 'key takeaway' summaries for episodes/protocols so that I can quickly grasp the most critical points.
*   **Story (Reminders - Premium):** As a Premium User, I want to set *customizable* push notification reminders for *any* protocol (choosing time, frequency, specific days) so that I can get timely prompts tailored to my routine.
*   **Story (Reminders - Premium):** As a Premium User, I want to manage my custom reminders (edit time/frequency, activate/deactivate, delete) so that I can keep my prompts up-to-date.
*   **Story (Notes - Premium):** As a Premium User, I want to create *unlimited* personal notes so that I can record extensive thoughts without restriction.
*   **Story (Tracking - Premium):** As a Premium User, I want to mark specific protocols as 'completed' for a given day so that I can track my adherence.
*   **Story (Tracking - Premium):** As a Premium User, I want to see basic visualizations of my tracking data (e.g., a completion calendar view, current streak) for a selected protocol so that I can monitor my consistency.
*   **Story (Offline Access - Premium):** As a Premium User, I want to download protocol summaries, guides, and my personal notes for offline access so that I can use the app when I don't have connectivity. *(Potential Post-MVP)*
*   **Story (Advanced Notes - Premium):** As a Premium User, I want advanced organization features for notes (like tags or search) so that I can effectively manage my learning and reflections. *(Potential Post-MVP)*
*   **Story (Community Notes - Premium):** As a Premium User, I want the *option* to make specific notes public (linked to an episode/protocol) so that I can share my takeaways with the community. *(Potential Post-MVP)*
*   **Story (Community Notes - Premium):** As a Premium User, I want to view public notes shared by other premium users on specific episodes/protocols so that I can learn from the community's insights. *(Potential Post-MVP)*
*   **Story (Personalized Routines - Premium):** As a Premium User, I want to create personalized routines ('stacks') by grouping selected protocols together so that I can manage my daily/weekly practices efficiently. *(Potential Post-MVP)*

**2.4. Technical / Backend Stories**

*   **Story (Tech):** Implement backend API endpoints for user registration, login (token generation), logout, and password reset flow.
*   **Story (Tech):** Implement backend API endpoints for CRUD operations on user profiles.
*   **Story (Tech):** Implement backend API endpoints to serve content (episodes, protocols, summaries) with filtering logic based on user subscription status (Free vs. Premium).
*   **Story (Tech):** Implement backend API endpoints for CRUD operations on notes, enforcing free-tier limits and premium permissions.
*   **Story (Tech):** Implement backend API endpoints for CRUD operations on custom reminders (Premium only).
*   **Story (Tech):** Implement backend API endpoints for logging and retrieving adherence tracking data (Premium only).
*   **Story (Tech):** Implement backend webhook endpoints for Stripe/Apple/Google to receive and process subscription lifecycle events (created, renewed, canceled, expired, failed).
*   **Story (Tech):** Implement core subscription status checking logic (`SubscriptionServiceInterface::userHasActivePremiumSubscription`) including caching.
*   **Story (Tech):** Implement API middleware (`CheckPremiumAccess`) to protect premium endpoints.
*   **Story (Tech):** Implement the reminder scheduling logic (Console command + Queued Jobs) and push notification sending via Firebase Admin SDK / APNS.
*   **Story (Tech):** Define and implement all required database migrations based on `database_plan.md`.
*   **Story (Tech):** Set up project foundation: Base Laravel application, React Native project, Dockerized local development environment.

**3. Proposed Minimum Viable Product (MVP) Scope**

The MVP aims to validate the core value proposition: providing structured Huberman content and actionable reminders, with a functional path to upgrade for more comprehensive features.

**MVP Backlog:**

*   **Foundation:**
    *   All stories under "Core & Foundation" (Onboarding, Auth, Navigation).
    *   Tech: Set up project foundation (Laravel, RN, Docker).
    *   Tech: Implement basic database migrations (users, plans, subscriptions, basic content).
    *   Tech: Implement Auth API endpoints.
*   **Free Tier Experience:**
    *   Story: View short summaries/explanations for *foundational* protocols.
    *   Story: Receive *pre-set* reminders for foundational protocols.
    *   Story: See clear prompts/indicators to upgrade.
    *   Tech: Implement content API with basic free/premium filtering.
    *   Tech: Implement basic reminder sending logic for free tier.
*   **Subscription Flow:**
    *   Story: View Premium subscription offers and initiate purchase via IAP.
    *   Story: See current subscription status in settings.
    *   Tech: Implement API endpoints for plans/subscription status.
    *   Tech: Implement *full* backend webhook handling for chosen provider(s) to update `subscriptions` table correctly.
    *   Tech: Implement *frontend* IAP purchase flow (`react-native-iap`).
    *   Tech: Implement API middleware/policies for feature gating (`CheckPremiumAccess`).
*   **Core Premium Value (Validation):**
    *   Story: Access the *full library* of protocol *summaries* (unlocking more content than free tier).
    *   Story: Set *one type* of simple customizable reminder (e.g., daily at a specific time) for *any* protocol. (Demonstrates core premium reminder value).
    *   Tech: Implement custom reminder API endpoints (basic create/view/delete).
    *   Tech: Implement scheduling/sending logic for custom reminders.

**Excluded from MVP (Potential Phase 2+):**

*   Detailed explanations/implementation guides (Premium Content Depth)
*   Resource links (Premium Content Depth)
*   Key Takeaways (Premium Content Depth)
*   Advanced reminder customization (complex frequencies, snooze)
*   Note-taking (even limited Free tier might be deferred if complex)
*   Tracking features (logging adherence, visualizations)
*   Offline Access
*   Advanced Note features (unlimited, tags, search, public notes)
*   Community Features
*   Personalized Routines/Stacks
*   Password Reset (could be deferred slightly if needed, but usually core)

**4. Next Steps**

1.  Import these stories into the chosen project management tool (Jira/Trello).
2.  Refine story details and add acceptance criteria.
3.  Estimate the effort for each story (e.g., using Story Points) with the development team.
4.  Prioritize the backlog further, confirming the MVP scope based on estimations and strategic goals.
5.  Begin sprint planning based on the prioritized MVP backlog.
</file>

<file path="ios/hubermanAppFrontend/Images.xcassets/AppIcon.appiconset/Contents.json">
{
  "images" : [
    {
      "idiom" : "iphone",
      "scale" : "2x",
      "size" : "20x20"
    },
    {
      "idiom" : "iphone",
      "scale" : "3x",
      "size" : "20x20"
    },
    {
      "idiom" : "iphone",
      "scale" : "2x",
      "size" : "29x29"
    },
    {
      "idiom" : "iphone",
      "scale" : "3x",
      "size" : "29x29"
    },
    {
      "idiom" : "iphone",
      "scale" : "2x",
      "size" : "40x40"
    },
    {
      "idiom" : "iphone",
      "scale" : "3x",
      "size" : "40x40"
    },
    {
      "idiom" : "iphone",
      "scale" : "2x",
      "size" : "60x60"
    },
    {
      "idiom" : "iphone",
      "scale" : "3x",
      "size" : "60x60"
    },
    {
      "idiom" : "ios-marketing",
      "scale" : "1x",
      "size" : "1024x1024"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}
</file>

<file path="ios/hubermanAppFrontend/Images.xcassets/Contents.json">
{
  "info" : {
    "version" : 1,
    "author" : "xcode"
  }
}
</file>

<file path="ios/hubermanAppFrontend/Info.plist">
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>CFBundleDevelopmentRegion</key>
	<string>en</string>
	<key>CFBundleDisplayName</key>
	<string>hubermanAppFrontend</string>
	<key>CFBundleExecutable</key>
	<string>$(EXECUTABLE_NAME)</string>
	<key>CFBundleIdentifier</key>
	<string>$(PRODUCT_BUNDLE_IDENTIFIER)</string>
	<key>CFBundleInfoDictionaryVersion</key>
	<string>6.0</string>
	<key>CFBundleName</key>
	<string>$(PRODUCT_NAME)</string>
	<key>CFBundlePackageType</key>
	<string>APPL</string>
	<key>CFBundleShortVersionString</key>
	<string>$(MARKETING_VERSION)</string>
	<key>CFBundleSignature</key>
	<string>????</string>
	<key>CFBundleVersion</key>
	<string>$(CURRENT_PROJECT_VERSION)</string>
	<key>LSRequiresIPhoneOS</key>
	<true/>
	<key>NSAppTransportSecurity</key>
	<dict>
	  <!-- Do not change NSAllowsArbitraryLoads to true, or you will risk app rejection! -->
		<key>NSAllowsArbitraryLoads</key>
		<false/>
		<key>NSAllowsLocalNetworking</key>
		<true/>
	</dict>
	<key>NSLocationWhenInUseUsageDescription</key>
	<string></string>
	<key>UILaunchStoryboardName</key>
	<string>LaunchScreen</string>
	<key>UIRequiredDeviceCapabilities</key>
	<array>
		<string>arm64</string>
	</array>
	<key>UISupportedInterfaceOrientations</key>
	<array>
		<string>UIInterfaceOrientationPortrait</string>
		<string>UIInterfaceOrientationLandscapeLeft</string>
		<string>UIInterfaceOrientationLandscapeRight</string>
	</array>
	<key>UIViewControllerBasedStatusBarAppearance</key>
	<false/>
</dict>
</plist>
</file>

<file path="ios/hubermanAppFrontend/LaunchScreen.storyboard">
<?xml version="1.0" encoding="UTF-8"?>
<document type="com.apple.InterfaceBuilder3.CocoaTouch.Storyboard.XIB" version="3.0" toolsVersion="15702" targetRuntime="iOS.CocoaTouch" propertyAccessControl="none" useAutolayout="YES" launchScreen="YES" useTraitCollections="YES" useSafeAreas="YES" colorMatched="YES" initialViewController="01J-lp-oVM">
    <device id="retina4_7" orientation="portrait" appearance="light"/>
    <dependencies>
        <deployment identifier="iOS"/>
        <plugIn identifier="com.apple.InterfaceBuilder.IBCocoaTouchPlugin" version="15704"/>
        <capability name="Safe area layout guides" minToolsVersion="9.0"/>
        <capability name="documents saved in the Xcode 8 format" minToolsVersion="8.0"/>
    </dependencies>
    <scenes>
        <!--View Controller-->
        <scene sceneID="EHf-IW-A2E">
            <objects>
                <viewController id="01J-lp-oVM" sceneMemberID="viewController">
                    <view key="view" contentMode="scaleToFill" id="Ze5-6b-2t3">
                        <rect key="frame" x="0.0" y="0.0" width="375" height="667"/>
                        <autoresizingMask key="autoresizingMask" widthSizable="YES" heightSizable="YES"/>
                        <subviews>
                            <label opaque="NO" clipsSubviews="YES" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" text="hubermanAppFrontend" textAlignment="center" lineBreakMode="middleTruncation" baselineAdjustment="alignBaselines" minimumFontSize="18" translatesAutoresizingMaskIntoConstraints="NO" id="GJd-Yh-RWb">
                                <rect key="frame" x="0.0" y="202" width="375" height="43"/>
                                <fontDescription key="fontDescription" type="boldSystem" pointSize="36"/>
                                <nil key="highlightedColor"/>
                            </label>
                            <label opaque="NO" clipsSubviews="YES" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" text="Powered by React Native" textAlignment="center" lineBreakMode="tailTruncation" baselineAdjustment="alignBaselines" minimumFontSize="9" translatesAutoresizingMaskIntoConstraints="NO" id="MN2-I3-ftu">
                                <rect key="frame" x="0.0" y="626" width="375" height="21"/>
                                <fontDescription key="fontDescription" type="system" pointSize="17"/>
                                <nil key="highlightedColor"/>
                            </label>
                        </subviews>
                        <color key="backgroundColor" systemColor="systemBackgroundColor" cocoaTouchSystemColor="whiteColor"/>
                        <constraints>
                            <constraint firstItem="Bcu-3y-fUS" firstAttribute="bottom" secondItem="MN2-I3-ftu" secondAttribute="bottom" constant="20" id="OZV-Vh-mqD"/>
                            <constraint firstItem="Bcu-3y-fUS" firstAttribute="centerX" secondItem="GJd-Yh-RWb" secondAttribute="centerX" id="Q3B-4B-g5h"/>
                            <constraint firstItem="MN2-I3-ftu" firstAttribute="centerX" secondItem="Bcu-3y-fUS" secondAttribute="centerX" id="akx-eg-2ui"/>
                            <constraint firstItem="MN2-I3-ftu" firstAttribute="leading" secondItem="Bcu-3y-fUS" secondAttribute="leading" id="i1E-0Y-4RG"/>
                            <constraint firstItem="GJd-Yh-RWb" firstAttribute="centerY" secondItem="Ze5-6b-2t3" secondAttribute="bottom" multiplier="1/3" constant="1" id="moa-c2-u7t"/>
                            <constraint firstItem="GJd-Yh-RWb" firstAttribute="leading" secondItem="Bcu-3y-fUS" secondAttribute="leading" symbolic="YES" id="x7j-FC-K8j"/>
                        </constraints>
                        <viewLayoutGuide key="safeArea" id="Bcu-3y-fUS"/>
                    </view>
                </viewController>
                <placeholder placeholderIdentifier="IBFirstResponder" id="iYj-Kq-Ea1" userLabel="First Responder" sceneMemberID="firstResponder"/>
            </objects>
            <point key="canvasLocation" x="52.173913043478265" y="375"/>
        </scene>
    </scenes>
</document>
</file>

<file path="ios/hubermanAppFrontend/PrivacyInfo.xcprivacy">
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>NSPrivacyAccessedAPITypes</key>
	<array>
		<dict>
			<key>NSPrivacyAccessedAPIType</key>
			<string>NSPrivacyAccessedAPICategoryFileTimestamp</string>
			<key>NSPrivacyAccessedAPITypeReasons</key>
			<array>
				<string>C617.1</string>
			</array>
		</dict>
		<dict>
			<key>NSPrivacyAccessedAPIType</key>
			<string>NSPrivacyAccessedAPICategoryUserDefaults</string>
			<key>NSPrivacyAccessedAPITypeReasons</key>
			<array>
				<string>CA92.1</string>
			</array>
		</dict>
		<dict>
			<key>NSPrivacyAccessedAPIType</key>
			<string>NSPrivacyAccessedAPICategorySystemBootTime</string>
			<key>NSPrivacyAccessedAPITypeReasons</key>
			<array>
				<string>35F9.1</string>
			</array>
		</dict>
	</array>
	<key>NSPrivacyCollectedDataTypes</key>
	<array/>
	<key>NSPrivacyTracking</key>
	<false/>
</dict>
</plist>
</file>

<file path="ios/hubermanAppFrontend.xcodeproj/xcshareddata/xcschemes/hubermanAppFrontend.xcscheme">
<?xml version="1.0" encoding="UTF-8"?>
<Scheme
   LastUpgradeVersion = "1210"
   version = "1.3">
   <BuildAction
      parallelizeBuildables = "YES"
      buildImplicitDependencies = "YES">
      <BuildActionEntries>
         <BuildActionEntry
            buildForTesting = "YES"
            buildForRunning = "YES"
            buildForProfiling = "YES"
            buildForArchiving = "YES"
            buildForAnalyzing = "YES">
            <BuildableReference
               BuildableIdentifier = "primary"
               BlueprintIdentifier = "13B07F861A680F5B00A75B9A"
               BuildableName = "hubermanAppFrontend.app"
               BlueprintName = "hubermanAppFrontend"
               ReferencedContainer = "container:hubermanAppFrontend.xcodeproj">
            </BuildableReference>
         </BuildActionEntry>
      </BuildActionEntries>
   </BuildAction>
   <TestAction
      buildConfiguration = "Debug"
      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
      shouldUseLaunchSchemeArgsEnv = "YES">
      <Testables>
         <TestableReference
            skipped = "NO">
            <BuildableReference
               BuildableIdentifier = "primary"
               BlueprintIdentifier = "00E356ED1AD99517003FC87E"
               BuildableName = "hubermanAppFrontendTests.xctest"
               BlueprintName = "hubermanAppFrontendTests"
               ReferencedContainer = "container:hubermanAppFrontend.xcodeproj">
            </BuildableReference>
         </TestableReference>
      </Testables>
   </TestAction>
   <LaunchAction
      buildConfiguration = "Debug"
      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
      launchStyle = "0"
      useCustomWorkingDirectory = "NO"
      ignoresPersistentStateOnLaunch = "NO"
      debugDocumentVersioning = "YES"
      debugServiceExtension = "internal"
      allowLocationSimulation = "YES">
      <BuildableProductRunnable
         runnableDebuggingMode = "0">
         <BuildableReference
            BuildableIdentifier = "primary"
            BlueprintIdentifier = "13B07F861A680F5B00A75B9A"
            BuildableName = "hubermanAppFrontend.app"
            BlueprintName = "hubermanAppFrontend"
            ReferencedContainer = "container:hubermanAppFrontend.xcodeproj">
         </BuildableReference>
      </BuildableProductRunnable>
   </LaunchAction>
   <ProfileAction
      buildConfiguration = "Release"
      shouldUseLaunchSchemeArgsEnv = "YES"
      savedToolIdentifier = ""
      useCustomWorkingDirectory = "NO"
      debugDocumentVersioning = "YES">
      <BuildableProductRunnable
         runnableDebuggingMode = "0">
         <BuildableReference
            BuildableIdentifier = "primary"
            BlueprintIdentifier = "13B07F861A680F5B00A75B9A"
            BuildableName = "hubermanAppFrontend.app"
            BlueprintName = "hubermanAppFrontend"
            ReferencedContainer = "container:hubermanAppFrontend.xcodeproj">
         </BuildableReference>
      </BuildableProductRunnable>
   </ProfileAction>
   <AnalyzeAction
      buildConfiguration = "Debug">
   </AnalyzeAction>
   <ArchiveAction
      buildConfiguration = "Release"
      revealArchiveInOrganizer = "YES">
   </ArchiveAction>
</Scheme>
</file>

<file path="ios/hubermanAppFrontend.xcodeproj/project.pbxproj">
// !$*UTF8*$!
{
	archiveVersion = 1;
	classes = {
	};
	objectVersion = 54;
	objects = {

/* Begin PBXBuildFile section */
		0C80B921A6F3F58F76C31292 /* libPods-hubermanAppFrontend.a in Frameworks */ = {isa = PBXBuildFile; fileRef = 5DCACB8F33CDC322A6C60F78 /* libPods-hubermanAppFrontend.a */; };
		13B07FBF1A68108700A75B9A /* Images.xcassets in Resources */ = {isa = PBXBuildFile; fileRef = 13B07FB51A68108700A75B9A /* Images.xcassets */; };
		761780ED2CA45674006654EE /* AppDelegate.swift in Sources */ = {isa = PBXBuildFile; fileRef = 761780EC2CA45674006654EE /* AppDelegate.swift */; };
		81AB9BB82411601600AC10FF /* LaunchScreen.storyboard in Resources */ = {isa = PBXBuildFile; fileRef = 81AB9BB72411601600AC10FF /* LaunchScreen.storyboard */; };
/* End PBXBuildFile section */

/* Begin PBXContainerItemProxy section */
		00E356F41AD99517003FC87E /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = 83CBB9F71A601CBA00E9B192 /* Project object */;
			proxyType = 1;
			remoteGlobalIDString = 13B07F861A680F5B00A75B9A;
			remoteInfo = hubermanAppFrontend;
		};
/* End PBXContainerItemProxy section */

/* Begin PBXFileReference section */
		00E356F11AD99517003FC87E /* Info.plist */ = {isa = PBXFileReference; lastKnownFileType = text.plist.xml; path = Info.plist; sourceTree = "<group>"; };
		13B07F961A680F5B00A75B9A /* hubermanAppFrontend.app */ = {isa = PBXFileReference; explicitFileType = wrapper.application; includeInIndex = 0; path = hubermanAppFrontend.app; sourceTree = BUILT_PRODUCTS_DIR; };
		13B07FB51A68108700A75B9A /* Images.xcassets */ = {isa = PBXFileReference; lastKnownFileType = folder.assetcatalog; name = Images.xcassets; path = hubermanAppFrontend/Images.xcassets; sourceTree = "<group>"; };
		13B07FB61A68108700A75B9A /* Info.plist */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.plist.xml; name = Info.plist; path = hubermanAppFrontend/Info.plist; sourceTree = "<group>"; };
		13B07FB81A68108700A75B9A /* PrivacyInfo.xcprivacy */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.plist.xml; name = PrivacyInfo.xcprivacy; path = hubermanAppFrontend/PrivacyInfo.xcprivacy; sourceTree = "<group>"; };
		3B4392A12AC88292D35C810B /* Pods-hubermanAppFrontend.debug.xcconfig */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = text.xcconfig; name = "Pods-hubermanAppFrontend.debug.xcconfig"; path = "Target Support Files/Pods-hubermanAppFrontend/Pods-hubermanAppFrontend.debug.xcconfig"; sourceTree = "<group>"; };
		5709B34CF0A7D63546082F79 /* Pods-hubermanAppFrontend.release.xcconfig */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = text.xcconfig; name = "Pods-hubermanAppFrontend.release.xcconfig"; path = "Target Support Files/Pods-hubermanAppFrontend/Pods-hubermanAppFrontend.release.xcconfig"; sourceTree = "<group>"; };
		5DCACB8F33CDC322A6C60F78 /* libPods-hubermanAppFrontend.a */ = {isa = PBXFileReference; explicitFileType = archive.ar; includeInIndex = 0; path = "libPods-hubermanAppFrontend.a"; sourceTree = BUILT_PRODUCTS_DIR; };
		761780EC2CA45674006654EE /* AppDelegate.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; name = AppDelegate.swift; path = hubermanAppFrontend/AppDelegate.swift; sourceTree = "<group>"; };
		81AB9BB72411601600AC10FF /* LaunchScreen.storyboard */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = file.storyboard; name = LaunchScreen.storyboard; path = hubermanAppFrontend/LaunchScreen.storyboard; sourceTree = "<group>"; };
		ED297162215061F000B7C4FE /* JavaScriptCore.framework */ = {isa = PBXFileReference; lastKnownFileType = wrapper.framework; name = JavaScriptCore.framework; path = System/Library/Frameworks/JavaScriptCore.framework; sourceTree = SDKROOT; };
/* End PBXFileReference section */

/* Begin PBXFrameworksBuildPhase section */
		13B07F8C1A680F5B00A75B9A /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
				0C80B921A6F3F58F76C31292 /* libPods-hubermanAppFrontend.a in Frameworks */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXFrameworksBuildPhase section */

/* Begin PBXGroup section */
		00E356F01AD99517003FC87E /* Supporting Files */ = {
			isa = PBXGroup;
			children = (
				00E356F11AD99517003FC87E /* Info.plist */,
			);
			name = "Supporting Files";
			sourceTree = "<group>";
		};
		13B07FAE1A68108700A75B9A /* hubermanAppFrontend */ = {
			isa = PBXGroup;
			children = (
				13B07FB51A68108700A75B9A /* Images.xcassets */,
				761780EC2CA45674006654EE /* AppDelegate.swift */,
				13B07FB61A68108700A75B9A /* Info.plist */,
				81AB9BB72411601600AC10FF /* LaunchScreen.storyboard */,
				13B07FB81A68108700A75B9A /* PrivacyInfo.xcprivacy */,
			);
			name = hubermanAppFrontend;
			sourceTree = "<group>";
		};
		2D16E6871FA4F8E400B85C8A /* Frameworks */ = {
			isa = PBXGroup;
			children = (
				ED297162215061F000B7C4FE /* JavaScriptCore.framework */,
				5DCACB8F33CDC322A6C60F78 /* libPods-hubermanAppFrontend.a */,
			);
			name = Frameworks;
			sourceTree = "<group>";
		};
		832341AE1AAA6A7D00B99B32 /* Libraries */ = {
			isa = PBXGroup;
			children = (
			);
			name = Libraries;
			sourceTree = "<group>";
		};
		83CBB9F61A601CBA00E9B192 = {
			isa = PBXGroup;
			children = (
				13B07FAE1A68108700A75B9A /* hubermanAppFrontend */,
				832341AE1AAA6A7D00B99B32 /* Libraries */,
				83CBBA001A601CBA00E9B192 /* Products */,
				2D16E6871FA4F8E400B85C8A /* Frameworks */,
				BBD78D7AC51CEA395F1C20DB /* Pods */,
			);
			indentWidth = 2;
			sourceTree = "<group>";
			tabWidth = 2;
			usesTabs = 0;
		};
		83CBBA001A601CBA00E9B192 /* Products */ = {
			isa = PBXGroup;
			children = (
				13B07F961A680F5B00A75B9A /* hubermanAppFrontend.app */,
			);
			name = Products;
			sourceTree = "<group>";
		};
		BBD78D7AC51CEA395F1C20DB /* Pods */ = {
			isa = PBXGroup;
			children = (
				3B4392A12AC88292D35C810B /* Pods-hubermanAppFrontend.debug.xcconfig */,
				5709B34CF0A7D63546082F79 /* Pods-hubermanAppFrontend.release.xcconfig */,
			);
			path = Pods;
			sourceTree = "<group>";
		};
/* End PBXGroup section */

/* Begin PBXNativeTarget section */
		13B07F861A680F5B00A75B9A /* hubermanAppFrontend */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = 13B07F931A680F5B00A75B9A /* Build configuration list for PBXNativeTarget "hubermanAppFrontend" */;
			buildPhases = (
				C38B50BA6285516D6DCD4F65 /* [CP] Check Pods Manifest.lock */,
				13B07F871A680F5B00A75B9A /* Sources */,
				13B07F8C1A680F5B00A75B9A /* Frameworks */,
				13B07F8E1A680F5B00A75B9A /* Resources */,
				00DD1BFF1BD5951E006B06BC /* Bundle React Native code and images */,
				00EEFC60759A1932668264C0 /* [CP] Embed Pods Frameworks */,
				E235C05ADACE081382539298 /* [CP] Copy Pods Resources */,
			);
			buildRules = (
			);
			dependencies = (
			);
			name = hubermanAppFrontend;
			productName = hubermanAppFrontend;
			productReference = 13B07F961A680F5B00A75B9A /* hubermanAppFrontend.app */;
			productType = "com.apple.product-type.application";
		};
/* End PBXNativeTarget section */

/* Begin PBXProject section */
		83CBB9F71A601CBA00E9B192 /* Project object */ = {
			isa = PBXProject;
			attributes = {
				LastUpgradeCheck = 1210;
				TargetAttributes = {
					13B07F861A680F5B00A75B9A = {
						LastSwiftMigration = 1120;
					};
				};
			};
			buildConfigurationList = 83CBB9FA1A601CBA00E9B192 /* Build configuration list for PBXProject "hubermanAppFrontend" */;
			compatibilityVersion = "Xcode 12.0";
			developmentRegion = en;
			hasScannedForEncodings = 0;
			knownRegions = (
				en,
				Base,
			);
			mainGroup = 83CBB9F61A601CBA00E9B192;
			productRefGroup = 83CBBA001A601CBA00E9B192 /* Products */;
			projectDirPath = "";
			projectRoot = "";
			targets = (
				13B07F861A680F5B00A75B9A /* hubermanAppFrontend */,
			);
		};
/* End PBXProject section */

/* Begin PBXResourcesBuildPhase section */
		00E356EC1AD99517003FC87E /* Resources */ = {
			isa = PBXResourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		13B07F8E1A680F5B00A75B9A /* Resources */ = {
			isa = PBXResourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				81AB9BB82411601600AC10FF /* LaunchScreen.storyboard in Resources */,
				13B07FBF1A68108700A75B9A /* Images.xcassets in Resources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXResourcesBuildPhase section */

/* Begin PBXShellScriptBuildPhase section */
		00DD1BFF1BD5951E006B06BC /* Bundle React Native code and images */ = {
			isa = PBXShellScriptBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			inputPaths = (
				"$(SRCROOT)/.xcode.env.local",
				"$(SRCROOT)/.xcode.env",
			);
			name = "Bundle React Native code and images";
			outputPaths = (
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = "set -e\n\nWITH_ENVIRONMENT=\"$REACT_NATIVE_PATH/scripts/xcode/with-environment.sh\"\nREACT_NATIVE_XCODE=\"$REACT_NATIVE_PATH/scripts/react-native-xcode.sh\"\n\n/bin/sh -c \"$WITH_ENVIRONMENT $REACT_NATIVE_XCODE\"\n";
		};
		00EEFC60759A1932668264C0 /* [CP] Embed Pods Frameworks */ = {
			isa = PBXShellScriptBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			inputFileListPaths = (
				"${PODS_ROOT}/Target Support Files/Pods-hubermanAppFrontend/Pods-hubermanAppFrontend-frameworks-${CONFIGURATION}-input-files.xcfilelist",
			);
			name = "[CP] Embed Pods Frameworks";
			outputFileListPaths = (
				"${PODS_ROOT}/Target Support Files/Pods-hubermanAppFrontend/Pods-hubermanAppFrontend-frameworks-${CONFIGURATION}-output-files.xcfilelist",
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = "\"${PODS_ROOT}/Target Support Files/Pods-hubermanAppFrontend/Pods-hubermanAppFrontend-frameworks.sh\"\n";
			showEnvVarsInLog = 0;
		};
		C38B50BA6285516D6DCD4F65 /* [CP] Check Pods Manifest.lock */ = {
			isa = PBXShellScriptBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			inputFileListPaths = (
			);
			inputPaths = (
				"${PODS_PODFILE_DIR_PATH}/Podfile.lock",
				"${PODS_ROOT}/Manifest.lock",
			);
			name = "[CP] Check Pods Manifest.lock";
			outputFileListPaths = (
			);
			outputPaths = (
				"$(DERIVED_FILE_DIR)/Pods-hubermanAppFrontend-checkManifestLockResult.txt",
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = "diff \"${PODS_PODFILE_DIR_PATH}/Podfile.lock\" \"${PODS_ROOT}/Manifest.lock\" > /dev/null\nif [ $? != 0 ] ; then\n    # print error to STDERR\n    echo \"error: The sandbox is not in sync with the Podfile.lock. Run 'pod install' or update your CocoaPods installation.\" >&2\n    exit 1\nfi\n# This output is used by Xcode 'outputs' to avoid re-running this script phase.\necho \"SUCCESS\" > \"${SCRIPT_OUTPUT_FILE_0}\"\n";
			showEnvVarsInLog = 0;
		};
		E235C05ADACE081382539298 /* [CP] Copy Pods Resources */ = {
			isa = PBXShellScriptBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			inputFileListPaths = (
				"${PODS_ROOT}/Target Support Files/Pods-hubermanAppFrontend/Pods-hubermanAppFrontend-resources-${CONFIGURATION}-input-files.xcfilelist",
			);
			name = "[CP] Copy Pods Resources";
			outputFileListPaths = (
				"${PODS_ROOT}/Target Support Files/Pods-hubermanAppFrontend/Pods-hubermanAppFrontend-resources-${CONFIGURATION}-output-files.xcfilelist",
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = "\"${PODS_ROOT}/Target Support Files/Pods-hubermanAppFrontend/Pods-hubermanAppFrontend-resources.sh\"\n";
			showEnvVarsInLog = 0;
		};
/* End PBXShellScriptBuildPhase section */

/* Begin PBXSourcesBuildPhase section */
		13B07F871A680F5B00A75B9A /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				761780ED2CA45674006654EE /* AppDelegate.swift in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXSourcesBuildPhase section */

/* Begin PBXTargetDependency section */
		00E356F51AD99517003FC87E /* PBXTargetDependency */ = {
			isa = PBXTargetDependency;
			target = 13B07F861A680F5B00A75B9A /* hubermanAppFrontend */;
			targetProxy = 00E356F41AD99517003FC87E /* PBXContainerItemProxy */;
		};
/* End PBXTargetDependency section */

/* Begin XCBuildConfiguration section */
		13B07F941A680F5B00A75B9A /* Debug */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = 3B4392A12AC88292D35C810B /* Pods-hubermanAppFrontend.debug.xcconfig */;
			buildSettings = {
				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
				CLANG_ENABLE_MODULES = YES;
				CURRENT_PROJECT_VERSION = 1;
				ENABLE_BITCODE = NO;
				INFOPLIST_FILE = hubermanAppFrontend/Info.plist;
				IPHONEOS_DEPLOYMENT_TARGET = 15.1;
				LD_RUNPATH_SEARCH_PATHS = (
					"$(inherited)",
					"@executable_path/Frameworks",
				);
				MARKETING_VERSION = 1.0;
				OTHER_LDFLAGS = (
					"$(inherited)",
					"-ObjC",
					"-lc++",
				);
				PRODUCT_BUNDLE_IDENTIFIER = "org.reactjs.native.example.$(PRODUCT_NAME:rfc1034identifier)";
				PRODUCT_NAME = hubermanAppFrontend;
				SWIFT_OPTIMIZATION_LEVEL = "-Onone";
				SWIFT_VERSION = 5.0;
				VERSIONING_SYSTEM = "apple-generic";
			};
			name = Debug;
		};
		13B07F951A680F5B00A75B9A /* Release */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = 5709B34CF0A7D63546082F79 /* Pods-hubermanAppFrontend.release.xcconfig */;
			buildSettings = {
				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
				CLANG_ENABLE_MODULES = YES;
				CURRENT_PROJECT_VERSION = 1;
				INFOPLIST_FILE = hubermanAppFrontend/Info.plist;
				IPHONEOS_DEPLOYMENT_TARGET = 15.1;
				LD_RUNPATH_SEARCH_PATHS = (
					"$(inherited)",
					"@executable_path/Frameworks",
				);
				MARKETING_VERSION = 1.0;
				OTHER_LDFLAGS = (
					"$(inherited)",
					"-ObjC",
					"-lc++",
				);
				PRODUCT_BUNDLE_IDENTIFIER = "org.reactjs.native.example.$(PRODUCT_NAME:rfc1034identifier)";
				PRODUCT_NAME = hubermanAppFrontend;
				SWIFT_VERSION = 5.0;
				VERSIONING_SYSTEM = "apple-generic";
			};
			name = Release;
		};
		83CBBA201A601CBA00E9B192 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				CLANG_ANALYZER_LOCALIZABILITY_NONLOCALIZED = YES;
				CLANG_CXX_LANGUAGE_STANDARD = "c++20";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_COMMA = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER = YES;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_STRICT_PROTOTYPES = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				"CODE_SIGN_IDENTITY[sdk=iphoneos*]" = "iPhone Developer";
				COPY_PHASE_STRIP = NO;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				ENABLE_TESTABILITY = YES;
				"EXCLUDED_ARCHS[sdk=iphonesimulator*]" = "";
				GCC_C_LANGUAGE_STANDARD = gnu99;
				GCC_DYNAMIC_NO_PIC = NO;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_OPTIMIZATION_LEVEL = 0;
				GCC_PREPROCESSOR_DEFINITIONS = (
					"DEBUG=1",
					"$(inherited)",
				);
				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				IPHONEOS_DEPLOYMENT_TARGET = 15.1;
				LD_RUNPATH_SEARCH_PATHS = (
					/usr/lib/swift,
					"$(inherited)",
				);
				LIBRARY_SEARCH_PATHS = (
					"\"$(SDKROOT)/usr/lib/swift\"",
					"\"$(TOOLCHAIN_DIR)/usr/lib/swift/$(PLATFORM_NAME)\"",
					"\"$(inherited)\"",
				);
				MTL_ENABLE_DEBUG_INFO = YES;
				ONLY_ACTIVE_ARCH = YES;
				OTHER_CPLUSPLUSFLAGS = (
					"$(OTHER_CFLAGS)",
					"-DFOLLY_NO_CONFIG",
					"-DFOLLY_MOBILE=1",
					"-DFOLLY_USE_LIBCPP=1",
					"-DFOLLY_CFG_NO_COROUTINES=1",
					"-DFOLLY_HAVE_CLOCK_GETTIME=1",
				);
				SDKROOT = iphoneos;
			};
			name = Debug;
		};
		83CBBA211A601CBA00E9B192 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				CLANG_ANALYZER_LOCALIZABILITY_NONLOCALIZED = YES;
				CLANG_CXX_LANGUAGE_STANDARD = "c++20";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_COMMA = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER = YES;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_STRICT_PROTOTYPES = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				"CODE_SIGN_IDENTITY[sdk=iphoneos*]" = "iPhone Developer";
				COPY_PHASE_STRIP = YES;
				ENABLE_NS_ASSERTIONS = NO;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				"EXCLUDED_ARCHS[sdk=iphonesimulator*]" = "";
				GCC_C_LANGUAGE_STANDARD = gnu99;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				IPHONEOS_DEPLOYMENT_TARGET = 15.1;
				LD_RUNPATH_SEARCH_PATHS = (
					/usr/lib/swift,
					"$(inherited)",
				);
				LIBRARY_SEARCH_PATHS = (
					"\"$(SDKROOT)/usr/lib/swift\"",
					"\"$(TOOLCHAIN_DIR)/usr/lib/swift/$(PLATFORM_NAME)\"",
					"\"$(inherited)\"",
				);
				MTL_ENABLE_DEBUG_INFO = NO;
				OTHER_CPLUSPLUSFLAGS = (
					"$(OTHER_CFLAGS)",
					"-DFOLLY_NO_CONFIG",
					"-DFOLLY_MOBILE=1",
					"-DFOLLY_USE_LIBCPP=1",
					"-DFOLLY_CFG_NO_COROUTINES=1",
					"-DFOLLY_HAVE_CLOCK_GETTIME=1",
				);
				SDKROOT = iphoneos;
				VALIDATE_PRODUCT = YES;
			};
			name = Release;
		};
/* End XCBuildConfiguration section */

/* Begin XCConfigurationList section */
		13B07F931A680F5B00A75B9A /* Build configuration list for PBXNativeTarget "hubermanAppFrontend" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				13B07F941A680F5B00A75B9A /* Debug */,
				13B07F951A680F5B00A75B9A /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		83CBB9FA1A601CBA00E9B192 /* Build configuration list for PBXProject "hubermanAppFrontend" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				83CBBA201A601CBA00E9B192 /* Debug */,
				83CBBA211A601CBA00E9B192 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
/* End XCConfigurationList section */
	};
	rootObject = 83CBB9F71A601CBA00E9B192 /* Project object */;
}
</file>

<file path="ios/.xcode.env">
# This `.xcode.env` file is versioned and is used to source the environment
# used when running script phases inside Xcode.
# To customize your local environment, you can create an `.xcode.env.local`
# file that is not versioned.

# NODE_BINARY variable contains the PATH to the node executable.
#
# Customize the NODE_BINARY variable here.
# For example, to use nvm with brew, add the following line
# . "$(brew --prefix nvm)/nvm.sh" --no-use
export NODE_BINARY=$(command -v node)
</file>

<file path="src/navigation/AuthStack.d.ts">
import React from 'react';

declare const AuthStack: React.FC;
export default AuthStack;
</file>

<file path="src/screens/Notes/NotesScreen.tsx">
import React from 'react';
import { View, Text, StyleSheet } from 'react-native';

const NotesScreen: React.FC = () => {
  return (
    <View style={styles.container}>
      <Text>Notes Screen (Placeholder)</Text>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
});

export default NotesScreen;
</file>

<file path="src/screens/Reminders/CreateEditReminderScreen.tsx">
import React, { useState, useEffect } from 'react';
import { View, Text, StyleSheet, TextInput, Button, ActivityIndicator } from 'react-native';
import useAuthStore from '../../store/authStore';
import { createReminder, updateReminder, Reminder } from '../../services/api/reminders';
import { NativeStackScreenProps } from '@react-navigation/native-stack';
import { ProtocolStackParamList } from '../../navigation/AppStack.d';

type CreateEditReminderScreenProps = NativeStackScreenProps<ProtocolStackParamList, 'CreateEditReminder'>;

const CreateEditReminderScreen: React.FC<CreateEditReminderScreenProps> = ({ route, navigation }) => {
  const reminder = route.params?.reminder; // reminder will be undefined for new reminders
  const { user } = useAuthStore();
  const [protocolId, setProtocolId] = useState(route.params?.reminder?.protocolId || '');
  const [time, setTime] = useState(route.params?.reminder?.time || ''); // e.g., "HH:MM"
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (reminder) {
      setProtocolId(reminder.protocolId);
      setTime(reminder.time);
    }
  }, [reminder]);

  const handleSave = async () => {
    if (!user) return;
    setLoading(true);
    setError(null);
    try {
      const reminderData = { protocolId, time, userId: user.id };
      if (reminder) {
        await updateReminder(reminder.id, reminderData);
      } else {
        await createReminder(reminderData);
      }
      navigation.goBack(); // Go back to the reminder list on success
    } catch (err: any) {
      setError('Failed to save reminder.');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  if (!user?.isPremium) {
    return (
      <View style={styles.container}>
        <Text>This feature is only available for premium users.</Text>
      </View>
    );
  }

  if (loading) {
    return (
      <View style={[styles.container, styles.centered]}>
        <ActivityIndicator size="large" color="#0000ff" />
        <Text style={{ marginTop: 10 }}>Saving Reminder...</Text>
      </View>
    );
  }

  if (error) {
    return (
      <View style={[styles.container, styles.centered]}>
        <Text style={{ color: 'red' }}>{error}</Text>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      <Text style={styles.title}>{reminder ? 'Edit Reminder' : 'Create Reminder'}</Text>
      <TextInput
        style={styles.input}
        placeholder="Protocol ID"
        value={protocolId}
        onChangeText={setProtocolId}
      />
      <TextInput
        style={styles.input}
        placeholder="Time (HH:MM)"
        value={time}
        onChangeText={setTime}
      />
      <Button title="Save Reminder" onPress={handleSave} />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  centered: {
    justifyContent: 'center',
    alignItems: 'center',
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 20,
  },
  input: {
    width: '100%',
    height: 40,
    borderColor: 'gray',
    borderWidth: 1,
    marginBottom: 10,
    paddingHorizontal: 10,
  },
});

export default CreateEditReminderScreen;
</file>

<file path="src/screens/HomeScreen.tsx">
import React from 'react';
import { View, Text, Button } from 'react-native';
import { useAuthStore } from '../store/authStore';

const HomeScreen = () => {
  const { logout } = useAuthStore();

  return (
    <View>
      <Text>Welcome to the App!</Text>
      <Button title="Logout" onPress={logout} />
    </View>
  );
};

export default HomeScreen;
</file>

<file path="src/screens/PremiumScreen.tsx">
import React, { useEffect, useState } from 'react';
import { View, Text, StyleSheet, ActivityIndicator, ScrollView, Alert, Platform } from 'react-native';
import { fetchPlans } from '../services/api/billing';
import { Plan } from '../types/billing';
import Button from '../components/Button/Button';
import * as RNIap from 'react-native-iap';

const itemSkus = Platform.select({
  ios: [
    'premium_monthly', // Replace with your actual iOS product IDs
    'premium_annual',
  ],
  android: [
    'premium_monthly', // Replace with your actual Android product IDs
    'premium_annual',
  ],
  default: [],
});

const PremiumScreen: React.FC = () => {
  const [plans, setPlans] = useState<Plan[]>([]);
  const [loading, setLoading] = useState(true);
  const [products, setProducts] = useState<RNIap.Product[]>([]);

  useEffect(() => {
    const initializeIap = async () => {
      try {
        await RNIap.initConnection();
        const availableProducts = await RNIap.getProducts({ skus: itemSkus });
        setProducts(availableProducts);
      } catch (err: any) {
        console.warn(err); // standardized err.code and err.message available
        Alert.alert('IAP Error', err.message);
      } finally {
        setLoading(false);
      }
    };

    const loadPlans = async () => {
      try {
        const fetchedPlans = await fetchPlans();
        setPlans(fetchedPlans);
      } catch (error) {
        console.error('Failed to fetch plans:', error);
        Alert.alert('Error', 'Failed to load subscription plans.');
      }
    };

    initializeIap();
    loadPlans();

    return () => {
      RNIap.endConnection();
    };
  }, []);

  const requestSubscription = async (sku: string) => {
    try {
      await RNIap.requestSubscription({ sku });
      // Purchase success will be handled by backend webhook
      Alert.alert('Purchase Initiated', 'Your purchase is being processed. Your subscription status will update shortly.');
    } catch (err: any) {
      console.warn(err);
      Alert.alert('Purchase Error', err.message);
    }
  };

  if (loading) {
    return (
      <View style={styles.centered}>
        <ActivityIndicator size="large" />
      </View>
    );
  }

  return (
    <ScrollView style={styles.container}>
      <Text style={styles.title}>Go Premium</Text>
      <Text style={styles.description}>Unlock all features with a premium subscription.</Text>

      {plans.map((plan) => {
        const product = products.find(p => p.productId === plan.id);
        if (!product) return null;

        return (
          <View key={plan.id} style={styles.planCard}>
            <Text style={styles.planName}>{plan.name}</Text>
            <Text style={styles.planPrice}>{product.localizedPrice}</Text>
            <Text style={styles.planDescription}>{plan.description}</Text>
            <Button title={`Subscribe to ${plan.name}`} onPress={() => requestSubscription(product.productId)} />
          </View>
        );
      })}
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
  },
  centered: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 10,
    textAlign: 'center',
  },
  description: {
    fontSize: 16,
    marginBottom: 20,
    textAlign: 'center',
    color: '#666',
  },
  planCard: {
    backgroundColor: '#f9f9f9',
    padding: 15,
    borderRadius: 8,
    marginBottom: 15,
    alignItems: 'center',
  },
  planName: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 5,
  },
  planPrice: {
    fontSize: 16,
    color: 'green',
    marginBottom: 10,
  },
  planDescription: {
    fontSize: 14,
    color: '#555',
    marginBottom: 15,
    textAlign: 'center',
  },
});

export default PremiumScreen;
</file>

<file path="src/screens/RegisterScreen.tsx">
import React, { useState } from 'react';
import { View, Text, TextInput, Button, StyleSheet, Alert } from 'react-native';
import { useAuthStore } from '../store/authStore';

interface RegisterScreenProps {
  navigation: any;
}

const RegisterScreen: React.FC<RegisterScreenProps> = ({ navigation }) => {
  const { register } = useAuthStore();
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [loading, setLoading] = useState(false);

  const handleRegister = async () => {
    if (!email || !password) {
      Alert.alert('Error', 'Please fill all fields');
      return;
    }

    setLoading(true);
    try {
      await register(email, password);
      navigation.navigate('Home');
    } catch (error) {
      Alert.alert('Error', 'Registration failed');
    } finally {
      setLoading(false);
    }
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Create Account</Text>
      <TextInput
        style={styles.input}
        placeholder="Email"
        value={email}
        onChangeText={setEmail}
        autoCapitalize="none"
        keyboardType="email-address"
        autoComplete="email"
        placeholderTextColor="#999"
      />
      <TextInput
        style={styles.input}
        placeholder="Password"
        value={password}
        onChangeText={setPassword}
        secureTextEntry
        autoComplete="password"
        placeholderTextColor="#999"
      />
      <Button 
        title={loading ? "Loading..." : "Register"} 
        onPress={handleRegister} 
        disabled={loading}
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    justifyContent: 'center',
    backgroundColor: '#fff',
  },
  title: {
    fontSize: 24,
    marginBottom: 20,
    textAlign: 'center',
    color: '#333',
  },
  input: {
    height: 50,
    borderColor: '#ddd',
    borderWidth: 1,
    marginBottom: 15,
    paddingHorizontal: 15,
    borderRadius: 5,
    fontSize: 16,
    color: '#333',
  },
});

export default RegisterScreen;
</file>

<file path="src/services/api/auth.ts">
import axios from 'axios';

const API_BASE_URL = process.env.API_BASE_URL || 'http://localhost:3000/api';

export const register = async (userData: {
  email: string;
  password: string;
  name?: string;
}) => {
  try {
    const response = await axios.post(`${API_BASE_URL}/register`, userData);
    return response.data;
  } catch (error) {
    throw error;
  }
};

export const login = async (credentials: {
  email: string;
  password: string;
}) => {
  try {
    const response = await axios.post(`${API_BASE_URL}/login`, credentials);
    return response.data;
  } catch (error) {
    throw error;
  }
};

export const logout = async () => {
  try {
    const response = await axios.post(`${API_BASE_URL}/logout`);
    return response.data;
  } catch (error) {
    throw error;
  }
};

export const forgotPassword = async (email: string) => {
  try {
    const response = await axios.post(`${API_BASE_URL}/forgot-password`, { email });
    return response.data;
  } catch (error) {
    throw error;
  }
};

export const resetPassword = async (token: string, newPassword: string) => {
  try {
    const response = await axios.post(`${API_BASE_URL}/reset-password`, {
      token,
      newPassword
    });
    return response.data;
  } catch (error) {
    throw error;
  }
};
</file>

<file path="src/services/api/billing.ts">
import axios from 'axios';
import { API_BASE_URL } from '../../config';
import { Plan, SubscriptionStatus } from '../../types/billing';

export const fetchPlans = async (): Promise<Plan[]> => {
  try {
    const response = await axios.get(`${API_BASE_URL}/plans`);
    return response.data;
  } catch (error) {
    console.error('Error fetching plans:', error);
    throw error;
  }
};

export const fetchSubscriptionStatus = async (userId: string): Promise<SubscriptionStatus> => {
  try {
    const response = await axios.get(`${API_BASE_URL}/user/subscription`, {
      params: { userId }
    });
    return response.data;
  } catch (error) {
    console.error('Error fetching subscription status:', error);
    throw error;
  }
};
</file>

<file path="src/services/api/reminders.ts">
import axios from 'axios';

const API_BASE_URL = process.env.API_BASE_URL || 'http://localhost:3000/api';

export interface Reminder {
  id: string;
  protocolId: string;
  time: string;
  userId: string;
}

export const fetchReminders = async (userId: string): Promise<Reminder[]> => {
  try {
    const response = await axios.get(`${API_BASE_URL}/reminders?userId=${userId}`);
    return response.data;
  } catch (error) {
    throw error;
  }
};

export const createReminder = async (reminder: Omit<Reminder, 'id'>): Promise<Reminder> => {
  try {
    const response = await axios.post(`${API_BASE_URL}/reminders`, reminder);
    return response.data;
  } catch (error) {
    throw error;
  }
};

export const updateReminder = async (id: string, reminder: Omit<Reminder, 'id'>): Promise<Reminder> => {
  try {
    const response = await axios.put(`${API_BASE_URL}/reminders/${id}`, reminder);
    return response.data;
  } catch (error) {
    throw error;
  }
};

export const deleteReminder = async (id: string): Promise<void> => {
  try {
    await axios.delete(`${API_BASE_URL}/reminders/${id}`);
  } catch (error) {
    throw error;
  }
};
</file>

<file path="src/services/api/user.ts">
import axios from 'axios';
import { API_BASE_URL } from '../../config';

export const sendDeviceToken = async (token: string) => {
  try {
    const response = await axios.post(`${API_BASE_URL}/user/device-token`, {
      token,
    });
    return response.data;
  } catch (error) {
    console.error('Error sending device token:', error);
    throw error;
  }
};
</file>

<file path="src/config.ts">
export const API_BASE_URL = 'https://api.example.com';
</file>

<file path=".clinerules">
**Huberman App Project: Cline Workspace Interaction Rules (Updated)**

**Preamble:** These rules govern the interaction between the User and Cline for implementing both frontend and backend components of the Huberman App. The goal is to ensure development follows project documentation, proceeds methodically, and maintains accurate implementation tracking.

**Core Principles:**

1. **Documentation is Sovereign:** All implementations must align with:
   - Backend: `api_design_documentation.md`, `database_plan.md`, `security_plan.md`
   - Frontend: `frontend_implementation_todo.md`, `ui_ux_handoff_integration.md`
   - Both: `app_description.md`, `architecture_pan.md`

2. **Task Scope:**
   - Frontend: Reference `frontend_implementation_todo.md`
   - Complex tasks should be broken down into sub-items

3. **Implementation Process:**
   - **Frontend Specific:**
     * Follow React Native/TypeScript best practices
     * Adhere to UI/UX specifications
     * Implement responsive designs
     * Include accessibility features
   - **Backend Specific:**
     * Follow API design specifications
     * Implement proper security measures
     * Maintain database schema integrity

4. **Testing Requirements:**
   - Frontend: Component tests, UI tests
   - Backend: Unit tests, integration tests
   - Both: End-to-end tests where applicable

**Workflow Updates:**

1. **Frontend Implementation:**
   - Follow phased approach from `frontend_implementation_todo.md`
   - Verify UI against Figma designs
   - Implement state management using Zustand
   - Handle API responses and errors appropriately

2. **Cross-Team Coordination:**
   - Ensure API contracts are maintained
   - Verify feature flags and premium tiers
   - Coordinate push notification implementation

**Phase Reviews:**
- Include frontend-specific checks:
  * UI consistency
  * Performance metrics
  * Cross-platform behavior
  * Accessibility compliance

**Quality Assurance:**
- Frontend: Visual regression testing
- Backend: Load testing
- Both: User acceptance testing

**Updated Rules for 2025:**
1. Support React Native 0.72+ features
2. Include TypeScript strict mode checks
3. Follow updated security guidelines
4. Implement modern accessibility standards
5. Support new iOS/Android platform requirements
</file>

<file path=".env.local">
API_BASE_URL=http://localhost:3000/api
</file>

<file path=".env.production">
API_BASE_URL=https://production.example.com/api
</file>

<file path=".eslintrc.js">
module.exports = {
  root: true,
  extends: '@react-native',
};
</file>

<file path=".gitignore">
# OSX
#
.DS_Store

# Xcode
#
build/
*.pbxuser
!default.pbxuser
*.mode1v3
!default.mode1v3
*.mode2v3
!default.mode2v3
*.perspectivev3
!default.perspectivev3
xcuserdata
*.xccheckout
*.moved-aside
DerivedData
*.hmap
*.ipa
*.xcuserstate
**/.xcode.env.local

# Android/IntelliJ
#
build/
.idea
.gradle
local.properties
*.iml
*.hprof
.cxx/
*.keystore
!debug.keystore
.kotlin/

# node.js
#
node_modules/
npm-debug.log
yarn-error.log

# fastlane
#
# It is recommended to not store the screenshots in the git repo. Instead, use fastlane to re-generate the
# screenshots whenever they are needed.
# For more information about the recommended setup visit:
# https://docs.fastlane.tools/best-practices/source-control/

**/fastlane/report.xml
**/fastlane/Preview.html
**/fastlane/screenshots
**/fastlane/test_output

# Bundle artifact
*.jsbundle

# Ruby / CocoaPods
**/Pods/
/vendor/bundle/

# Temporary files created by Metro to check the health of the file watcher
.metro-health-check*

# testing
/coverage

# Yarn
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/sdks
!.yarn/versions
</file>

<file path=".prettierrc.js">
module.exports = {
  arrowParens: 'avoid',
  bracketSameLine: true,
  bracketSpacing: false,
  singleQuote: true,
  trailingComma: 'all',
};
</file>

<file path=".watchmanconfig">
{}
</file>

<file path="babel.config.js">
module.exports = {
  presets: ['module:@react-native/babel-preset'],
};
</file>

<file path="Gemfile">
source 'https://rubygems.org'

# You may use http://rbenv.org/ or https://rvm.io/ to install and use this version
ruby ">= 2.6.10"

# Exclude problematic versions of cocoapods and activesupport that causes build failures.
gem 'cocoapods', '>= 1.13', '!= 1.15.0', '!= 1.15.1'
gem 'activesupport', '>= 6.1.7.5', '!= 7.1.0'
gem 'xcodeproj', '< 1.26.0'
gem 'concurrent-ruby', '< 1.3.4'

# Ruby 3.4.0 has removed some libraries from the standard library.
gem 'bigdecimal'
gem 'logger'
gem 'benchmark'
gem 'mutex_m'
</file>

<file path="index.js">
/**
 * @format
 */

import {AppRegistry} from 'react-native';
import App from './App';
import {name as appName} from './app.json';

AppRegistry.registerComponent(appName, () => App);
</file>

<file path="jest.config.js">
module.exports = {
  preset: 'react-native',
};
</file>

<file path="metro.config.js">
const {getDefaultConfig, mergeConfig} = require('@react-native/metro-config');

/**
 * Metro configuration
 * https://reactnative.dev/docs/metro
 *
 * @type {import('@react-native/metro-config').MetroConfig}
 */
const config = {};

module.exports = mergeConfig(getDefaultConfig(__dirname), config);
</file>

<file path="README.md">
This is a new [**React Native**](https://reactnative.dev) project, bootstrapped using [`@react-native-community/cli`](https://github.com/react-native-community/cli).

# Getting Started

> **Note**: Make sure you have completed the [Set Up Your Environment](https://reactnative.dev/docs/set-up-your-environment) guide before proceeding.

## Step 1: Start Metro

First, you will need to run **Metro**, the JavaScript build tool for React Native.

To start the Metro dev server, run the following command from the root of your React Native project:

```sh
# Using npm
npm start

# OR using Yarn
yarn start
```

## Step 2: Build and run your app

With Metro running, open a new terminal window/pane from the root of your React Native project, and use one of the following commands to build and run your Android or iOS app:

### Android

```sh
# Using npm
npm run android

# OR using Yarn
yarn android
```

### iOS

For iOS, remember to install CocoaPods dependencies (this only needs to be run on first clone or after updating native deps).

The first time you create a new project, run the Ruby bundler to install CocoaPods itself:

```sh
bundle install
```

Then, and every time you update your native dependencies, run:

```sh
bundle exec pod install
```

For more information, please visit [CocoaPods Getting Started guide](https://guides.cocoapods.org/using/getting-started.html).

```sh
# Using npm
npm run ios

# OR using Yarn
yarn ios
```

If everything is set up correctly, you should see your new app running in the Android Emulator, iOS Simulator, or your connected device.

This is one way to run your app — you can also build it directly from Android Studio or Xcode.

## Step 3: Modify your app

Now that you have successfully run the app, let's make changes!

Open `App.tsx` in your text editor of choice and make some changes. When you save, your app will automatically update and reflect these changes — this is powered by [Fast Refresh](https://reactnative.dev/docs/fast-refresh).

When you want to forcefully reload, for example to reset the state of your app, you can perform a full reload:

- **Android**: Press the <kbd>R</kbd> key twice or select **"Reload"** from the **Dev Menu**, accessed via <kbd>Ctrl</kbd> + <kbd>M</kbd> (Windows/Linux) or <kbd>Cmd ⌘</kbd> + <kbd>M</kbd> (macOS).
- **iOS**: Press <kbd>R</kbd> in iOS Simulator.

## Congratulations! :tada:

You've successfully run and modified your React Native App. :partying_face:

### Now what?

- If you want to add this new React Native code to an existing application, check out the [Integration guide](https://reactnative.dev/docs/integration-with-existing-apps).
- If you're curious to learn more about React Native, check out the [docs](https://reactnative.dev/docs/getting-started).

# Troubleshooting

If you're having issues getting the above steps to work, see the [Troubleshooting](https://reactnative.dev/docs/troubleshooting) page.

# Learn More

To learn more about React Native, take a look at the following resources:

- [React Native Website](https://reactnative.dev) - learn more about React Native.
- [Getting Started](https://reactnative.dev/docs/environment-setup) - an **overview** of React Native and how setup your environment.
- [Learn the Basics](https://reactnative.dev/docs/getting-started) - a **guided tour** of the React Native **basics**.
- [Blog](https://reactnative.dev/blog) - read the latest official React Native **Blog** posts.
- [`@facebook/react-native`](https://github.com/facebook/react-native) - the Open Source; GitHub **repository** for React Native.
</file>

<file path="android/app/build.gradle">
apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"

/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */
react {
    /* Folders */
    //   The root of your project, i.e. where "package.json" lives. Default is '../..'
    // root = file("../../")
    //   The folder where the react-native NPM package is. Default is ../../node_modules/react-native
    // reactNativeDir = file("../../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../../node_modules/@react-native/codegen
    // codegenDir = file("../../node_modules/@react-native/codegen")
    //   The cli.js file which is the React Native CLI entrypoint. Default is ../../node_modules/react-native/cli.js
    // cliFile = file("../../node_modules/react-native/cli.js")

    /* Variants */
    //   The list of variants to that are debuggable. For those we're going to
    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
    // debuggableVariants = ["liteDebug", "prodDebug"]

    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]
    //
    //   The command to run when bundling. By default is 'bundle'
    // bundleCommand = "ram-bundle"
    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../js/MyApplication.android.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []

    /* Hermes Commands */
    //   The hermes compiler command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]

    /* Autolinking */
    autolinkLibrariesWithApp()
}

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = false

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = io.github.react-native-community:jsc-android-intl:2026004.+`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US. Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'io.github.react-native-community:jsc-android:2026004.+'

android {
    ndkVersion rootProject.ext.ndkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion

    namespace "com.hubermanappfrontend"
    defaultConfig {
        applicationId "com.hubermanappfrontend"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://reactnative.dev/docs/signed-apk-android.
            signingConfig signingConfigs.debug
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }
}

dependencies {
    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")

    implementation platform('com.google.firebase:firebase-bom:32.8.0')
    implementation 'com.google.firebase:firebase-messaging-ktx'

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}
</file>

<file path="android/build.gradle">
buildscript {
    ext {
        buildToolsVersion = "35.0.0"
        minSdkVersion = 24
        compileSdkVersion = 35
        targetSdkVersion = 35
        ndkVersion = "27.1.12297006"
        kotlinVersion = "2.0.21"
    }
    repositories {
        google()
        mavenCentral()
    }
dependencies {
    classpath("com.android.tools.build:gradle")
    classpath("com.facebook.react:react-native-gradle-plugin")
    classpath("org.jetbrains.kotlin:kotlin-gradle-plugin")
    classpath("com.google.gms:google-services:4.4.1")
}
}
apply plugin: "com.google.gms.google-services"

apply plugin: "com.facebook.react.rootproject"
</file>

<file path="android/settings.gradle">
pluginManagement { includeBuild("../node_modules/@react-native/gradle-plugin") }
plugins { id("com.facebook.react.settings") }
extensions.configure(com.facebook.react.ReactSettingsExtension){ ex -> ex.autolinkLibrariesFromCommand() }
rootProject.name = 'hubermanAppFrontend'
include ':app'
includeBuild('../node_modules/@react-native/gradle-plugin')
include ':react-native-config'
project(':react-native-config').projectDir = new File(rootProject.projectDir, '../node_modules/react-native-config/android')
</file>

<file path="ios/hubermanAppFrontend/AppDelegate.swift">
import UIKit
import React
import React_RCTAppDelegate
import ReactAppDependencyProvider
import FirebaseCore
import FirebaseMessaging

@main
class AppDelegate: UIResponder, UIApplicationDelegate, UNUserNotificationCenterDelegate, MessagingDelegate {
  var window: UIWindow?

  var reactNativeDelegate: ReactNativeDelegate?
  var reactNativeFactory: RCTReactNativeFactory?

  func application(
    _ application: UIApplication,
    didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]? = nil
  ) -> Bool {
    FirebaseApp.configure()
    UNUserNotificationCenter.current().delegate = self

    let authOptions: UNAuthorizationOptions = [.alert, .badge, .sound]
    UNUserNotificationCenter.current().requestAuthorization(
      options: authOptions,
      completionHandler: { _, _ in }
    )

    application.registerForRemoteNotifications()
    Messaging.messaging().delegate = self

    let delegate = ReactNativeDelegate()
    let factory = RCTReactNativeFactory(delegate: delegate)
    delegate.dependencyProvider = RCTAppDependencyProvider()

    reactNativeDelegate = delegate
    reactNativeFactory = factory

    window = UIWindow(frame: UIScreen.main.bounds)

    factory.startReactNative(
      withModuleName: "hubermanAppFrontend",
      in: window,
      launchOptions: launchOptions
    )

    return true
  }

  func application(_ application: UIApplication,
                   didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {
    Messaging.messaging().apnsToken = deviceToken
  }

  func messaging(_ messaging: Messaging, didReceiveRegistrationToken fcmToken: String?) {
    print("Firebase registration token: \(String(describing: fcmToken))")

    let dataDict: [String: String] = ["token": fcmToken ?? ""]
    NotificationCenter.default.post(
      name: Notification.Name("FCMToken"),
      object: nil,
      userInfo: dataDict
    )
  }

  func userNotificationCenter(_ center: UNUserNotificationCenter,
                              willPresent notification: UNNotification,
                              withCompletionHandler completionHandler: @escaping (UNNotificationPresentationOptions) -> Void) {
    completionHandler([[.banner, .badge, .sound]])
  }
}

class ReactNativeDelegate: RCTDefaultReactNativeFactoryDelegate {
  override func sourceURL(for bridge: RCTBridge) -> URL? {
    self.bundleURL()
  }

  override func bundleURL() -> URL? {
#if DEBUG
    RCTBundleURLProvider.sharedSettings().jsBundleURL(forBundleRoot: "index")
#else
    Bundle.main.url(forResource: "main", withExtension: "jsbundle")
#endif
  }
}
</file>

<file path="ios/Podfile">
# Resolve react_native_pods.rb with node to allow for hoisting
require Pod::Executable.execute_command('node', ['-p',
  'require.resolve(
    "react-native/scripts/react_native_pods.rb",
    {paths: [process.argv[1]]},
  )', __dir__]).strip

platform :ios, min_ios_version_supported
prepare_react_native_project!

linkage = ENV['USE_FRAMEWORKS']
if linkage != nil
  Pod::UI.puts "Configuring Pod with #{linkage}ally linked Frameworks".green
  use_frameworks! :linkage => linkage.to_sym
end

target 'hubermanAppFrontend' do
  config = use_native_modules!
  pod 'FirebaseMessaging'

  use_react_native!(
    :path => config[:reactNativePath],
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )

  post_install do |installer|
    # https://github.com/facebook/react-native/blob/main/packages/react-native/scripts/react_native_pods.rb#L197-L202
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false,
      # :ccache_enabled => true
    )
  end
end
</file>

<file path="src/navigation/RootNavigator.tsx">
import { createNativeStackNavigator } from '@react-navigation/native-stack';
import React, { useEffect, useState } from 'react';
import { NavigationContainer } from '@react-navigation/native';
import useAuthStore from '../store/authStore';
import AuthStack from './AuthStack';
import AppStack from './AppStack';

const Stack = createNativeStackNavigator();

const RootNavigator = () => {
  const { isAuthenticated, loadToken } = useAuthStore();
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const load = async () => {
      await loadToken();
      setLoading(false);
    };
    load();
  }, [loadToken]);

  if (loading) {
    return null; // Or a loading indicator
  }

  return (
    <NavigationContainer>
      <Stack.Navigator screenOptions={{ headerShown: false }}>
        {isAuthenticated ? (
          <Stack.Screen name="App" component={AppStack} />
        ) : (
          <Stack.Screen name="Auth" component={AuthStack} />
        )}
      </Stack.Navigator>
    </NavigationContainer>
  );
};

export default RootNavigator;
</file>

<file path="src/screens/Reminders/ReminderListScreen.tsx">
import React, { useEffect, useState } from 'react';
import { View, Text, StyleSheet, FlatList, Button, ActivityIndicator } from 'react-native';
import useAuthStore from '../../store/authStore';
import { fetchReminders } from '../../services/api/reminders';
import { useTheme } from '../../theme/ThemeProvider';

const ReminderListScreen = () => {
  const { user } = useAuthStore();
  const [reminders, setReminders] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const theme = useTheme();

  useEffect(() => {
    const loadReminders = async () => {
      if (!user) return;
      try {
        setLoading(true);
        const data = await fetchReminders(user.id);
        setReminders(data);
      } catch (err: any) {
        setError('Failed to fetch reminders.');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };

    loadReminders();
  }, [user]);

  if (!user?.isPremium) {
    return (
      <View style={styles.container}>
        <Text>This feature is only available for premium users.</Text>
      </View>
    );
  }

  if (loading) {
    return (
      <View style={[styles.container, styles.centered]}>
        <ActivityIndicator size="large" color={theme.colors.primary} />
        <Text style={{ marginTop: 10 }}>Loading reminders...</Text>
      </View>
    );
  }

  if (error) {
    return (
      <View style={[styles.container, styles.centered]}>
        <Text style={{ color: theme.colors.statusDangerBackground1, fontSize: 16, fontWeight: 'bold' }}>{error}</Text>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      {reminders.length === 0 ? (
        <View style={[styles.centered, { flex: 1 }]} accessibilityLabel="No reminders found">
          <Text>No reminders found.</Text>
        </View>
      ) : (
        <FlatList
          data={reminders}
          keyExtractor={(item, index) => index.toString()}
          renderItem={({ item }) => (
            <View style={styles.reminderItem} accessibilityLabel={`Reminder: ${item.time}, Protocol: ${item.protocolId}`}>
              <Text>{item.time}</Text>
              <Text>{item.protocolId}</Text>
            </View>
          )}
          accessibilityLabel="List of reminders"
        />
      )}
      <Button
        title="Add Reminder"
        onPress={() => {}}
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  reminderItem: {
    padding: '3%',
    borderBottomWidth: 1,
    borderBottomColor: '#ccc',
  },
  centered: {
    justifyContent: 'center',
    alignItems: 'center',
  },
});

export default ReminderListScreen;
</file>

<file path="src/screens/ForgotPasswordScreen.tsx">
import React, { useState } from 'react';
import { View, Text, TextInput, Button, StyleSheet, Alert } from 'react-native';
import { forgotPassword } from '../services/api/auth';

const ForgotPasswordScreen = () => {
  const [email, setEmail] = useState('');
  const [loading, setLoading] = useState(false);

  const handleResetPassword = async () => {
    if (!email) {
      Alert.alert('Error', 'Please enter your email');
      return;
    }

    setLoading(true);
    try {
      await forgotPassword(email);
      Alert.alert('Success', 'Password reset link sent to your email');
    } catch (error: any) {
      Alert.alert('Error', error.message || 'Failed to send reset link');
    } finally {
      setLoading(false);
    }
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Reset Password</Text>
      <Text style={styles.subtitle}>Enter your email to receive a reset link</Text>
      <TextInput
        style={styles.input}
        placeholder="Email"
        value={email}
        onChangeText={setEmail}
        autoCapitalize="none"
        keyboardType="email-address"
        autoComplete="email"
        placeholderTextColor="#999"
      />
      <Button 
        title={loading ? "Sending..." : "Send Reset Link"} 
        onPress={handleResetPassword} 
        disabled={loading}
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    justifyContent: 'center',
    backgroundColor: '#fff',
  },
  title: {
    fontSize: 24,
    marginBottom: 10,
    textAlign: 'center',
    color: '#333',
  },
  subtitle: {
    fontSize: 16,
    marginBottom: 20,
    textAlign: 'center',
    color: '#666',
  },
  input: {
    height: 50,
    borderColor: '#ddd',
    borderWidth: 1,
    marginBottom: 15,
    paddingHorizontal: 15,
    borderRadius: 5,
    fontSize: 16,
    color: '#333',
  },
});

export default ForgotPasswordScreen;
</file>

<file path="src/screens/SignupScreen.tsx">
import React, { useState } from 'react';
import { View, Text, TextInput, Button, ActivityIndicator, StyleSheet } from 'react-native';
import useAuthStore from '../store/authStore';
import { useNavigation } from '@react-navigation/native';
import { AuthStackNavigationProp } from '../navigation/AuthStack';

const SignupScreen = () => {
  const navigation = useNavigation<AuthStackNavigationProp>();
  const register = useAuthStore((state) => state.register);

  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const handleSignup = async () => {
    setLoading(true);
    setError('');
    try {
      await register(email, password, name);
      // Navigation to Main App stack will be handled by RootNavigator based on isAuthenticated state
    } catch (err: any) {
      setError(err.message || 'Signup failed');
    } finally {
      setLoading(false);
    }
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Sign Up</Text>
      <TextInput
        style={styles.input}
        placeholder="Name"
        value={name}
        onChangeText={setName}
        autoCapitalize="words"
      />
      <TextInput
        style={styles.input}
        placeholder="Email"
        value={email}
        onChangeText={setEmail}
        keyboardType="email-address"
        autoCapitalize="none"
      />
      <TextInput
        style={styles.input}
        placeholder="Password"
        value={password}
        onChangeText={setPassword}
        secureTextEntry
      />
      {loading ? (
        <ActivityIndicator size="small" color="#0000ff" />
      ) : (
        <Button title="Sign Up" onPress={handleSignup} disabled={!name || !email || !password} />
      )}
      {error ? <Text style={styles.errorText}>{error}</Text> : null}

      <Button title="Already have an account? Login" onPress={() => navigation.navigate('Login')} />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    padding: 16,
  },
  title: {
    fontSize: 24,
    marginBottom: 16,
    textAlign: 'center',
  },
  input: {
    height: 40,
    borderColor: 'gray',
    borderWidth: 1,
    marginBottom: 12,
    paddingHorizontal: 8,
  },
  errorText: {
    color: 'red',
    marginTop: 12,
    textAlign: 'center',
  },
});

export default SignupScreen;
</file>

<file path="src/services/api/content.ts">
import axios from 'axios';

const API_BASE_URL = process.env.API_BASE_URL || 'http://localhost:3000/api';

export type Protocol = {
  id: string;
  title: string;
  description: string;
  isPremium: boolean;
  duration: string;
  category: string;
};

export type ProtocolDetail = Protocol & {
  steps: Array<{
    id: string;
    title: string;
    description: string;
    duration: string;
    isPremium: boolean;
  }>;
  references: string[];
};

export const fetchProtocols = async (): Promise<Protocol[]> => {
  try {
    const response = await axios.get(`${API_BASE_URL}/protocols`);
    return response.data;
  } catch (error) {
    throw error;
  }
};

export const fetchProtocolDetails = async (id: string, isPremium: boolean = false): Promise<ProtocolDetail> => {
  try {
    const response = await axios.get(`${API_BASE_URL}/protocols/${id}`, {
      params: {
        isPremium: isPremium,
      },
    });
    return response.data;
  } catch (error) {
    throw error;
  }
};
</file>

<file path="src/store/billingStore.ts">
import { create } from 'zustand';
import { fetchSubscriptionStatus } from '../services/api/billing';
import { SubscriptionStatus } from '../types/billing';

interface BillingState {
  subscription: SubscriptionStatus | null;
  isLoading: boolean;
  error: string | null;
  fetchSubscription: (userId: string) => Promise<void>;
  refreshSubscription: (userId: string) => Promise<void>;
  initSubscriptionRefresh: (userId: string) => void;
}

const useBillingStore = create<BillingState>((set) => ({
  subscription: null,
  isLoading: false,
  error: null,

  fetchSubscription: async (userId) => {
    try {
      set({ isLoading: true, error: null });
      const subscription = await fetchSubscriptionStatus(userId);
      set({ subscription, isLoading: false });
    } catch (error: any) {
      set({ error: error.message, isLoading: false });
      throw error;
    }
  },

  refreshSubscription: async (userId) => {
    try {
      const subscription = await fetchSubscriptionStatus(userId);
      set({ subscription });
    } catch (error) {
      console.error('Failed to refresh subscription:', error);
    }
  },
  initSubscriptionRefresh: (userId: string) => {
    setInterval(async () => {
      try {
        const subscription = await fetchSubscriptionStatus(userId);
        set({ subscription });
      } catch (error) {
        console.error('Failed to refresh subscription:', error);
      }
    }, 30000); // Refresh every 30 seconds
  },
}));

export default useBillingStore;
</file>

<file path="src/theme/theme.ts">
import { TextStyle } from 'react-native';

// Define a specific type for fontWeight based on TextStyle['fontWeight']
type FontWeight = TextStyle['fontWeight'];

// Define base theme aligned with Fluent UI principles and potential Figma styles
export interface Theme {
  colors: {
    neutralForeground1: string;
    neutralForeground2: string;
    neutralForeground3: string;
    neutralForeground4: string;
    neutralForegroundDisabled: string;

    neutralBackground1: string;
    neutralBackground2: string;
    neutralBackground3: string;
    neutralBackground4: string;
    neutralBackgroundDisabled: string;

    brandForeground1: string;
    brandForeground2: string;
    brandForeground3: string;
    brandForeground4: string;

    brandBackground1: string;
    brandBackground2: string;
    brandBackground3: string;
    brandBackground4: string;

    statusDangerBackground1: string;
    statusSuccessBackground1: string;
    statusWarningBackground1: string;
    primary: string;
    secondary: string;
  };
  typography: {
    sizes: {
      caption2: number;
      caption1: number;
      body2: number;
      body1: number;
      subheading2: number;
      subheading1: number;
      heading2: number;
      heading1: number;
      display: number;
    };
    weights: {
      regular: FontWeight;
      medium: FontWeight;
      semibold: FontWeight;
      bold: FontWeight;
    };
    caption2: {
      fontSize: number;
      fontWeight: FontWeight;
    };
    caption1: {
      fontSize: number;
      fontWeight: FontWeight;
    };
    body2: {
      fontSize: number;
      fontWeight: FontWeight;
    };
    body1: {
      fontSize: number;
      fontWeight: FontWeight;
    };
    subheading2: {
      fontSize: number;
      fontWeight: FontWeight;
    };
    subheading1: {
      fontSize: number;
      fontWeight: FontWeight;
    };
    heading2: {
      fontSize: number;
      fontWeight: FontWeight;
    };
    heading1: {
      fontSize: number;
      fontWeight: FontWeight;
    };
    display: {
      fontSize: number;
      fontWeight: FontWeight;
    };
  };
  spacing: {
    s1: number;
    s2: number;
    s3: number;
    s4: number;
    s5: number;
    s6: number;
    s7: number;
    s8: number;
    s9: number;
    s10: number;
    medium: number;
    large: number;
  };
  borderRadius: {
    none: number;
    small: number;
    medium: number;
    large: number;
    xLarge: number;
    circle: number;
  };
}

const theme: Theme = {
  colors: {
    neutralForeground1: '#201F1E',
    neutralForeground2: '#484644',
    neutralForeground3: '#605E5C',
    neutralForeground4: '#797775',
    neutralForegroundDisabled: '#A19F9D',

    neutralBackground1: '#FFFFFF',
    neutralBackground2: '#F5F5F5',
    neutralBackground3: '#E1DFDE',
    neutralBackground4: '#D2D0CE',
    neutralBackgroundDisabled: '#E1DFDE',

    brandForeground1: '#0078D4',
    brandForeground2: '#106EBE',
    brandForeground3: '#005A9E',
    brandForeground4: '#193B5B',

    brandBackground1: '#0078D4',
    brandBackground2: '#106EBE',
    brandBackground3: '#005A9E',
    brandBackground4: '#193B5B',

    statusDangerBackground1: '#D13438',
    statusSuccessBackground1: '#107D0A',
    statusWarningBackground1: '#F7630C',
    primary: '#0078D4',
    secondary: '#106EBE',
  },
  typography: {
    sizes: {
      caption2: 10,
      caption1: 12,
      body2: 14,
      body1: 16,
      subheading2: 18,
      subheading1: 20,
      heading2: 24,
      heading1: 28,
      display: 32,
    },
    weights: {
      regular: '400' as FontWeight,
      medium: '500' as FontWeight,
      semibold: '600' as FontWeight,
      bold: '700' as FontWeight,
    },
    caption2: {
      fontSize: 10,
      fontWeight: '400',
    },
    caption1: {
      fontSize: 12,
      fontWeight: '400',
    },
    body2: {
      fontSize: 14,
      fontWeight: '400',
    },
    body1: {
      fontSize: 16,
      fontWeight: '400',
    },
    subheading2: {
      fontSize: 18,
      fontWeight: '600',
    },
    subheading1: {
      fontSize: 20,
      fontWeight: '600',
    },
    heading2: {
      fontSize: 24,
      fontWeight: '700',
    },
    heading1: {
      fontSize: 28,
      fontWeight: '700',
    },
    display: {
      fontSize: 32,
      fontWeight: '700',
    },
  },
  spacing: {
    s1: 4,
    s2: 8,
    s3: 12,
    s4: 16,
    s5: 20,
    s6: 24,
    s7: 28,
    s8: 32,
    s9: 36,
    s10: 40,
    medium: 4,
    large: 8,
  },
  borderRadius: {
    none: 0,
    small: 2,
    medium: 4,
    large: 8,
    xLarge: 12,
    circle: 999,
  },
};

export default theme;
</file>

<file path="src/theme/ThemeProvider.tsx">
import React, { createContext, useContext } from 'react';
import { Theme } from './theme';
import theme from './theme';

interface ThemeContextProps {
  theme: Theme;
}

const ThemeContext = createContext<ThemeContextProps>({
  theme: theme, // Use the theme object from theme.ts
});

export const ThemeProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  return (
    <ThemeContext.Provider value={{ theme }}>
      {children}
    </ThemeContext.Provider>
  );
};

export const useTheme = () => {
  return useContext(ThemeContext).theme;
};
</file>

<file path="src/types/billing.ts">
export interface Plan {
  id: string;
  name: string;
  price: number;
  currency: string;
  interval: 'month' | 'year';
  features: string[];
  description: string;
}

export interface SubscriptionStatus {
  status: 'active' | 'inactive' | 'expired';
  planId: string;
  currentPeriodEnd: string;
}
</file>

<file path=".env.staging">
API_BASE_URL=https://staging.example.com/api
</file>

<file path="app.json">
{
  "name": "hubermanAppFrontend",
  "displayName": "hubermanAppFrontend",
  "extraDotenv": true
}
</file>

<file path="src/components/Button/Button.tsx">
import React from 'react';
import { TouchableOpacity, Text, StyleSheet } from 'react-native';
import { useTheme } from '../../theme/ThemeProvider';

interface ButtonProps {
  title: string;
  onPress: () => void;
  variant?: 'primary' | 'secondary' | 'outline';
  disabled?: boolean;
  accessibilityLabel?: string;
  accessibilityHint?: string;
}

const Button: React.FC<ButtonProps> = ({
  title,
  onPress,
  variant = 'primary',
  disabled = false,
  accessibilityLabel,
  accessibilityHint,
}) => {
  const theme = useTheme();

  const styles = StyleSheet.create({
    button: {
      paddingVertical: theme.spacing.medium,
      paddingHorizontal: theme.spacing.large,
      borderRadius: theme.borderRadius.medium,
      alignItems: 'center',
      justifyContent: 'center',
    },
    text: {
      fontSize: theme.typography.body1.fontSize, // Use theme typography
      fontWeight: theme.typography.weights.semibold, // Use theme typography
    },
    disabled: {
      opacity: 0.6,
    },
  });

  const getButtonStyle = () => {
    switch (variant) {
      case 'secondary':
        return {
          backgroundColor: theme.colors.secondary,
        };
      case 'outline':
        return {
          backgroundColor: 'transparent',
          borderWidth: 1,
          borderColor: theme.colors.primary,
        };
      default:
        return {
          backgroundColor: theme.colors.primary,
        };
    }
  };

  const getTextStyle = () => {
    switch (variant) {
      case 'outline':
        return {
          color: theme.colors.primary,
        };
      default:
        // Use neutralForeground1 for text on brand background for better contrast potentially
        return {
          color: theme.colors.neutralBackground1, // White text on primary/secondary bg
        };
    }
  };

  return (
    <TouchableOpacity
      style={[
        styles.button,
        getButtonStyle(),
        disabled && styles.disabled,
      ]}
      onPress={onPress}
      disabled={disabled}
      activeOpacity={0.8}
      accessibilityLabel={accessibilityLabel}
      accessibilityHint={accessibilityHint}
    >
      <Text style={[styles.text, getTextStyle()]}>{title}</Text>
    </TouchableOpacity>
  );
};

export default Button;
</file>

<file path="src/navigation/AppStack.tsx">
import React from 'react';
import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';
import { createNativeStackNavigator } from '@react-navigation/native-stack';
import { AppStackParamList, ProtocolStackParamList } from './AppStack.d';

// Import screens
import ProtocolListScreen from '../screens/Protocols/ProtocolListScreen';
import ProtocolDetailScreen from '../screens/Protocols/ProtocolDetailScreen';
import NotesScreen from '../screens/Notes/NotesScreen';
import SettingsScreen from '../screens/Settings/SettingsScreen';
import ReminderListScreen from '../screens/Reminders/ReminderListScreen';

const Tab = createBottomTabNavigator<AppStackParamList>();
const ProtocolStack = createNativeStackNavigator<ProtocolStackParamList>();

const ProtocolStackScreen = () => {
  return (
    <ProtocolStack.Navigator screenOptions={{ headerShown: false }}>
      <ProtocolStack.Screen name="ProtocolList" component={ProtocolListScreen} />
      <ProtocolStack.Screen name="ProtocolDetail" component={ProtocolDetailScreen} />
      <ProtocolStack.Screen name="ReminderList" component={ReminderListScreen} />
    </ProtocolStack.Navigator>
  );
};

const AppStack: React.FC = () => {
  return (
    <Tab.Navigator screenOptions={{ headerShown: false }}>
      <Tab.Screen name="Protocols" component={ProtocolStackScreen}  />
      <Tab.Screen name="Notes" component={NotesScreen} />
      <Tab.Screen name="Settings" component={SettingsScreen} />
    </Tab.Navigator>
  );
};

export default AppStack;
</file>

<file path="src/navigation/AuthStack.tsx">
import { createNativeStackNavigator, NativeStackNavigationProp } from '@react-navigation/native-stack';
import React from 'react';
import LoginScreen from '../screens/LoginScreen';
import SignupScreen from '../screens/SignupScreen';
import ForgotPasswordScreen from '../screens/ForgotPasswordScreen';

export type AuthStackParamList = {
  Login: undefined;
  Signup: undefined;
  ForgotPassword: undefined;
};

export type AuthStackNavigationProp = NativeStackNavigationProp<AuthStackParamList>;

const Stack = createNativeStackNavigator<AuthStackParamList>();

const AuthStack = () => {
  return (
    <Stack.Navigator screenOptions={{ headerShown: false }}>
      <Stack.Screen name="Login" component={LoginScreen} />
      <Stack.Screen name="Signup" component={SignupScreen} />
      <Stack.Screen name="ForgotPassword" component={ForgotPasswordScreen} />
    </Stack.Navigator>
  );
};

export default AuthStack;
</file>

<file path="src/screens/Protocols/ProtocolListScreen.tsx">
import React, { useEffect, useState } from 'react';
import { View, Text, StyleSheet, FlatList, TouchableOpacity, ActivityIndicator } from 'react-native';
import { NativeStackScreenProps } from '@react-navigation/native-stack';
import { ProtocolStackParamList } from '../../navigation/AppStack.d';
import { fetchProtocols, Protocol } from '../../services/api/content';
import { FontAwesome } from '@expo/vector-icons'; // Or any other icon library
import { useTheme } from '../../theme/ThemeProvider';

type Props = NativeStackScreenProps<ProtocolStackParamList, 'ProtocolList'>;

const ProtocolListScreen: React.FC<Props> = ({ navigation }) => {
  const [protocols, setProtocols] = useState<Protocol[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const theme = useTheme();

  useEffect(() => {
    const loadProtocols = async () => {
      try {
        const data = await fetchProtocols();
        setProtocols(data);
      } catch (err) {
        setError('Failed to fetch protocols.');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };

    loadProtocols();
  }, []);

  const renderProtocolItem = ({ item }: { item: Protocol }) => (
    <TouchableOpacity
      style={styles.item}
      onPress={() => navigation.navigate('ProtocolDetail', { id: item.id })}
      accessibilityLabel={`Protocol: ${item.title}`}
      accessibilityHint="View protocol details"
    >
      <View style={styles.itemContent}>
        <Text style={styles.title}>{item.title}</Text>
        {item.isPremium && (
          <FontAwesome name="star" size={16} color="#FFD700" style={styles.premiumIcon} accessibilityLabel="Premium protocol" />
        )}
      </View>
      <Text style={styles.description}>{item.description}</Text>
    </TouchableOpacity>
  );

  if (loading) {
    return (
      <View style={[styles.container, styles.centered]}>
        <ActivityIndicator size="large" color="#0000ff" />
        <Text style={{ marginTop: 10 }}>Loading Protocols...</Text>
      </View>
    );
  }

  if (error) {
    return (
      <View style={[styles.container, styles.centered]}>
        <Text style={{ color: theme.colors.statusDangerBackground1, fontSize: 16, fontWeight: 'bold' }}>{error}</Text>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      {protocols.length === 0 && !loading && !error ? (
        <View style={[styles.centered, { flex: 1 }]}>
          <Text>No protocols found.</Text>
        </View>
      ) : (
        <FlatList
          data={protocols}
          renderItem={renderProtocolItem}
          keyExtractor={(item) => item.id}
          contentContainerStyle={styles.list}
        />
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
  },
  centered: {
    justifyContent: 'center',
    alignItems: 'center',
  },
  list: {
    padding: 16,
  },
  item: {
    padding: '4%',
    marginBottom: '3%',
    backgroundColor: '#f8f9fa',
    borderRadius: 8,
  },
  itemContent: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  title: {
    fontSize: 16,
    fontWeight: 'bold',
    marginBottom: 4,
  },
  description: {
    fontSize: 14,
    color: '#6c757d',
  },
  premiumIcon: {
    marginLeft: 8,
  },
});

export default ProtocolListScreen;
</file>

<file path="src/screens/Settings/SettingsScreen.tsx">
import React, { useEffect } from 'react';
import { View, Text, StyleSheet, ActivityIndicator, Button } from 'react-native';
import { useNavigation } from '@react-navigation/native';
import useBillingStore from '../..//store/billingStore';
import useAuthStore from '../../store/authStore'; // Assuming authStore has userId

const SettingsScreen: React.FC = () => {
  const { subscription, isLoading, fetchSubscription, initSubscriptionRefresh } = useBillingStore();
  const { user } = useAuthStore(); // Get user from auth store
  const navigation = useNavigation();

  useEffect(() => {
    if (user?.id && !subscription && !isLoading) {
      fetchSubscription(user.id);
      initSubscriptionRefresh(user.id);
    }
  }, [user, subscription, isLoading, fetchSubscription, initSubscriptionRefresh]);

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Settings</Text>
      {isLoading && <ActivityIndicator size="small" />}
      {subscription ? (
        <View>
          <Text>Subscription Status: {subscription.status}</Text>
          {subscription.planId && <Text>Plan: {subscription.planId}</Text>}
          {subscription.currentPeriodEnd && <Text>Ends: {new Date(subscription.currentPeriodEnd).toLocaleDateString()}</Text>}
        </View>
      ) : (
        <Text>No active subscription.</Text>
      )}
      <Button
        title="Reminders"
        onPress={() => navigation.navigate('ReminderList')}
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 20,
  },
});

export default SettingsScreen;
</file>

<file path="src/screens/LoginScreen.tsx">
import React, { useState } from 'react';
import { View, Text, TextInput, ActivityIndicator, StyleSheet } from 'react-native';
import useAuthStore from '../store/authStore';
import { useNavigation } from '@react-navigation/native';
import { AuthStackNavigationProp } from '../navigation/AuthStack';
import { useTheme } from '../theme/ThemeProvider';
import Button from '../components/Button/Button';

const LoginScreen = () => {
  const navigation = useNavigation<AuthStackNavigationProp>();
  const login = useAuthStore((state) => state.login);
  const theme = useTheme();

  const styles = StyleSheet.create({
    container: {
      flex: 1,
      justifyContent: 'center',
      padding: theme.spacing.s4,
    },
    title: {
      fontSize: theme.typography.heading1.fontSize,
      fontWeight: theme.typography.weights.bold,
      marginBottom: theme.spacing.s4,
      textAlign: 'center',
      color: theme.colors.neutralForeground1,
    },
    input: {
      height: '8%',
      borderColor: theme.colors.neutralForeground3,
      borderWidth: 1,
      marginBottom: theme.spacing.s3,
      paddingHorizontal: theme.spacing.s2,
      color: theme.colors.neutralForeground1,
    },
    errorText: {
      color: theme.colors.statusDangerBackground1,
      marginTop: theme.spacing.s3,
      textAlign: 'center',
      fontSize: theme.typography.body1.fontSize,
      fontWeight: theme.typography.weights.semibold,
    },
  });

  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const handleLogin = async () => {
    setLoading(true);
    setError('');
    try {
      await login(email, password);
      // Navigation to Main App stack will be handled by RootNavigator based on isAuthenticated state
    } catch (err: any) {
      setError(err.message || 'Login failed');
    } finally {
      setLoading(false);
    }
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title} accessibilityRole="header" accessibilityLabel="Login">Login</Text>
      <TextInput
        style={styles.input}
        placeholder="Email"
        value={email}
        onChangeText={setEmail}
        keyboardType="email-address"
        autoCapitalize="none"
        accessibilityLabel="Email address"
        accessibilityHint="Enter your email address"
      />
      <TextInput
        style={styles.input}
        placeholder="Password"
        value={password}
        onChangeText={setPassword}
        secureTextEntry
        accessibilityLabel="Password"
        accessibilityHint="Enter your password"
      />
      {loading ? (
        <ActivityIndicator size="small" color={theme.colors.primary} accessibilityLabel="Loading" />
      ) : (
        <Button title="Login" onPress={handleLogin} disabled={!email || !password} accessibilityLabel="Login" accessibilityHint="Press to login"/>
      )}
      {error ? <Text style={styles.errorText} accessibilityLiveRegion="polite">{error}</Text> : null}

      <Button title="Forgot Password?" onPress={() => navigation.navigate('ForgotPassword')} variant="secondary" accessibilityLabel="Forgot Password" accessibilityHint="Navigate to forgot password screen"/>
      <Button title="Don't have an account? Sign Up" onPress={() => navigation.navigate('Signup')} variant="secondary" accessibilityLabel="Sign Up" accessibilityHint="Navigate to sign up screen"/>
    </View>
  );
};

export default LoginScreen;
</file>

<file path="src/App.tsx">
import React, { useEffect } from 'react';
import { ThemeProvider } from './theme/ThemeProvider';
import messaging from '@react-native-firebase/messaging';
import { Platform } from 'react-native';
import RootNavigator from './navigation/RootNavigator';
import { sendDeviceToken } from './services/api/user';

const App = () => {
  async function requestUserPermission() {
    const authStatus = await messaging().requestPermission();
    const enabled =
      authStatus === messaging.AuthorizationStatus.AUTHORIZED ||
      authStatus === messaging.AuthorizationStatus.PROVISIONAL;

    if (enabled) {
      console.log('Authorization status:', authStatus);
    }
  }

  useEffect(() => {
    if (Platform.OS === 'ios') {
      requestUserPermission();
    }

    messaging()
      .getToken()
      .then(fcmToken => {
        if (fcmToken) {
          console.log('FCM Token:', fcmToken);
          sendDeviceToken(fcmToken);
        } else {
          console.log('User does not have a device token yet');
        }
      });

    messaging().onMessage(async remoteMessage => {
      console.log('Received foreground message:', remoteMessage);
    });

    messaging().setBackgroundMessageHandler(async remoteMessage => {
      console.log('Message handled in the background:', remoteMessage);
    });
  }, []);

  return (
    <ThemeProvider>
      <RootNavigator />
    </ThemeProvider>
  );
};

export default App;
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "allowJs": true,
    "allowSyntheticDefaultImports": true,
    "esModuleInterop": true,
    "isolatedModules": true,
    "jsx": "react-native",
    "lib": ["es6"],
    "moduleResolution": "node",
    "noEmit": true,
    "strict": true,
    "target": "esnext",
    "baseUrl": ".",
    "paths": {
      "@/*": ["src/*"]
    }
  },
  "include": ["src/**/*", "node_modules/@expo/vector-icons"],
  "exclude": [
    "node_modules",
    "babel.config.js",
    "metro.config.js",
    "jest.config.js"
  ]
}
</file>

<file path="src/navigation/AppStack.d.ts">
// Type definitions for the App Stack (Bottom Tab Navigator)
import { Reminder } from '../services/api/reminders';

export type AppStackParamList = {
  Protocols: undefined;
  Notes: undefined;
  Settings: undefined;
};

export type ProtocolStackParamList = {
  ProtocolList: undefined;
  ProtocolDetail: { id: string };
  ReminderList: undefined;
  CreateEditReminder: { reminder?: Reminder };
};

export type NoteStackParamList = {
  NoteList: undefined;
  NoteDetail: { id: string };
};

export type SettingsStackParamList = {
  Settings: undefined;
};
</file>

<file path="src/screens/Protocols/ProtocolDetailScreen.tsx">
import React, { useEffect, useState } from 'react';
import { View, Text, StyleSheet, ActivityIndicator, ScrollView, Button } from 'react-native';
import { FontAwesome } from '@expo/vector-icons';
import { NativeStackNavigationProp, NativeStackScreenProps } from '@react-navigation/native-stack';
import { useNavigation } from '@react-navigation/native';
import { ProtocolStackParamList } from '../../navigation/AppStack.d';
import { fetchProtocolDetails, ProtocolDetail } from '../../services/api/content';
import useAuthStore from '../../store/authStore';
import useBillingStore from '../../store/billingStore';

type Props = NativeStackScreenProps<ProtocolStackParamList, 'ProtocolDetail'>;
type ProtocolDetailNavigationProp = NativeStackNavigationProp<ProtocolStackParamList, 'ProtocolDetail'>;

const ProtocolDetailScreen: React.FC<Props> = ({ route }) => {
  const { id } = route.params;
  const [protocol, setProtocol] = useState<ProtocolDetail | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const { user } = useAuthStore();
  const { subscription } = useBillingStore();
  const navigation = useNavigation<ProtocolDetailNavigationProp>();

  useEffect(() => {
    const loadProtocolDetails = async () => {
      try {
        const isPremiumUser = user?.isPremium || subscription?.status === 'active';
        const data = await fetchProtocolDetails(id, isPremiumUser);
        setProtocol(data);
      } catch (err: any) {
        setError('Failed to fetch protocol details.');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };

    loadProtocolDetails();
  }, [id, user?.isPremium, subscription?.status]);

  if (loading) {
    return (
      <View style={[styles.container, styles.centered]}>
        <ActivityIndicator size="large" color="#0000ff" />
        <Text style={{ marginTop: 10 }}>Loading Protocol Details...</Text>
      </View>
    );
  }

  if (error) {
    return (
      <View style={[styles.container, styles.centered]}>
        <Text style={{ color: 'red' }}>{error}</Text>
      </View>
    );
  }

  if (!protocol) {
    return (
      <View style={[styles.container, styles.centered]}>
        <Text>Protocol not found.</Text>
      </View>
    );
  }

  return (
    <ScrollView style={styles.container}>
      <View style={styles.content}>
        <View style={{flexDirection: 'row', alignItems: 'center'}}>
          <Text style={styles.title}>{protocol.title}</Text>
          {protocol.isPremium && (
            <FontAwesome name="star" size={16} color="#FFD700" style={{marginLeft: 8}} />
          )}
        </View>
        {user?.isPremium ? (
          <Text style={styles.description}>{protocol.description}</Text>
        ) : (
          <Text style={styles.description}>{protocol.description.split('\n')[0]}...</Text>
        )}
        <Text style={styles.meta}>Duration: {protocol.duration}</Text>
        <Text style={styles.meta}>Category: {protocol.category}</Text>

        {user?.isPremium && protocol.steps && protocol.steps.length > 0 && (
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>Steps:</Text>
            {protocol.steps.map((step, index) => (
              <View key={step.id} style={styles.step}>
                <Text style={styles.stepTitle}>{`${index + 1}. ${step.title}`}</Text>
                <Text style={styles.stepDescription}>{step.description}</Text>
                <Text style={styles.stepMeta}>Duration: {step.duration}</Text>
              </View>
            ))}
          </View>
        )}
        <Button
          title="Reminders"
          onPress={() => navigation.navigate('ReminderList')}
        />

        {user?.isPremium && protocol.references && protocol.references.length > 0 && (
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>References:</Text>
            {protocol.references.map((ref, index) => (
              <Text key={index} style={styles.reference}>{`- ${ref}`}</Text>
            ))}
          </View>
        )}
      </View>
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
  },
  centered: {
    justifyContent: 'center',
    alignItems: 'center',
  },
  content: {
    padding: 16,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 8,
  },
  description: {
    fontSize: 16,
    color: '#6c757d',
    marginBottom: 12,
  },
  meta: {
    fontSize: 14,
    color: '#5a6268',
    marginBottom: 4,
  },
  section: {
    marginTop: 20,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 10,
  },
  step: {
    marginBottom: 15,
    padding: 12,
    backgroundColor: '#f8f9fa',
    borderRadius: 8,
  },
  stepTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    marginBottom: 4,
  },
  stepDescription: {
    fontSize: 14,
    color: '#6c757d',
    marginBottom: 4,
  },
  stepMeta: {
    fontSize: 12,
    color: '#5a6268',
  },
  reference: {
    fontSize: 14,
    color: '#007bff',
    marginBottom: 5,
  },
});

export default ProtocolDetailScreen;
</file>

<file path="App.tsx">
/**
 * Sample React Native App
 * https://github.com/facebook/react-native
 *
 * @format
 */

import React from 'react';
import type {PropsWithChildren} from 'react';
import {
  ScrollView,
  StatusBar,
  StyleSheet,
  Text,
  useColorScheme,
  View,
} from 'react-native';
import Config from 'react-native-config';

import {
  Colors,
  DebugInstructions,
  Header,
  LearnMoreLinks,
  ReloadInstructions,
} from 'react-native/Libraries/NewAppScreen';

import Button from './src/components/Button/Button';
import { ThemeProvider } from './src/theme/ThemeProvider';
import theme from './src/theme/theme';

type SectionProps = PropsWithChildren<{
  title: string;
}>;

function Section({children, title}: SectionProps): React.JSX.Element {
  const isDarkMode = useColorScheme() === 'dark';
  return (
    <View style={styles.sectionContainer}>
      <Text
        style={[
          styles.sectionTitle,
          {
            color: isDarkMode ? Colors.white : Colors.black,
          },
        ]}>
        {title}
      </Text>
      <Text
        style={[
          styles.sectionDescription,
          {
            color: isDarkMode ? Colors.light : Colors.dark,
          },
        ]}>
        {children}
      </Text>
    </View>
  );
}

function App(): React.JSX.Element {
  const isDarkMode = useColorScheme() === 'dark';

  const backgroundStyle = {
    backgroundColor: isDarkMode ? Colors.darker : Colors.lighter,
  };

  /*
   * To keep the template simple and small we're adding padding to prevent view
   * from rendering under the System UI.
   * For bigger apps the recommendation is to use `react-native-safe-area-context`:
   * https://github.com/AppAndFlow/react-native-safe-area-context
   *
   * You can read more about it here:
   * https://github.com/react-native-community/discussions-and-proposals/discussions/827
   */
  const safePadding = '5%';

  return (
    <ThemeProvider theme={theme}>
      <View style={backgroundStyle}>
        <StatusBar
          barStyle={isDarkMode ? 'light-content' : 'dark-content'}
          backgroundColor={backgroundStyle.backgroundColor}
        />
        <ScrollView
          style={backgroundStyle}>
          <View style={{paddingRight: safePadding}}>
            <Header/>
            <Text>API Base URL: {Config.API_BASE_URL}</Text>
          </View>
          <View
            style={{
              backgroundColor: isDarkMode ? Colors.black : Colors.white,
              paddingHorizontal: safePadding,
              paddingBottom: safePadding,
            }}>
          <Button 
            title="Test Button"
            onPress={() => console.log('Button pressed')}
            variant="primary"
          />
          <Section title="Step One">
            Edit <Text style={styles.highlight}>App.tsx</Text> to change this
            screen and then come back to see your edits.
          </Section>
            <Section title="See Your Changes">
              <ReloadInstructions />
            </Section>
            <Section title="Debug">
              <DebugInstructions />
            </Section>
            <Section title="Learn More">
              Read the docs to discover what to do next:
            </Section>
            <LearnMoreLinks />
          </View>
        </ScrollView>
      </View>
    </ThemeProvider>
  );
}

const styles = StyleSheet.create({
  sectionContainer: {
    marginTop: 32,
    paddingHorizontal: 24,
  },
  sectionTitle: {
    fontSize: 24,
    fontWeight: '600',
  },
  sectionDescription: {
    marginTop: 8,
    fontSize: 18,
    fontWeight: '400',
  },
  highlight: {
    fontWeight: '700',
  },
});

export default App;
</file>

<file path="src/store/authStore.ts">
import { create } from 'zustand';
import * as Keychain from 'react-native-keychain';
import { sendDeviceToken } from '../services/api/user';
import messaging from '@react-native-firebase/messaging';

interface User {
  id: string;
  name: string;
  email: string;
  isPremium: boolean;
}

interface AuthState {
  accessToken: string | null;
  user: User | null;
  isAuthenticated: boolean;
  login: (email: string, password: string) => Promise<void>;
  register: (email: string, password: string, name: string) => Promise<void>;
  logout: () => Promise<void>;
  loadToken: () => Promise<void>;
}

const useAuthStore = create<AuthState>((set) => ({
  accessToken: null,
  user: null,
  isAuthenticated: false,

  login: async (email, password) => {
    try {
      const response = await fetch('/api/login', {
        method: 'POST',
        body: JSON.stringify({ email, password })
      });
      const data = await response.json();

      await Keychain.setGenericPassword('authToken', data.accessToken);

      set({
        accessToken: data.accessToken,
        user: data.user,
        isAuthenticated: true
      });

      const fcmToken = await messaging().getToken();
      if (fcmToken) {
        sendDeviceToken(fcmToken);
      }
    } catch (error) {
      console.error('Login error:', error);
      throw error;
    }
  },

  register: async (email, password, name) => {
    try {
      const response = await fetch('/api/register', {
        method: 'POST',
        body: JSON.stringify({ email, password, name })
      });
      const data = await response.json();

      await Keychain.setGenericPassword('authToken', data.accessToken);

      set({
        accessToken: data.accessToken,
        user: data.user,
        isAuthenticated: true
      });

      const fcmToken = await messaging().getToken();
      if (fcmToken) {
        sendDeviceToken(fcmToken);
      }
    } catch (error) {
      console.error('Registration error:', error);
      throw error;
    }
  },

  logout: async () => {
    try {
      await fetch('/api/logout', { method: 'POST' });
      await Keychain.resetGenericPassword();
      set({
        accessToken: null,
        user: null,
        isAuthenticated: false
      });
    } catch (error) {
      console.error('Logout error:',  error);
      throw error;
    }
  },

  loadToken: async () => {
    try {
      const credentials = await Keychain.getGenericPassword();
      if (credentials) {
        set({
          accessToken: credentials.password,
          isAuthenticated: true
        });
      }
    } catch (error) {
      console.error('Load token error:', error);
      throw error;
    }
  }
}));

export default useAuthStore;
</file>

<file path="package.json">
{
  "name": "hubermanAppFrontend",
  "version": "0.0.1",
  "private": true,
  "scripts": {
    "android": "react-native run-android",
    "ios": "react-native run-ios",
    "lint": "eslint .",
    "start": "react-native start",
    "test": "jest"
  },
  "dependencies": {
    "@expo/vector-icons": "^14.1.0",
    "@react-native-firebase/app": "^22.1.0",
    "@react-native-firebase/messaging": "^22.1.0",
    "@react-navigation/bottom-tabs": "^7.3.12",
    "@react-navigation/native": "^7.1.8",
    "@react-navigation/native-stack": "^7.3.12",
    "axios": "^1.9.0",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "react-native": "^0.79.2",
    "react-native-config": "^1.5.5",
    "react-native-iap": "^12.16.2",
    "react-native-keychain": "^10.0.0",
    "zustand": "^5.0.4"
  },
  "devDependencies": {
    "@babel/core": "^7.25.2",
    "@babel/preset-env": "^7.25.3",
    "@babel/runtime": "^7.25.0",
    "@react-native-community/cli": "18.0.0",
    "@react-native-community/cli-platform-android": "18.0.0",
    "@react-native-community/cli-platform-ios": "18.0.0",
    "@react-native/babel-preset": "0.79.2",
    "@react-native/eslint-config": "0.79.2",
    "@react-native/metro-config": "0.79.2",
    "@react-native/typescript-config": "0.79.2",
    "@testing-library/react-native": "^12.4.5",
    "@types/jest": "^29.5.13",
    "@types/react": "19.1.2",
    "@types/react-native": "^0.72.8",
    "@types/react-test-renderer": "^19.0.0",
    "eslint": "^8.19.0",
    "jest": "^29.6.3",
    "prettier": "2.8.8",
    "react-test-renderer": "^19.1.0",
    "typescript": "5.0.4"
  },
  "engines": {
    "node": ">=18"
  }
}
</file>

<file path="app_documentation/frontend_implementation_todo.md">
# Frontend Implementation Status

## Completed Tasks
- [x] Project setup and configuration
- [x] Authentication flow implementation
- [x] Main app navigation setup
- [x] Protocol list and detail screens
- [x] Settings screen shell

## Pending Tasks
- [ ] Subscription flow implementation
- [ ] Premium features implementation
- [x] Push notification setup
- [ ] Final testing and refinements
---

## Phase 1: Project Setup & Foundation

*   **Environment & Tooling:**
    *   `[x]` Initialize React Native project (`npx @react-native-community/cli init hubermanAppFrontend --template react-native-template-typescript` recommended).
    *   `[x]` Install core dependencies:
        *   `[x]` Navigation: `@react-navigation/native`, `@react-navigation/native-stack`, `@react-navigation/bottom-tabs` (or other required navigators).
        *   `[x]` State Management: `zustand`.
        *   `[x]` Secure Storage: `react-native-keychain`.
        *   `[x]` Potentially UI Library: `fluentui-react-native` (if decided upon, see `ui_ux_handoff_integration.md`).
        *   `[x]` API Client: `axios` (or `fetch` wrapper).
    *   `[x]` Set up project structure (`src/screens`, `src/components`, `src/navigation`, `src/services`, `src/store`, `src/assets`, `src/hooks`, `src/theme`).
    *   `[x]` Configure ESLint & Prettier for code quality and consistency.
    *   `[x]` Set up TypeScript configuration (`tsconfig.json`).
    *   `[x]` Configure basic testing environment (Jest is included, add `@testing-library/react-native`).
    *   `[x]` Establish basic Git workflow (branching strategy defined with backend team).
    *   `[x]` Configure environment variables (e.g., using `react-native-config`) for API base URL (local, staging, prod).

*   **Core Structure & Base Components:**
    *   `[x]` Define base theme (colors, typography, spacing) aligned with Fluent UI and Figma styles (`src/theme`). Apply theme provider if necessary (depends on UI library choice). - @cline
    *   `[x]` (Test) Create foundational reusable components based on early UI designs/Fluent principles (e.g., `Button`, `TextInput`, `Card`, `ScreenWrapper`).
    *   `[x]` Set up Storybook (optional but recommended) to develop and showcase reusable components in isolation.
    *   `[x]` Implement root navigation structure (`src/navigation/RootNavigator.tsx`): differentiate between Auth stack and Main App stack based on authentication status.

---

## Phase 2: Authentication Flow (UI & API Integration)

*   **Screens:**
    *   `[x]` (UI) Build Login screen (`src/screens/Auth/LoginScreen.tsx`).
    *   `[x]` (UI) Build Registration screen (`src/screens/Auth/RegisterScreen.tsx`).
    *   `[x]` (UI) Build Forgot Password screen / flow screens.
*   **API Service:**
    *   `[x]` Implement API service functions (`src/services/api/auth.ts`) to call backend endpoints:
        *   `[x]` `/register` (API)
        *   `[x]` `/login` (API)
        *   `[x]` `/logout` (API)
        *   `[x]` `/forgot-password`, `/reset-password` (API)
*   **State Management:**
    *   `[x]` (Test) Implement Zustand store (`src/store/authStore.ts`) to manage:
        *   `[x]` Authentication token (`accessToken`).
        *   `[x]` User information (basic profile, `is_premium` flag).
        *   `[x]` Authentication status (`isAuthenticated`).
    *   `[x]` Implement logic to securely store/retrieve token using `react-native-keychain`.
    *   `[x]` Implement actions/logic in the store for `login`, `register`, `logout`.
*   **Integration:**
    *   `[x]` Connect Auth screens to API service functions and state management.
    *   `[x]` Handle loading states and display errors from API responses.
    *   `[x]` Implement navigation logic: navigate to Main App stack on successful login/register, navigate to Auth stack on logout or initial load if not authenticated.
    *   `[x]` Write code for component tests for Auth screens, mocking navigation and API calls.

---

## Phase 3: Main App Shell & Basic Content Display (Free Tier) 
*   **Navigation:**
    *   `[x]` (UI) Implement main app navigation (e.g., Bottom Tab Navigator for Protocols, Notes (placeholder), Settings). — @Cline
    *   `[x]` (UI) Implement stack navigators within tabs where needed (e.g., Protocol List -> Protocol Detail).
*   **Screens:**
    *   `[x]` (UI) Build Protocol List screen (`src/screens/Protocols/ProtocolListScreen.tsx`).
    *   `[x]` (UI) Build Protocol Detail screen (`src/screens/Protocols/ProtocolDetailScreen.tsx`).
    *   `[x]` (UI) Build Settings screen shell (`src/screens/Settings/SettingsScreen.tsx`).
*   **API Service:**
    *   `[x]` Implement API service functions (`src/services/api/content.ts`) for:
        *   `[x]` Fetching protocols (`/protocols`) (API)
        *   `[x]` Fetching protocol details (`/protocols/{id}`) (API)
*   **Integration:**
    *   `[x]` Fetch and display foundational protocol list/summaries on relevant screens.
    *   `[x]` Handle navigation between list and detail views.
    *   `[x]` Display loading/error states for content fetching.
    *   `[ ]` (UI) Implement visual indicators/prompts for premium-only content/features .
    *   `[ ]` Conditionally render limited content based on *backend API response* (backend determines free content).

---

## Phase 4: Subscription Flow (IAP Integration)

*   **IAP Setup:**
    *   `[x]` Install `react-native-iap` and link native dependencies.
    *   `[ ]` Configure products (Premium Monthly, Premium Annual) in App Store Connect and Google Play Console. Ensure IDs match backend `plans` table identifiers.
    *   `[ ]` Implement platform-specific setup for `react-native-iap` (iOS capabilities, Android billing dependency).
*   **API Service:**
    *   `[x]` Implement API service functions (`src/services/api/billing.ts`) for:
        *   `[x]` Fetching available plans (`/plans`) (API)
        *   `[x]` Fetching current user subscription status (`/user/subscription`) (API)
*   **Screens:**
    *   `[x]` (UI) Build "Go Premium" / Subscription Offers screen. Display plans fetched from API.
*   **State Management:**
    *   `[x]` Add subscription status (`plan`, `status`, `ends_at`) to relevant store (`authStore` or dedicated `billingStore`).
    *   `[x]` Implement logic to periodically fetch/refresh subscription status from `/user/subscription` API.
*   **Integration:**
    *   `[x]` Use `react-native-iap` functions to:
        *   `[x]` Fetch product details (`getProducts`).
        *   `[x]` Initiate purchase flow (`requestSubscription`).
    *   `[x]` Handle IAP purchase results (success, failure, cancellation).
        *   *Note:* The primary validation happens backend via webhooks. Frontend may need to inform the backend "purchase initiated" or simply refresh user/subscription status after a short delay or upon app foregrounding to reflect changes validated by the backend. Discuss exact flow with backend team.
    *   `[x]` Display current subscription status on Settings screen.
    *   `[x]` Conditionally display "Upgrade" prompts or premium features based on subscription status from the state store.
    *   `[x]` Handle IAP initialization errors and loading states.
    *   `[x]` Write code for store logic related to subscription status.

---

## Phase 5: Premium Features (MVP Scope)

*   **Content Display:**
    *   `[x]` Enhance Protocol Detail screen to display *full summaries/details* if user state indicates premium (`authStore.user.is_premium` or `billingStore.isActive`). Fetch potentially richer data from `/protocols/{id}` API (API needs to return it for premium users).
*   **Custom Reminders:**
    *   `[x]` (UI) Build Reminder List screen (Premium only).
    *   `[x]` (UI) Build Create/Edit Reminder screen (Premium only).
    *   `[x]` Implement API service functions (`src/services/api/reminders.ts`) for CRUD:
        *   `[x]` `GET /reminders` (API)
        *   `[x]` `POST /reminders` (API)
        *   `[x]` `PUT /reminders/{id}` (API)
        *   `[x]` `DELETE /reminders/{id}` (API)
    *   `[x]` Fetch and display existing reminders.
    *   `[x]` Implement form for creating/editing reminders (selecting protocol, time).
    *   `[x]` Integrate screens with API calls, handling loading/error states.
    *   `[x]` Ensure Reminder screens/features are only accessible/visible to premium users.

---

## Phase 6: Push Notifications Setup

*   **Firebase Setup:**
    *   `[x]` Install `@react-native-firebase/app` and `@react-native-firebase/messaging`.
    *   `[ ]` Configure Firebase project (iOS/Android apps). Download and add config files (`GoogleService-Info.plist`, `google-services.json`). (SKIP FOR NOW)
    *   `[x]` Implement native setup for Firebase messaging (AppDelegate, Podfile, build.gradle changes).
*   **Token Handling:**
    *   `[x]` Implement logic to request user permission for notifications.
    *   `[x]` Implement logic to get the FCM device token using `@react-native-firebase/messaging`.
    *   `[x]` Implement API service function (`src/services/api/user.ts`) to send the token to the backend (`POST /api/user/device-token`) (API).
    *   `[x]` Send token to backend upon successful login or when the token refreshes.
*   **Notification Handling:**
    *   `[x]` Implement listeners for foreground notifications.
    *   `[x]` Implement listeners/setup for background/quit state notification handling.
    *   `[x]` Implement logic to display incoming reminder notifications (or let OS handle basic display).

---

## Phase 7: Refinement, Testing & QA (without test run, without app running, just code)

*   **Styling & Polish:**
    *   `[x]` (UI) Perform visual review across all screens. Adjust styles for consistency and pixel-perfection (within reason).
    *   `[x]` Ensure consistent loading indicators and empty states.
    *   `[x]` Ensure responsive layout handling on different screen sizes/orientations.
*   **Error Handling:**
    *   `[x]` Implement user-friendly display for API errors (e.g., toast messages, inline errors).
    *   `[ ]` Handle network connectivity issues gracefully.
*   **Testing:**
*   **Accessibility (A11y):**
    *   `[x]` Add appropriate `accessibilityLabel`, `accessibilityHint`, `accessibilityRole` props.
    *   `[x]` Check color contrast ratios.
*   **Performance:**

---

## Phase 8: Build & Deployment Preparation

*   **Configuration:**
    *   `[ ]` Configure app icons and splash screens.
    *   `[ ]` Configure build settings (version codes, bundle IDs, signing certificates) for iOS and Android release builds.
    *   `[ ]` Ensure environment variable configuration works correctly for different builds (staging, production pointing to correct API URLs).
*   **App Store Setup:**
    *   `[ ]` Create app listings in App Store Connect and Google Play Console.
    *   `[ ]` Prepare required metadata (descriptions, screenshots, privacy policy URL).
*   **Build & Test:**
    *   `[ ]` Generate release builds for iOS (`.ipa`) and Android (`.aab`).

---

## Phase 9: Launch & Post-Launch

*   **Release:**
    *   `[ ]` Submit builds to TestFlight (iOS) / Internal Testing (Android) for final QA.
    *   `[ ]` Submit builds for App Store / Google Play review.
    *   `[ ]` Coordinate release timing with backend team.
*   **Monitoring:**
    *   `[ ]` Integrate and configure crash reporting service (Sentry, Bugsnag).
    *   `[ ]` Monitor crash reports and user feedback post-launch.
    *   `[ ]` Address critical issues promptly via patches/updates.
</file>

</files>
